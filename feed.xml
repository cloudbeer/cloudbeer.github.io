<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://youbug.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://youbug.cn/" rel="alternate" type="text/html" /><updated>2023-05-28T03:49:26+00:00</updated><id>https://youbug.cn/feed.xml</id><title type="html">YouBug</title><subtitle>分享，记录而已</subtitle><entry><title type="html">使用 SageMaker 部署 ChatGLM-6B 自定义 API</title><link href="https://youbug.cn/2023/05/sagemaker-chatglm.html" rel="alternate" type="text/html" title="使用 SageMaker 部署 ChatGLM-6B 自定义 API" /><published>2023-05-28T02:13:33+00:00</published><updated>2023-05-28T02:13:33+00:00</updated><id>https://youbug.cn/2023/05/sagemaker-chatglm</id><content type="html" xml:base="https://youbug.cn/2023/05/sagemaker-chatglm.html"><![CDATA[<p>ChatGLM-6B 默认是一个聊天模型，也可以用来提取 embeddings。但当前的企业内部智能搜索方案大多都使用了 text2vec + LLM 多个模型，text2vec 用于向量生产，LLM 用于对查询结果进行总结。本文试试图使用同一个 LLM 模型完成这两项工作，编写自定义 API，并将模型部署到 SageMaker 上。</p>

<h2 id="关键代码">关键代码</h2>

<p>废话不多说，ChatGLM-6B 抽取 embeddings 的关键代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">to_embeddings</span><span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="n">text</span><span class="p">):</span>
    <span class="n">input_ids</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s">"pt"</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="s">"cuda"</span><span class="p">)</span>
    <span class="n">model_output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">output_hidden_states</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">model_output</span><span class="p">.</span><span class="n">hidden_states</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">transpose</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span> <span class="n">p</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">tolist</span><span class="p">()</span>
</code></pre></div></div>

<p>上述代码不做过多解释，因为我也不太懂。</p>

<p>生成的结果是一个长度为 4096 的浮点数组。</p>

<h2 id="sagemaker-predict-接口设计">SageMaker predict 接口设计</h2>

<p>也直接看代码吧：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">predict_fn</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"text"</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="nb">type</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"type"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">response</span><span class="p">,</span> <span class="n">history</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">.</span><span class="n">chat</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">history</span><span class="o">=</span><span class="p">[])</span>
        <span class="k">return</span> <span class="n">response</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">to_embeddings</span><span class="p">(</span><span class="n">pipe</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</code></pre></div></div>

<p>预测接口增加了参数 <code class="language-plaintext highlighter-rouge">type</code>，可以通过使用此参数来执行不同的任务，在本例中</p>

<ul>
  <li>type 为 0 执行聊天任务</li>
  <li>else 生成 embeddings</li>
</ul>

<h2 id="部署">部署</h2>

<p>关键代码已经完成，现在只需要将上述逻辑放到 项目的 code 目录下的 <code class="language-plaintext highlighter-rouge">inference.py</code> 文件中，ChatGLM-6B 模型我们直接让 SageMaker 去 Huggingface 上下载。</p>

<p>code 目录我已经打包上传到 S3。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">boto3</span>  
<span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFaceModel</span>

<span class="n">s3_model</span> <span class="o">=</span> <span class="s">"s3://cloudbeer-llm-models/llm/chatglm-6b-model.tar.gz"</span>

<span class="n">iam_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'iam'</span><span class="p">)</span>
<span class="n">role</span> <span class="o">=</span> <span class="n">iam_client</span><span class="p">.</span><span class="n">get_role</span><span class="p">(</span><span class="n">RoleName</span><span class="o">=</span><span class="s">'HuggingfaceExecuteRole'</span><span class="p">)[</span><span class="s">'Role'</span><span class="p">][</span><span class="s">'Arn'</span><span class="p">]</span>

<span class="n">huggingface_model</span> <span class="o">=</span> <span class="n">HuggingFaceModel</span><span class="p">(</span>
  <span class="n">model_data</span><span class="o">=</span><span class="n">s3_model</span><span class="p">,</span>
  <span class="n">role</span><span class="o">=</span><span class="n">role</span><span class="p">,</span>
  <span class="n">transformers_version</span><span class="o">=</span><span class="s">'4.26'</span><span class="p">,</span>
  <span class="n">pytorch_version</span><span class="o">=</span><span class="s">'1.13'</span><span class="p">,</span>
  <span class="n">py_version</span><span class="o">=</span><span class="s">'py39'</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">huggingface_model</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span>
  <span class="n">initial_instance_count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
  <span class="n">instance_type</span><span class="o">=</span><span class="s">'ml.g4dn.2xlarge'</span><span class="p">,</span>
  <span class="n">endpoint_name</span><span class="o">=</span><span class="s">'chatglm-6b-model'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="测试">测试</h2>

<h4 id="sagemaker-模型加载">SageMaker 模型加载</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFacePredictor</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">HuggingFacePredictor</span><span class="p">(</span>
  <span class="n">endpoint_name</span><span class="o">=</span><span class="s">'chatglm-6b-model'</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="对话">对话</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">({</span>
    <span class="s">"text"</span><span class="p">:</span> <span class="s">"你好，你是谁"</span>
<span class="p">})</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">'我是一个名为 ChatGLM-6B 的人工智能助手，是基于清华大学 KEG 实验室和智谱 AI 公司于 2023 年共同训练的语言模型开发的。我的任务是针对用户的问题和要求提供适当的答复和支持。'
</code></p>

<h4 id="生产-embedddings">生产 embedddings</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span> <span class="o">=</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">({</span>
    <span class="s">"text"</span><span class="p">:</span> <span class="s">"你好世界"</span><span class="p">,</span>
    <span class="s">"type"</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">),</span> <span class="n">res</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">4096 [-0.0092010498046875, 0.0296630859375]</code></p>

<h2 id="避坑">避坑</h2>

<p>下面的坑截止到本文写作日期存在：</p>

<ul>
  <li>ChatGLM-6B 的最小机型应该是 2xlarge，如 ml.g4dn.2xlarge，我使用 xlarge 一直出错，日志显示 模型无法加载到 100%。</li>
  <li>transfomers 的最小版本需求为 4.27.1，当前 SageMaker 的 Huggingface 最高版本是 4.26.1，在 requirements.txt 中加入相应的版本依赖即可。</li>
  <li>如果使用了 CUDA，按照报错信息，需要增加 cpm-kernels 的依赖。</li>
</ul>

<p>我的 code/requirements.txt 如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cpm-kernels==1.0.11
transformers==4.27.1
</code></pre></div></div>

<hr />
<p>参考：</p>

<p><a href="https://github.com/cloudbeer/chatglm-infer-sagemaker">本文完整源码</a></p>

<p><a href="https://huggingface.co/THUDM/chatglm-6b">https://huggingface.co/THUDM/chatglm-6b</a></p>

<p><a href="https://github.com/lm-sys/FastChat/blob/51ed4fab89f61988e8395a3268595f1effb8528f/fastchat/serve/model_worker.py#L246">FastChat 中各 LLM 获取 embeddings 的方法</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="sagemaker" /><summary type="html"><![CDATA[ChatGLM-6B 默认是一个聊天模型，也可以用来提取 embeddings。但当前的企业内部智能搜索方案大多都使用了 text2vec + LLM 多个模型，text2vec 用于向量生产，LLM 用于对查询结果进行总结。本文试试图使用同一个 LLM 模型完成这两项工作，编写自定义 API，并将模型部署到 SageMaker 上。]]></summary></entry><entry><title type="html">在 AWS 上使用 Stable Diffusion 给商品更换模特(二)</title><link href="https://youbug.cn/2023/05/sagemaker-sd-inpaint-2.html" rel="alternate" type="text/html" title="在 AWS 上使用 Stable Diffusion 给商品更换模特(二)" /><published>2023-05-16T09:10:49+00:00</published><updated>2023-05-16T09:10:49+00:00</updated><id>https://youbug.cn/2023/05/sagemaker-sd-inpaint-2</id><content type="html" xml:base="https://youbug.cn/2023/05/sagemaker-sd-inpaint-2.html"><![CDATA[<p>现在，我准备上传图片和蒙版到 S3，触发部署代码，并完成任务，推理完成之后，释放 Endpoint。</p>

<h2 id="模型加载流程改善">模型加载流程改善</h2>

<p>在进行试验的过程中，发现每次对模型进行打包和上传 S3 会浪费很多时间。</p>

<p>此处改进一下：<strong>在加载模型的时候，直接从 Huggingface 的 <code class="language-plaintext highlighter-rouge">runwayml/stable-diffusion-inpainting</code> 加载模型</strong>。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">model_fn</span><span class="p">(</span><span class="n">model_dir</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">model_dir</span><span class="p">)</span>
    <span class="n">pipe</span> <span class="o">=</span> <span class="n">StableDiffusionInpaintPipeline</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span>
        <span class="s">"runwayml/stable-diffusion-inpainting"</span><span class="p">,</span>
        <span class="n">torch_dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="n">float16</span><span class="p">,</span>
        <span class="n">safety_checker</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="p">)</span>
    <span class="n">pipe</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="s">"cuda"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pipe</span>
</code></pre></div></div>

<p>使用上面的方法可以从 Huggingface 加载模型，并使用自己的推理代码。</p>

<p>具体做法是：</p>

<ul>
  <li>创建一个文件夹，如 src</li>
  <li>在 src 下创建 code 文件夹</li>
  <li>在 code 文件夹下加入 inference.py 和 requirements.txt 文件</li>
  <li>修改 inference.py 的 model_fn 方法，如上</li>
  <li>打包上传 code 下面的两个文件</li>
</ul>

<p>现在无需下载模型到本地打包了，真实部署的时候，SageMaker 会去下载模型。</p>

<p>当前上传的程序包只有 1k 左右，如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/environment/stable-diffusion-inpainting <span class="o">(</span>main<span class="o">)</span> <span class="nv">$ </span>tree
<span class="nb">.</span>
├── code
│   ├── inference.py
│   └── requirements.txt
</code></pre></div></div>

<h2 id="inferencepy-代码解读">inference.py 代码解读</h2>

<p>商品图片下载方式修改：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">split_s3_path</span><span class="p">(</span><span class="n">s3_path</span><span class="p">):</span>
    <span class="n">path_parts</span><span class="o">=</span><span class="n">s3_path</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"s3://"</span><span class="p">,</span><span class="s">""</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">"/"</span><span class="p">)</span>
    <span class="n">bucket</span><span class="o">=</span><span class="n">path_parts</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">key</span><span class="o">=</span><span class="s">"/"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">path_parts</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bucket</span><span class="p">,</span> <span class="n">key</span>

<span class="k">def</span> <span class="nf">download_image</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">):</span>
    <span class="n">o</span> <span class="o">=</span> <span class="n">split_s3_path</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">s3</span><span class="p">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">Bucket</span><span class="o">=</span><span class="n">o</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">Key</span><span class="o">=</span><span class="n">o</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="s">'Body'</span><span class="p">].</span><span class="n">read</span><span class="p">()</span>
    <span class="n">res_img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">response</span><span class="p">)).</span><span class="n">convert</span><span class="p">(</span><span class="s">"RGB"</span><span class="p">)</span>
    <span class="n">res_img</span> <span class="o">=</span> <span class="n">res_img</span><span class="p">.</span><span class="n">resize</span><span class="p">((</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">res_img</span>
</code></pre></div></div>

<ul>
  <li>商品和图片的入参会修改为 S3 地址，如：s3://cloudbeer-llm-models/works/2023-05-16/shirt01.png</li>
  <li>在后期可以做相关触发器，直接读取 S3 地址</li>
</ul>

<p>整个生产流程也进行了改进：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gen</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"prompt"</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">image_url</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"image_url"</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">mask_url</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"mask_url"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"width"</span><span class="p">,</span> <span class="mi">384</span><span class="p">)</span>
    <span class="n">height</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"height"</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
    
    <span class="n">image_ori</span> <span class="o">=</span> <span class="n">download_image</span><span class="p">(</span><span class="n">image_url</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">mask_url</span><span class="p">:</span> 
        <span class="n">mask_image</span> <span class="o">=</span> <span class="n">download_image</span><span class="p">(</span><span class="n">mask_url</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">mask_url</span> <span class="o">=</span> <span class="n">image_url</span>
        <span class="n">mask_image</span> <span class="o">=</span> <span class="n">image_ori</span>

    <span class="n">num_inference_steps</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"num_inference_steps"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
    <span class="n">guidance_scale</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"guidance_scale"</span><span class="p">,</span> <span class="mf">7.5</span><span class="p">)</span>
    <span class="n">num_images_per_prompt</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"num_images_per_prompt"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="n">prompt_suffix</span> <span class="o">=</span> <span class="s">",fine skin,masterpiece,cinematic light, ultra high res, film grain, perfect anatomy, best shadow, delicate,(photorealistic:1.4),(extremely intricate:1.2)"</span>
    <span class="n">nprompt</span> <span class="o">=</span> <span class="s">'bad_legs,bad_fingers,(semi_realistic,cgi,3d,render,sketch,cartoon,drawing,anime:1.4),text,cropped,out_of_frame,worst_quality,low_quality,jpeg_artifacts,ugly,duplicate,morbid,mutilated,extra_fingers,mutated_hands,poorly_drawn_hands,poorly_drawn_face,mutation,deformed,blurry,dehydrated,bad_anatomy,bad_proportions,extra_limbs,cloned_face,disfigured,gross_proportions,malformed_limbs,missing_arms,missing_legs,extra_arms,extra_legs,fused_fingers,too_many_fingers,long_neck,signature'</span>


    <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span> 
    <span class="n">date_str</span> <span class="o">=</span> <span class="n">now</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%Y-%m-%d"</span><span class="p">)</span>

    <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;html&gt;&lt;head&gt;&lt;title&gt;图片生成"</span> <span class="o">+</span> <span class="n">date_str</span> <span class="o">+</span> <span class="s">"&lt;/title&gt;&lt;link href='../main.css' rel='stylesheet'&gt;&lt;/head&gt;&lt;body&gt;"</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="s">"&lt;h1&gt;图片生成"</span> <span class="o">+</span> <span class="n">date_str</span> <span class="o">+</span> <span class="s">"&lt;/h1&gt;"</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="s">"&lt;h4&gt;提示词: "</span> <span class="o">+</span> <span class="n">prompt</span> <span class="o">+</span> <span class="n">prompt_suffix</span> <span class="o">+</span> <span class="s">"&lt;/h4&gt;"</span>
    
    <span class="n">cf_in_url</span> <span class="o">=</span> <span class="n">s3_to_cf_url</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span>
    <span class="n">cf_msk_url</span> <span class="o">=</span> <span class="n">s3_to_cf_url</span><span class="p">(</span><span class="n">mask_url</span><span class="p">)</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="s">"&lt;div&gt;&lt;a href='"</span> <span class="o">+</span> <span class="n">cf_in_url</span> <span class="o">+</span> <span class="s">"' target='_blank'&gt;&lt;img src='"</span> <span class="o">+</span> <span class="n">cf_in_url</span> <span class="o">+</span> <span class="s">"' /&gt;&lt;/a&gt;"</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="s">"&lt;a href='"</span> <span class="o">+</span> <span class="n">cf_msk_url</span> <span class="o">+</span> <span class="s">"' target='_blank'&gt;&lt;img src='"</span> <span class="o">+</span> <span class="n">cf_msk_url</span> <span class="o">+</span> <span class="s">"' /&gt;&lt;/a&gt;&lt;/div&gt;"</span>


    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_images_per_prompt</span><span class="p">):</span>
        <span class="n">generated_images</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">(</span>
            <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span> <span class="o">+</span> <span class="n">prompt_suffix</span><span class="p">,</span>
            <span class="n">negative_prompt</span><span class="o">=</span><span class="n">nprompt</span><span class="p">,</span>
            <span class="n">image</span><span class="o">=</span><span class="n">image_ori</span><span class="p">,</span> 
            <span class="n">mask_image</span><span class="o">=</span><span class="n">mask_image</span><span class="p">,</span>
            <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">,</span>
            <span class="n">height</span><span class="o">=</span><span class="n">height</span><span class="p">,</span>
            <span class="n">num_inference_steps</span><span class="o">=</span><span class="n">num_inference_steps</span><span class="p">,</span>
            <span class="n">guidance_scale</span><span class="o">=</span><span class="n">guidance_scale</span><span class="p">,</span>
            <span class="n">num_images_per_prompt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="p">)[</span><span class="s">"images"</span><span class="p">]</span>

        <span class="k">for</span> <span class="n">image</span> <span class="ow">in</span> <span class="n">generated_images</span><span class="p">:</span>
            <span class="n">file_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="n">uuid4</span><span class="p">())</span> <span class="o">+</span> <span class="s">".jpg"</span>
            <span class="n">key</span> <span class="o">=</span> <span class="n">key_prefix</span> <span class="o">+</span> <span class="n">date_str</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="n">file_name</span>
            <span class="n">in_mem_file</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">()</span>
            <span class="n">image</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">in_mem_file</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s">"JPEG"</span><span class="p">)</span>
            <span class="n">in_mem_file</span><span class="p">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">s3</span><span class="p">.</span><span class="n">upload_fileobj</span><span class="p">(</span>
                <span class="n">in_mem_file</span><span class="p">,</span> 
                <span class="n">saving_bucket</span><span class="p">,</span> 
                <span class="n">key</span><span class="p">,</span>
                <span class="n">ExtraArgs</span><span class="o">=</span><span class="p">{</span>
                    <span class="s">'ContentType'</span><span class="p">:</span> <span class="s">'image/jpeg'</span>
                <span class="p">}</span>
            <span class="p">)</span>
            <span class="n">html</span> <span class="o">+=</span> <span class="s">"&lt;a href='"</span> <span class="o">+</span> <span class="n">file_name</span> <span class="o">+</span> <span class="s">"' target='_blank'&gt;&lt;img src='"</span> <span class="o">+</span> <span class="n">file_name</span> <span class="o">+</span> <span class="s">"' /&gt;&lt;/a&gt;"</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="s">"&lt;/body&gt;&lt;/html&gt;"</span>

    <span class="n">index_file_name</span> <span class="o">=</span> <span class="s">'index-'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="n">uuid4</span><span class="p">())</span> <span class="o">+</span> <span class="s">'.html'</span>
    <span class="n">s3</span><span class="p">.</span><span class="n">put_object</span><span class="p">(</span>
        <span class="n">Bucket</span><span class="o">=</span><span class="s">'cloudbeer-llm-models'</span><span class="p">,</span>
        <span class="n">Key</span><span class="o">=</span><span class="n">key_prefix</span> <span class="o">+</span> <span class="n">date_str</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="n">index_file_name</span><span class="p">,</span>
        <span class="n">Body</span><span class="o">=</span><span class="n">html</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">),</span>
        <span class="n">ContentType</span><span class="o">=</span><span class="s">'text/html'</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="n">cloudfront_url</span> <span class="o">+</span> <span class="n">key_prefix</span> <span class="o">+</span> <span class="n">date_str</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="n">index_file_name</span>

</code></pre></div></div>

<p>代码中需要注意的是：</p>

<ul>
  <li>推理 pipeline 中，改为每次生产 1 张图片，num_images_per_prompt 改为循环次数，这样可以有效避免内存溢出</li>
  <li>每生产一张图片，就上传到 S3</li>
  <li>将此次任务的图片生产出一个 html 预览页</li>
  <li>S3 会通过 Cloudfront 映射出来，方便预览</li>
</ul>

<p>代码完成之后，可以直接打包，并上传 S3:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ./src

<span class="nb">rm </span>stable-diffusion-inpainting-tryon.tar.gz
<span class="nb">tar </span>zcvf stable-diffusion-inpainting-tryon.tar.gz <span class="k">*</span>

aws s3 <span class="nb">cp </span>stable-diffusion-inpainting-tryon.tar.gz <span class="se">\</span>
  s3://cloudbeer-llm-models/diffusers/stable-diffusion-inpainting-tryon.tar.gz
</code></pre></div></div>

<h2 id="模型部署">模型部署</h2>

<p>直接通过 SageMaker 部署：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">boto3</span>  
<span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFaceModel</span>

<span class="n">s3_model</span> <span class="o">=</span> <span class="s">"s3://cloudbeer-llm-models/diffusers/stable-diffusion-inpainting-tryon.tar.gz"</span>

<span class="n">iam_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'iam'</span><span class="p">)</span>
<span class="n">role</span> <span class="o">=</span> <span class="n">iam_client</span><span class="p">.</span><span class="n">get_role</span><span class="p">(</span><span class="n">RoleName</span><span class="o">=</span><span class="s">'HuggingfaceExecuteRole'</span><span class="p">)[</span><span class="s">'Role'</span><span class="p">][</span><span class="s">'Arn'</span><span class="p">]</span>

<span class="n">huggingface_model</span> <span class="o">=</span> <span class="n">HuggingFaceModel</span><span class="p">(</span>
  <span class="n">model_data</span><span class="o">=</span><span class="n">s3_model</span><span class="p">,</span>
  <span class="n">role</span><span class="o">=</span><span class="n">role</span><span class="p">,</span>
  <span class="n">transformers_version</span><span class="o">=</span><span class="s">"4.26"</span><span class="p">,</span>  
  <span class="n">pytorch_version</span><span class="o">=</span><span class="s">"1.13"</span><span class="p">,</span>
  <span class="n">py_version</span><span class="o">=</span><span class="s">'py39'</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">huggingface_model</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span>
  <span class="n">initial_instance_count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
  <span class="n">instance_type</span><span class="o">=</span><span class="s">'ml.g4dn.xlarge'</span><span class="p">,</span>
  <span class="n">endpoint_name</span><span class="o">=</span><span class="s">'sd-inpainting-tryon'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>由于要从 SageMaker 上传 S3，HuggingfaceExecuteRole 这个角色要加入相应 S3 写权限</li>
</ul>

<p>大约 5 分钟后，部署完成。</p>

<h2 id="推理任务">推理任务</h2>

<p>推理代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFacePredictor</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">HuggingFacePredictor</span><span class="p">(</span>
  <span class="n">endpoint_name</span><span class="o">=</span><span class="s">'sd-inpainting-tryon'</span>
<span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">({</span>
    <span class="s">"prompt"</span><span class="p">:</span> <span class="s">"a strong man,back view,white shorts,football field"</span><span class="p">,</span>
    <span class="s">"image_url"</span><span class="p">:</span> <span class="s">"s3://cloudbeer-llm-models/works/2023-05-16/shirt01.png"</span><span class="p">,</span>
    <span class="s">"mask_url"</span><span class="p">:</span> <span class="s">"s3://cloudbeer-llm-models/works/2023-05-16/shirt01_mask.png"</span><span class="p">,</span>
    <span class="s">"num_images_per_prompt"</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="s">"width"</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span>
    <span class="s">"height"</span><span class="p">:</span> <span class="mi">512</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>

<p>当前手工执行的，后期可以加入 CloudWatch 或者 S3 时间触发器进行调用。</p>

<p>会打印一个 url，内容大概如下：</p>

<p><img src="/assets/posts/aiml/sd-inpaiting-2.jpg" alt="sd-inpainting-tryon" /></p>

<p>推理任务完成后，删除计算资源：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictor</span><span class="p">.</span><span class="n">delete_model</span><span class="p">()</span>
<span class="n">predictor</span><span class="p">.</span><span class="n">delete_endpoint</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<p>参考：</p>

<p><a href="https://github.com/cloudbeer/sd-inpainting-tryon">本文完整源码</a></p>

<p><a href="sagemaker-sd-inpaint-1.html">在 AWS 上使用 Stable Diffusion 给商品更换模特(一)</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="aws" /><summary type="html"><![CDATA[现在，我准备上传图片和蒙版到 S3，触发部署代码，并完成任务，推理完成之后，释放 Endpoint。]]></summary></entry><entry><title type="html">在 AWS 上使用 Stable Diffusion 给商品更换模特(一)</title><link href="https://youbug.cn/2023/05/sagemaker-sd-inpaint-1.html" rel="alternate" type="text/html" title="在 AWS 上使用 Stable Diffusion 给商品更换模特(一)" /><published>2023-05-14T12:10:49+00:00</published><updated>2023-05-14T12:10:49+00:00</updated><id>https://youbug.cn/2023/05/sagemaker-sd-inpaint-1</id><content type="html" xml:base="https://youbug.cn/2023/05/sagemaker-sd-inpaint-1.html"><![CDATA[<p>给商品图片安上模特可以使用 stable-diffusion-inpainting 这个模型来轻松实现。本文探讨使用 AWS 服务来进行流水线方式生产，并最大程度节约使用成本。</p>

<h2 id="模型准备">模型准备</h2>

<p>建议使用云上实例来操作此步，如 SageMaker 的笔记本实例，或者在相关的 region 里开通 Cloud9。在云上操作，下载和上传速度会更快。</p>

<p>下载 Huggingface 模型：stable-diffusion-inpainting</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git lfs <span class="nb">install
</span>git clone https://huggingface.co/runwayml/stable-diffusion-inpainting
</code></pre></div></div>

<blockquote>
  <p>在云上的小机型使用 git clone 大模型的时候会出现 OOM 错误，上述模型大小为 4G，使用小于 2c4g 的实例 Clone 会 OOM。</p>

  <p>使用如下命令：</p>

  <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git lfs <span class="nb">install</span> <span class="nt">--skip-smudge</span>
git clone https://huggingface.co/runwayml/stable-diffusion-inpainting
<span class="nb">cd </span>stable-diffusion-inpainting
git lfs pull
</code></pre></div>  </div>
</blockquote>

<p>在 SageMaker 中自定义推理，需要编写一个 code 目录，并放上 2 个文件：</p>

<p>code 目录下的 inference.py 文件：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="nn">io</span> <span class="kn">import</span> <span class="n">BytesIO</span>
<span class="kn">from</span> <span class="nn">diffusers</span> <span class="kn">import</span> <span class="n">StableDiffusionInpaintPipeline</span>


<span class="k">def</span> <span class="nf">model_fn</span><span class="p">(</span><span class="n">model_dir</span><span class="p">):</span>
    <span class="n">pipe</span> <span class="o">=</span> <span class="n">StableDiffusionInpaintPipeline</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span>
        <span class="n">model_dir</span><span class="p">,</span>
        <span class="n">torch_dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="n">float16</span><span class="p">,</span>
        <span class="n">safety_checker</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="p">)</span>
    <span class="n">pipe</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="s">"cuda"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pipe</span>

<span class="k">def</span> <span class="nf">download_image</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">res_img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)).</span><span class="n">convert</span><span class="p">(</span><span class="s">"RGB"</span><span class="p">)</span>
    <span class="n">res_img</span> <span class="o">=</span> <span class="n">res_img</span><span class="p">.</span><span class="n">resize</span><span class="p">((</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">res_img</span>

<span class="k">def</span> <span class="nf">gen</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"prompt"</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">image_url</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"image_url"</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">mask_url</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"mask_url"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"width"</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
    <span class="n">height</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"height"</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
    
    <span class="n">image_ori</span> <span class="o">=</span> <span class="n">download_image</span><span class="p">(</span><span class="n">image_url</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">mask_url</span><span class="p">:</span> 
        <span class="n">mask_image</span> <span class="o">=</span> <span class="n">download_image</span><span class="p">(</span><span class="n">mask_url</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">mask_image</span> <span class="o">=</span> <span class="n">image_ori</span>


    <span class="n">num_inference_steps</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"num_inference_steps"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
    <span class="n">guidance_scale</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"guidance_scale"</span><span class="p">,</span> <span class="mf">7.5</span><span class="p">)</span>
    <span class="n">num_images_per_prompt</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"num_images_per_prompt"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="n">prompt_suffix</span> <span class="o">=</span> <span class="s">",pretty face,fine skin,masterpiece,cinematic light, ultra high res, film grain, perfect anatomy, best shadow, delicate,(photorealistic:1.4),(extremely intricate:1.2)"</span>
    <span class="n">nprompt</span> <span class="o">=</span> <span class="s">'bad_legs,bad_fingers,(semi_realistic,cgi,3d,render,sketch,cartoon,drawing,anime:1.4),text,cropped,out_of_frame,worst_quality,low_quality,jpeg_artifacts,ugly,duplicate,morbid,mutilated,extra_fingers,mutated_hands,poorly_drawn_hands,poorly_drawn_face,mutation,deformed,blurry,dehydrated,bad_anatomy,bad_proportions,extra_limbs,cloned_face,disfigured,gross_proportions,malformed_limbs,missing_arms,missing_legs,extra_arms,extra_legs,fused_fingers,too_many_fingers,long_neck,signature'</span>

    <span class="n">generated_images</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">(</span>
        <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span> <span class="o">+</span> <span class="n">prompt_suffix</span><span class="p">,</span>
        <span class="n">negative_prompt</span><span class="o">=</span><span class="n">nprompt</span><span class="p">,</span>
        <span class="n">image</span><span class="o">=</span><span class="n">image_ori</span><span class="p">,</span> 
        <span class="n">mask_image</span><span class="o">=</span><span class="n">mask_image</span><span class="p">,</span>  
        <span class="n">eta</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
        <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">,</span>
        <span class="n">height</span><span class="o">=</span><span class="n">height</span><span class="p">,</span>
        <span class="n">num_inference_steps</span><span class="o">=</span><span class="n">num_inference_steps</span><span class="p">,</span>
        <span class="n">guidance_scale</span><span class="o">=</span><span class="n">guidance_scale</span><span class="p">,</span>
        <span class="n">num_images_per_prompt</span><span class="o">=</span><span class="n">num_images_per_prompt</span><span class="p">,</span>
    <span class="p">)[</span><span class="s">"images"</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">generated_images</span>

<span class="k">def</span> <span class="nf">predict_fn</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
    <span class="n">generated_images</span> <span class="o">=</span> <span class="n">gen</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">pipe</span><span class="p">)</span>
    <span class="n">encoded_images</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">image</span> <span class="ow">in</span> <span class="n">generated_images</span><span class="p">:</span>
        <span class="n">buffered</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">()</span>
        <span class="n">image</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">buffered</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s">"JPEG"</span><span class="p">)</span>
        <span class="n">encoded_images</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">buffered</span><span class="p">.</span><span class="n">getvalue</span><span class="p">()).</span><span class="n">decode</span><span class="p">())</span>

    <span class="k">return</span> <span class="p">{</span><span class="s">"generated_images"</span><span class="p">:</span> <span class="n">encoded_images</span><span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>内置定义了部分 prompt  和 完整的 negative_prompt，这些 prompt 可以帮助生产质量比较高的图片，在使用过程中只需要输入你需要的模特提示词即可。</li>
  <li>width 和 height 定义了图片的像素大小，默认 512*512，此尺寸也可以在推理的时候指定，建议不要太大（根据机型的GPU内存不同，太大会溢出），并且尺寸必须是 8 的倍数。</li>
  <li>商品图片的处理建议：
    <ul>
      <li>image_url: 定义了原来的商品图片，此图片最好是纯白底，当前 SD 模型可以直接重绘白色部分，<strong>使用自己作为遮罩 mask</strong>。</li>
      <li>如果你的商品图片是白色基调，那么则需要处理一张遮罩图片，将商品部分涂黑，需要重绘的部分变成白色。</li>
      <li>商品建议不要充满整张图片，需要将模特的头部留出空白位置，如果需要身体其他部分，也需要留出位置。</li>
    </ul>
  </li>
</ul>

<p>code 目录下 requirements.txt：</p>

<pre><code class="language-txt">diffusers[torch]==0.16.1
</code></pre>

<p>现在你的项目目录应该类似这样：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/environment/stable-diffusion-inpainting <span class="o">(</span>main<span class="o">)</span> <span class="nv">$ </span>tree
<span class="nb">.</span>
├── code
│   ├── inference.py
│   └── requirements.txt
├── config.json
├── feature_extractor
│   └── preprocessor_config.json
├── model_index.json
├── README.md
├── safety_checker
│   ├── config.json
│   └── pytorch_model.bin
├── scheduler
│   └── scheduler_config.json
├── sd-v1-5-inpainting.ckpt
├── text_encoder
│   ├── config.json
│   └── pytorch_model.bin
├── tokenizer
│   ├── merges.txt
│   ├── special_tokens_map.json
│   ├── tokenizer_config.json
│   └── vocab.json
├── unet
│   ├── config.json
│   └── diffusion_pytorch_model.bin
└── vae
    ├── config.json
    └── diffusion_pytorch_model.bin
</code></pre></div></div>

<p>打包上传 S3:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>zcvf stable-diffusion-inpainting.tar.gz <span class="k">*</span>

aws s3 <span class="nb">cp </span>stable-diffusion-inpainting.tar.gz <span class="se">\</span>
  s3://cloudbeer-llm-models/diffusers/stable-diffusion-inpainting.tar.gz
</code></pre></div></div>

<blockquote>
  <p>当前模型整体有 8 G，打包上传这一步对于简中用户会比较痛苦，特别是代码写错的情况下。</p>

  <p>我很痛苦！！</p>
</blockquote>

<h2 id="部署模型">部署模型</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">boto3</span>  
<span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFaceModel</span>

<span class="n">s3_model</span> <span class="o">=</span> <span class="s">"s3://cloudbeer-llm-models/diffusers/stable-diffusion-inpainting.tar.gz"</span>

<span class="n">iam_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'iam'</span><span class="p">)</span>
<span class="n">role</span> <span class="o">=</span> <span class="n">iam_client</span><span class="p">.</span><span class="n">get_role</span><span class="p">(</span><span class="n">RoleName</span><span class="o">=</span><span class="s">'HuggingfaceExecuteRole'</span><span class="p">)[</span><span class="s">'Role'</span><span class="p">][</span><span class="s">'Arn'</span><span class="p">]</span>

<span class="n">huggingface_model</span> <span class="o">=</span> <span class="n">HuggingFaceModel</span><span class="p">(</span>
  <span class="n">model_data</span><span class="o">=</span><span class="n">s3_model</span><span class="p">,</span>
  <span class="n">role</span><span class="o">=</span><span class="n">role</span><span class="p">,</span>                    
  <span class="n">transformers_version</span><span class="o">=</span><span class="s">"4.26"</span><span class="p">,</span>  
  <span class="n">pytorch_version</span><span class="o">=</span><span class="s">"1.13"</span><span class="p">,</span>
  <span class="n">py_version</span><span class="o">=</span><span class="s">'py39'</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">huggingface_model</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span>
  <span class="n">initial_instance_count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
  <span class="n">instance_type</span><span class="o">=</span><span class="s">'ml.g4dn.xlarge'</span><span class="p">,</span>
  <span class="n">endpoint_name</span><span class="o">=</span><span class="s">'sd-inpainting-try-on'</span>
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>使用了 GPU 机型 ml.g4dn.xlarge</li>
  <li>给 Endpoint 定义了个名称：sd-inpainting-try-on</li>
</ul>

<h2 id="测试推理">测试推理</h2>

<p>下面的测试在本地 Notebook 中进行的，代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFacePredictor</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">HuggingFacePredictor</span><span class="p">(</span>
  <span class="n">endpoint_name</span><span class="o">=</span><span class="s">'sd-inpainting-try-on'</span>
<span class="p">)</span>

<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">from</span> <span class="nn">io</span> <span class="kn">import</span> <span class="n">BytesIO</span>


<span class="k">def</span> <span class="nf">display_images</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">image</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">images</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)</span> <span class="o">/</span> <span class="n">columns</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">columns</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decode_base64_image</span><span class="p">(</span><span class="n">image_string</span><span class="p">):</span>
  <span class="n">base64_image</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">image_string</span><span class="p">)</span>
  <span class="nb">buffer</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">(</span><span class="n">base64_image</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">({</span>
    <span class="s">"prompt"</span><span class="p">:</span> <span class="s">"a strong man,football field, back view"</span><span class="p">,</span>
    <span class="s">"image_url"</span><span class="p">:</span> <span class="s">"https://d1ffqcflvp9rc.cloudfront.net/samples/images/shirt01.png"</span><span class="p">,</span>
    <span class="s">"mask_url"</span><span class="p">:</span> <span class="s">"https://d1ffqcflvp9rc.cloudfront.net/samples/images/shirt01_mask.png"</span><span class="p">,</span>
    <span class="s">"width"</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span>
    <span class="s">"height"</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span>
    <span class="s">"num_images_per_prompt"</span><span class="p">:</span> <span class="mi">2</span>
<span class="p">})</span>

<span class="n">decoded_images</span> <span class="o">=</span> <span class="p">[</span><span class="n">decode_base64_image</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="k">for</span> <span class="n">image</span> <span class="ow">in</span> <span class="n">res</span><span class="p">[</span><span class="s">"generated_images"</span><span class="p">]]</span>

<span class="n">display_images</span><span class="p">(</span><span class="n">decoded_images</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>从 Endpoint 的名称 <code class="language-plaintext highlighter-rouge">sd-inpainting-try-on</code> 中获取一个 HuggingFacePredictor 实例</li>
  <li>调用 predict 方法完成推理</li>
</ul>

<p>下面是图片的结果：</p>

<table>
  <thead>
    <tr>
      <th>原图</th>
      <th>蒙版</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="https://d1ffqcflvp9rc.cloudfront.net/samples/images/shirt01.png" alt="skirt" /></td>
      <td><img src="https://d1ffqcflvp9rc.cloudfront.net/samples/images/shirt01_mask.png" alt="skirt mask" /></td>
    </tr>
  </tbody>
</table>

<p>结果样例</p>

<p><img src="/assets/posts/aiml/sd-inpaiting-skirt-output.jpg" alt="output samples" /></p>

<h2 id="流水线处理">流水线处理</h2>

<p>接下来我想设计一个流水线来处理此过程，让图片可以被批量自动处理，处理结束之后，可以自动结束计算资源。</p>

<p>待续…</p>

<hr />

<p>参考：</p>

<p><a href="sagemaker-sd-inpaint-2.html">在 AWS 上使用 Stable Diffusion 给商品更换模特(二)</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="aws" /><summary type="html"><![CDATA[给商品图片安上模特可以使用 stable-diffusion-inpainting 这个模型来轻松实现。本文探讨使用 AWS 服务来进行流水线方式生产，并最大程度节约使用成本。]]></summary></entry><entry><title type="html">在 SageMaker 上部署 Huggingface 模型 (二)</title><link href="https://youbug.cn/2023/05/deploy-huggingface-model-2-sagemaker-2.html" rel="alternate" type="text/html" title="在 SageMaker 上部署 Huggingface 模型 (二)" /><published>2023-05-11T08:13:33+00:00</published><updated>2023-05-11T08:13:33+00:00</updated><id>https://youbug.cn/2023/05/deploy-huggingface-model-2-sagemaker-2</id><content type="html" xml:base="https://youbug.cn/2023/05/deploy-huggingface-model-2-sagemaker-2.html"><![CDATA[<p>在 Huggingface 上，有些模型并没有 Deploy - Sagemaker 这个功能，或者我们需要做一些特殊的任务，怎么办？本文介绍了如何让 SageMaker 调用自定义的推理代码。</p>

<h2 id="背景">背景</h2>

<p>在 <a href="deploy-huggingface-model-2-sagemaker-1.html">上一篇文章</a> 里，我们直接使用了 Huggingface 官方提供的部署和推理代码中，并使用了他提供了默认的 HF_TASK，如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hub</span> <span class="o">=</span>  <span class="p">{</span>
 <span class="s">'HF_MODEL_ID'</span><span class="p">:</span><span class="s">'bert-base-chinese'</span><span class="p">,</span>
 <span class="s">'HF_TASK'</span><span class="p">:</span><span class="s">'fill-mask'</span>
<span class="p">}</span>
</code></pre></div></div>

<p>现在我们计划做一个推理 embeddings 文本转向量任务，使用自己的推理代码。</p>

<h2 id="代码准备">代码准备</h2>

<p>本文选取了 distiluse-base-multilingual-cased-v2  这个模型，这个模型可以推理多语言的 embeddings，他在 Huggingface 上没有部署到 SageMaker 的选项。</p>

<p>先下载这个代码仓库：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git lfs <span class="nb">install
</span>git clone https://huggingface.co/sentence-transformers/distiluse-base-multilingual-cased-v2
</code></pre></div></div>

<p>进入这个代码仓库，在编辑器里增加两个文件，一个 推理文件 <code class="language-plaintext highlighter-rouge">code/inference.py</code>，一个依赖库文件 <code class="language-plaintext highlighter-rouge">code/requirements.txt</code>。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>distiluse-base-multilingual-cased-v2
<span class="nb">mkdir </span>code
<span class="nb">touch </span>code/inference.py
<span class="nb">touch </span>code/requirements.txt 
</code></pre></div></div>

<p>我们需要在 <code class="language-plaintext highlighter-rouge">inference.py</code> 里添加 model_fn 和 predict_fn 这俩函数，这个文件如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>

<span class="k">def</span> <span class="nf">model_fn</span><span class="p">(</span><span class="n">model_dir</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">SentenceTransformer</span><span class="p">(</span><span class="n">model_dir</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">predict_fn</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">model</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>在 <code class="language-plaintext highlighter-rouge">requirements.txt</code> 里加入 sentence_transformers 的引用：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sentence_transformers==2.2.2
</code></pre></div></div>

<h2 id="打包上传">打包上传</h2>

<p>现在把这个库打包上传到 S3：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>zcvf distiluse-base-multilingual-cased-v2.tar.gz <span class="k">*</span>

aws s3 <span class="nb">cp </span>distiluse-base-multilingual-cased-v2.tar.gz <span class="se">\</span>
  s3://cloudbeer-llm-models/sentence-transformers/distiluse-base-multilingual-cased-v2.tar.gz
</code></pre></div></div>

<ul>
  <li>创建你自己的存储桶，并保证你有足够的权限。</li>
  <li>模型都很大，上传前记得测试一下你的脚本。</li>
</ul>

<h2 id="部署模型">部署模型</h2>

<p>与上一篇差不多，先给 <code class="language-plaintext highlighter-rouge">HuggingfaceExecuteRole</code> 这个 IAM Role 加入策略 <code class="language-plaintext highlighter-rouge">AmazonS3ReadOnlyAccess</code>。</p>

<p>完整的部署代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">boto3</span>  
<span class="kn">from</span> <span class="nn">sagemaker.huggingface.model</span> <span class="kn">import</span> <span class="n">HuggingFaceModel</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">scipy.spatial.distance</span> <span class="kn">import</span> <span class="n">cosine</span>

<span class="c1"># 此处定义了一个数组相似度计算的函数
</span><span class="k">def</span> <span class="nf">similarity</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">-</span><span class="n">cosine</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>

<span class="n">s3_model</span> <span class="o">=</span> <span class="s">"s3://cloudbeer-llm-models/sentence-transformers/distiluse-base-multilingual-cased-v2.tar.gz"</span>

<span class="n">iam_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'iam'</span><span class="p">)</span>
<span class="n">role</span> <span class="o">=</span> <span class="n">iam_client</span><span class="p">.</span><span class="n">get_role</span><span class="p">(</span><span class="n">RoleName</span><span class="o">=</span><span class="s">'HuggingfaceExecuteRole'</span><span class="p">)[</span><span class="s">'Role'</span><span class="p">][</span><span class="s">'Arn'</span><span class="p">]</span>

<span class="n">huggingface_model</span> <span class="o">=</span> <span class="n">HuggingFaceModel</span><span class="p">(</span>
  <span class="n">model_data</span><span class="o">=</span><span class="n">s3_model</span><span class="p">,</span>      
  <span class="n">role</span><span class="o">=</span><span class="n">role</span><span class="p">,</span>                    
  <span class="n">transformers_version</span><span class="o">=</span><span class="s">"4.26"</span><span class="p">,</span>  
  <span class="n">pytorch_version</span><span class="o">=</span><span class="s">"1.13"</span><span class="p">,</span>
  <span class="n">py_version</span><span class="o">=</span><span class="s">'py39'</span><span class="p">,</span>           
<span class="p">)</span>

<span class="n">predictor</span> <span class="o">=</span> <span class="n">huggingface_model</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span>
  <span class="n">initial_instance_count</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
  <span class="n">instance_type</span><span class="o">=</span><span class="s">'ml.m5.xlarge'</span>
<span class="p">)</span>
</code></pre></div></div>

<p>现在运行一下推理试试：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span> <span class="o">=</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"在 SageMaker 上部署 Huggingface 模型"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">),</span> <span class="n">res</span><span class="p">[:</span><span class="mi">10</span><span class="p">])</span>
</code></pre></div></div>

<p>结果如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>512 [-0.08045165985822678, 0.028644787147641182, 0.01914004050195217, -0.02148452214896679, 0.017731796950101852, -0.05328822508454323, 0.004828637931495905, 0.015703866258263588, -0.017463965341448784, -0.01227850466966629]
</code></pre></div></div>

<p>测试相似度：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res1</span> <span class="o">=</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"抱歉"</span><span class="p">)</span>
<span class="n">res2</span> <span class="o">=</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"Sorry"</span><span class="p">)</span>
<span class="n">sim1</span> <span class="o">=</span> <span class="n">similarity</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span> <span class="n">res2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">sim1</span><span class="p">)</span>
</code></pre></div></div>

<p>结果为：<code class="language-plaintext highlighter-rouge">0.9197762458059101</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sim2</span> <span class="o">=</span> <span class="n">similarity</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"对不起"</span><span class="p">))</span>
<span class="n">sim3</span> <span class="o">=</span> <span class="n">similarity</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"Je mi líto"</span><span class="p">))</span>
<span class="n">sim4</span> <span class="o">=</span> <span class="n">similarity</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"ごめんなさい"</span><span class="p">))</span>
<span class="n">sim5</span> <span class="o">=</span> <span class="n">similarity</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span> <span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="s">"吃了吗"</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">sim2</span><span class="p">,</span> <span class="n">sim3</span><span class="p">,</span> <span class="n">sim4</span><span class="p">,</span> <span class="n">sim5</span><span class="p">)</span>
</code></pre></div></div>

<p>结果为：<code class="language-plaintext highlighter-rouge">0.9926941692158543 0.9510660558985051 0.9787457828105314 0.27865827356290396</code></p>

<p>比较符合预期！</p>

<h2 id="总结">总结</h2>

<p>上面的过程是在本地的 VSCode Notebook 中完成。</p>

<p>模型部署模型时间为 3 分 15 秒，我部署了 2 个实例，在实际的推理中，可以感觉到推理效率显著提高。</p>

<hr />
<p>相关</p>

<p><a href="deploy-huggingface-model-2-sagemaker-1.html">在 SageMaker 上部署 Huggingface 模型 (一)</a></p>

<p>参考</p>

<p><a href="https://github.com/aws/sagemaker-huggingface-inference-toolkit">https://github.com/aws/sagemaker-huggingface-inference-toolkit</a></p>

<p><a href="https://huggingface.co/docs/sagemaker/reference#inference-dlc-overview">Huggingface 默认支持的库版本对照</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="aws" /><summary type="html"><![CDATA[在 Huggingface 上，有些模型并没有 Deploy - Sagemaker 这个功能，或者我们需要做一些特殊的任务，怎么办？本文介绍了如何让 SageMaker 调用自定义的推理代码。]]></summary></entry><entry><title type="html">在 SageMaker 上部署 Huggingface 模型 (一)</title><link href="https://youbug.cn/2023/05/deploy-huggingface-model-2-sagemaker-1.html" rel="alternate" type="text/html" title="在 SageMaker 上部署 Huggingface 模型 (一)" /><published>2023-05-10T02:13:33+00:00</published><updated>2023-05-10T02:13:33+00:00</updated><id>https://youbug.cn/2023/05/deploy-huggingface-model-2-sagemaker-1</id><content type="html" xml:base="https://youbug.cn/2023/05/deploy-huggingface-model-2-sagemaker-1.html"><![CDATA[<p>在 Huggingface 上浏览模型的时候，会看到一个 Deploy 按钮，很多模型点开会看到 Amazon SageMaker 选项，然后会看到一段代码。今天便试了一下这个，下面是测试过程：在本机运行运行代码，把 Huggingface 的 模型部署到 SageMaker 上并运行推理。</p>

<h2 id="创建-iam-角色">创建 IAM 角色</h2>

<p>往 SageMaker 部署模型需要一个角色，先创建一个角色，如果你之前运行过 SageMaker，大抵应该有了这个角色。</p>

<ul>
  <li>Trusted entity type: AWS service</li>
  <li>Use cases for other AWS services: SageMaker</li>
  <li>勾选上 SageMaker - Execution</li>
</ul>

<p>你会看到他已经选择了 AmazonSageMakerFullAccess 策略，点击下一步。</p>

<p>把这个角色命名为 HuggingfaceExecuteRole  或者其他。</p>

<h2 id="代码分段解读">代码分段解读</h2>

<blockquote>
  <p>你可以在 VSCode 里创建一个 xxx.ipynb 的文件，分段执行下面的代码。VSCode 提供了 python 和 notebook 相关插件。</p>

  <p>另外，你需要在本机配置正确的 AKSK 和 AWS Region。</p>

  <p>boto3 和 sagemaker 这俩依赖库要在本机安装一下。</p>
</blockquote>

<h3 id="定义模型">定义模型</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">boto3</span>  
<span class="kn">from</span> <span class="nn">sagemaker.huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceModel</span>

<span class="n">hub</span> <span class="o">=</span>  <span class="p">{</span>
 <span class="s">'HF_MODEL_ID'</span><span class="p">:</span><span class="s">'bert-base-chinese'</span><span class="p">,</span>
 <span class="s">'HF_TASK'</span><span class="p">:</span><span class="s">'fill-mask'</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>这里定义了模型的名字和需要做的任务名称，SageMaker 会动态拉取 Huggingface 的模型。</li>
</ul>

<h3 id="部署模型">部署模型</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iam_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'iam'</span><span class="p">)</span>
<span class="n">role</span> <span class="o">=</span> <span class="n">iam_client</span><span class="p">.</span><span class="n">get_role</span><span class="p">(</span><span class="n">RoleName</span><span class="o">=</span><span class="s">'HuggingfaceExecuteRole'</span><span class="p">)</span>

<span class="n">huggingface_model</span> <span class="o">=</span> <span class="n">HuggingFaceModel</span><span class="p">(</span>
 <span class="n">transformers_version</span><span class="o">=</span><span class="s">'4.17.0'</span><span class="p">,</span>
 <span class="n">pytorch_version</span><span class="o">=</span><span class="s">'1.10.2'</span><span class="p">,</span>
 <span class="n">py_version</span><span class="o">=</span><span class="s">'py38'</span><span class="p">,</span>
 <span class="n">env</span><span class="o">=</span><span class="n">hub</span><span class="p">,</span>
 <span class="n">role</span><span class="o">=</span><span class="n">role</span><span class="p">[</span><span class="s">'Role'</span><span class="p">][</span><span class="s">'Arn'</span><span class="p">],</span> 
<span class="p">)</span>


<span class="n">predictor</span> <span class="o">=</span> <span class="n">huggingface_model</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span>
 <span class="n">initial_instance_count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> 
 <span class="n">instance_type</span><span class="o">=</span><span class="s">'ml.m5.xlarge'</span> 
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>这一步我们定义了模型运行的环境，角色和运行的机型，数量。</li>
  <li>role 这里需要注意一下，他的入参是 Role 的 Arn。</li>
  <li>这一步完成之后，可以到 SageMaker 后台看到计算资源/Endpoint 已经成功部署，位置在 Inference - Endpoints。</li>
</ul>

<h3 id="运行推理">运行推理</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">({</span>
 <span class="s">'inputs'</span><span class="p">:</span> <span class="s">"哈哈，我正在吃[MASK]。"</span>
<span class="p">})</span>
</code></pre></div></div>

<p>结果为：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[{</span><span class="s1">'score'</span>: 0.26574137806892395,
  <span class="s1">'token'</span>: 1450,
  <span class="s1">'token_str'</span>: <span class="s1">'呢'</span>,
  <span class="s1">'sequence'</span>: <span class="s1">'哈 哈 ， 我 正 在 吃 呢 。'</span><span class="o">}</span>,
 <span class="o">{</span><span class="s1">'score'</span>: 0.23924605548381805,
  <span class="s1">'token'</span>: 7649,
  <span class="s1">'token_str'</span>: <span class="s1">'饭'</span>,
  <span class="s1">'sequence'</span>: <span class="s1">'哈 哈 ， 我 正 在 吃 饭 。'</span><span class="o">}</span>,
 <span class="o">{</span><span class="s1">'score'</span>: 0.07031755149364471,
  <span class="s1">'token'</span>: 1557,
  <span class="s1">'token_str'</span>: <span class="s1">'啊'</span>,
  <span class="s1">'sequence'</span>: <span class="s1">'哈 哈 ， 我 正 在 吃 啊 。'</span><span class="o">}</span>,
 <span class="o">{</span><span class="s1">'score'</span>: 0.02992616966366768,
  <span class="s1">'token'</span>: 1521,
  <span class="s1">'token_str'</span>: <span class="s1">'哦'</span>,
  <span class="s1">'sequence'</span>: <span class="s1">'哈 哈 ， 我 正 在 吃 哦 。'</span><span class="o">}</span>,
 <span class="o">{</span><span class="s1">'score'</span>: 0.029010694473981857,
  <span class="s1">'token'</span>: 7613,
  <span class="s1">'token_str'</span>: <span class="s1">'飯'</span>,
  <span class="s1">'sequence'</span>: <span class="s1">'哈 哈 ， 我 正 在 吃 飯 。'</span><span class="o">}]</span>
</code></pre></div></div>

<h3 id="清理资源">清理资源</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictor</span><span class="p">.</span><span class="n">delete_endpoint</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>整个过程还是非常的方便，Endpoint 的创建的速度非常快（本示例用了 2 分半钟），省去了安装运行环境的痛苦，爽的一匹啊！</p>

<hr />
<p>相关</p>

<p><a href="deploy-huggingface-model-2-sagemaker-2.html">在 SageMaker 上部署 Huggingface 模型 (二)</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="aws" /><summary type="html"><![CDATA[在 Huggingface 上浏览模型的时候，会看到一个 Deploy 按钮，很多模型点开会看到 Amazon SageMaker 选项，然后会看到一段代码。今天便试了一下这个，下面是测试过程：在本机运行运行代码，把 Huggingface 的 模型部署到 SageMaker 上并运行推理。]]></summary></entry><entry><title type="html">在 TLS 1.1 过期后上传 S3 的策略</title><link href="https://youbug.cn/2023/05/post-s3-tls-outdate.html" rel="alternate" type="text/html" title="在 TLS 1.1 过期后上传 S3 的策略" /><published>2023-05-07T01:10:49+00:00</published><updated>2023-05-07T01:10:49+00:00</updated><id>https://youbug.cn/2023/05/post-s3-tls-outdate</id><content type="html" xml:base="https://youbug.cn/2023/05/post-s3-tls-outdate.html"><![CDATA[<p>TLS 1.1 近期全面过期，但有些老的设备还在使用，如何最小代价升级客户端应用？这里实验了 2 种方法：改用 http 或者使用 Cloudfront。</p>

<h2 id="使用-http">使用 http</h2>

<p>如果您在客户端使用了 S3 的域名，直接把 https 变成 http 即可。</p>

<p>上传文件的时候，得到了 S3 签名 url 之后，直接改为使用 http 亦可以完成上传操作。</p>

<h2 id="使用-cloudfront-上传-s3">使用 Cloudfront 上传 S3</h2>

<blockquote>
  <p>目前 Cloudfront 还会长期支持 TLS 1.1。</p>
</blockquote>

<p>Cloudfront 一般用于 S3 文件的读取与分发，对于文件分发加速沿用原来的方式即可。</p>

<p>如果您必须使用 https 上传文件，可以 via Cloudfront，可按照如下方式操作：</p>

<p>1 创建一个 新的 Origin，指向 目标 S3 存储桶。</p>

<p>2 创建新的 behavior，指向刚刚创建的 Origin。</p>

<p>2.1 behavior 里要 Restrict viewer access 打开，这样就可以使用 Cloudfront 签名进行文件上传了。</p>

<h2 id="cloudfront-签名上传的实验过程">Cloudfront 签名上传的实验过程</h2>

<p>打开 Restrict viewer access 需要创建一个 key。</p>

<h3 id="创建-key">创建 key</h3>

<p>在本地或者上传文件的客户机创建这个 key：</p>

<div class="language-ssh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">cd</span> ~/.ssh
<span class="k">openssl</span> genrsa -out cf.pem <span class="m">2048</span>
<span class="k">openssl</span> rsa -pubout -in cf.pem -out cf.pub.pem
</code></pre></div></div>

<p>这样可以得到两个文件：</p>

<ul>
  <li>cf.pem 私钥</li>
  <li>cf.pub.pem 公钥</li>
</ul>

<p>在 Cloudfront 的 <a href="https://console.aws.amazon.com/cloudfront/v3/home?#/publickey">Key managenent 的 Public keys</a> 里上传 cf.pub.pem 的内容。上传完成会得到一个 Key ID，这个 ID 后面会用于签名。</p>

<p>并在 Key groups 里创建一个组，把这个 Public key 加入。</p>

<h3 id="创建-origin">创建 Origin</h3>

<p>现在已有的分发下面继续创建一个 Origin。</p>

<ul>
  <li>选择目标 S3 domain</li>
  <li>Origin access: Origin access control settings (recommended)</li>
</ul>

<p>如果之前没有配置过 S3 的策略，需要按照页面指示，把 policy 配置过去。</p>

<h3 id="创建-behavior">创建 Behavior</h3>

<ul>
  <li>Path pattern: /upload</li>
  <li>Origin: 选上一步创建的 Origin</li>
  <li>Allowed HTTP methods: GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE</li>
  <li>Restrict viewer access: Yes</li>
  <li>Key groups 将之前创建的 Key group 加入</li>
  <li>Response headers policy: 选择 SimpleCORS （此处为了方便浏览器测试）</li>
</ul>

<h3 id="测试">测试</h3>

<p>直接上传：</p>

<pre><code class="language-request">PUT https://xxxxxxxxxx.cloudfront.net/upload/6.png
Content-Type: multipart/form-data;

&lt; ./1.png
</code></pre>

<p>报 403 错误</p>

<p>使用签名 URL 上传</p>

<p>使用 aws cli 进行签名：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws cloudfront sign <span class="nt">--url</span> https://xxxxxxxxx.cloudfront.net/upload/6.png <span class="se">\</span>
  <span class="nt">--key-pair-id</span> KXXXXXEDPH5 <span class="se">\</span>
  <span class="nt">--private-key</span> file://~/.ssh/cf.pem <span class="se">\</span>
  <span class="nt">--date-less-than</span> 2024-11-11
</code></pre></div></div>

<ul>
  <li>key-pair-id 是 Cloudfront 后台给你的 Key Pair ID</li>
  <li>private-key 是本地文件路径，必须以 file:// 开始</li>
</ul>

<p>现在上传测试：</p>

<pre><code class="language-request">PUT https://d20x1q1mghmz4k.cloudfront.net/upload/6.png?Expires=1731283200&amp;Signature=xxxx__&amp;Key-Pair-Id=KXXXXXEDPH5
Content-Type: multipart/form-data;

&lt; ./1.png
</code></pre>

<p>成功上传。</p>

<blockquote>
  <p>我的 http request 测试使用的是 VSCODE 的插件 REST Client</p>
</blockquote>

<p>这里使用了路径 /upload 作为测试路径，当前会把文件上传到 S3 存储桶的 /upload 路径下，并且这个路径下的所以文件无论读取和写入都要签名。</p>

<p>如果要分离读和写，可以新建一个 Cloudfront 分发专门用来上传文件，或者使用 rewrite 来重新映射一下 /upload 路径。</p>

<hr />
<p>参考：</p>

<p><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html#private-content-creating-cloudfront-key-pairs">为 Cloudfront 设置密钥对</a></p>

<p><a href="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/sign.html">aws cloudfront sign</a></p>]]></content><author><name>啤酒云</name></author><category term="aws" /><summary type="html"><![CDATA[TLS 1.1 近期全面过期，但有些老的设备还在使用，如何最小代价升级客户端应用？这里实验了 2 种方法：改用 http 或者使用 Cloudfront。]]></summary></entry><entry><title type="html">EKS Ingress 跨账号创建 ALB</title><link href="https://youbug.cn/2023/05/create-ingress-alb-across-account.html" rel="alternate" type="text/html" title="EKS Ingress 跨账号创建 ALB" /><published>2023-05-06T01:10:49+00:00</published><updated>2023-05-06T01:10:49+00:00</updated><id>https://youbug.cn/2023/05/create-ingress-alb-across-account</id><content type="html" xml:base="https://youbug.cn/2023/05/create-ingress-alb-across-account.html"><![CDATA[<p>在企业级生产环境下，通常会把网络服务，安全服务等产品放在统一一个公网账号下进行管理，各个业务模块也可能使用独立的账号，并且与<strong>外网隔离</strong>。 EKS 会被部署在隔离环境，那么如何创建对公网的 Ingress 呢？理想的做法是创建 Ingress 的时候直接把 ALB 创建到公网账号下，本文尝试实现这一过程。</p>

<p>先预设一下：</p>

<ul>
  <li>对公的账号为 AAAA， VPC 为 10.1.0.0/16</li>
  <li>EKS 账号为 BBBB，VPC 为 10.0.0.0/16</li>
</ul>

<p>需要做的工作有：设置组织，设置网络(TGW)，共享，设置 IAM 权限，编写 EKS CRD。</p>

<blockquote>
  <p>本文是使用 China Region 实现的。</p>
</blockquote>

<h2 id="创建组织并启用相应权限">创建组织并启用相应权限</h2>

<p>组织是共享子网的前提，通常多账号环境下会使用 组织来管理。</p>

<p>在 AAAA 账号中(在其他账号下亦可)：</p>

<p>进入 AWS 后台的 <a href="https://console.amazonaws.cn/organizations/v2/home/">组织控制台</a>：</p>

<ul>
  <li>创建组织，并将账号纳入，在 AAAA 账号内邀请，在 BBBB 里接受邀请。</li>
  <li>开启组织的 RAM 可信访问，进入 Amazon Organizations &gt; 服务 &gt; RAM， 开启可信访问</li>
</ul>

<p>进入 <a href="https://console.amazonaws.cn/ram/home#Settings:">RAM 控制台</a> 开启组织内共享：</p>

<ul>
  <li>进入 Resource Access Manager &gt; 设置，开启 ”在以下服务中启用共享： Amazon Organizations “</li>
</ul>

<h2 id="tgw-打通网络">TGW 打通网络</h2>

<p>在 AAAA 账号里：</p>

<p>创建一个 Transit Gateway:</p>

<ul>
  <li>进入 VPC 控制台，左侧选择菜单 中转网关，点击 ”创建 Transit Gateway“</li>
  <li>进入中转网关挂载，”创建 Transit Gateway 挂载“，选择 AAAA 账号下的目标 VPC</li>
</ul>

<p>共享 tgw</p>

<ul>
  <li>进入 RAM 控制台 <a href="https://console.amazonaws.cn/ram/home#CreateResourceShare:">创建资源共享</a>
    <ul>
      <li>共享的资源选择 中转网关</li>
      <li>委托人选择 组织，填写组织 ID (组织 ID 在 <a href="https://console.amazonaws.cn/organizations/v2/home/root">组织的界面的 root</a> 下的 ARN 的第二段 /o-xxxx/ 内找到，形如 o-xxxxx)。</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>注意，在 AAAA 账号中的 VPC 中，必须至少创建 2 个 Public Subnet</p>
</blockquote>

<p>在 BBBB 账号里现在可以看到 tgw 实例了：</p>

<ul>
  <li>进入 VPC，中转网关挂载，挂上 VPC。</li>
</ul>

<p>分别在 AAAA 和 BBBB 账号里的子网路由里加入 tgw 对端路由（可以从目标子网的路由连接点击进入）：</p>

<ul>
  <li>在 AAAA 的 路由表里加入 16.0.0.0/16 - tgw-xxxxxx</li>
  <li>在 BBBB 的 路由表里加入 16.1.0.0/16 - tgw-xxxxxx</li>
</ul>

<p>至此，网络打通。</p>

<h2 id="共享子网">共享子网</h2>

<p>为了在 EKS Ingress 里能发现 AAAA 账号的子网 ID，还需要共享子网。</p>

<p>在 AAAA 账号里共享对公子网：</p>

<p>在 RAM 中创建新的共享资源，资源里选择 子网，会发现，刚刚绑定了 tgw 的子网出现在共享名单里，选择对组织共享。</p>

<h2 id="安全组">安全组</h2>

<p>在 AAAA 账号中创建安全组，后续创建 Ingress 的时候需要显式指定此安全组。</p>

<h2 id="iam">IAM</h2>

<p>现在需要处理 IAM 权限了。</p>

<p>BBBB 中的 EKS 需要在 AAAA 账号里创建 ALB 等资源，所以需要把 AAAA 的 Role 赋予给  BBBB 的 EKS 的 loadbalancer-controller，下面是创建 IRSA 的过程：</p>

<h3 id="在-aaaa-中加入身份提供商">在 AAAA 中加入身份提供商</h3>

<p>进入 IAM 菜单的 身份提供商，</p>

<ul>
  <li>点击添加提供商，填写 oidc 的 Url。（这个 Url 可以通过 BBBB 账号的 eks 信息得到）</li>
  <li>受众填写 sts.amazonaws.com</li>
  <li>获取指纹，确定…</li>
</ul>

<h3 id="在-aaaa-中创建-policy">在 AAAA 中创建 Policy</h3>

<p>policy 的 json 文件如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-O</span> https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy_cn.json
</code></pre></div></div>

<p>使用命令创建，或者在控制台把上面的文件内容贴进去：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws iam create-policy <span class="se">\</span>
    <span class="nt">--policy-name</span> AWSLoadBalancerControllerIAMPolicy <span class="se">\</span>
    <span class="nt">--policy-document</span> file://iam_policy_cn.json
</code></pre></div></div>

<h3 id="在-aaaa-中创建-role">在 AAAA 中创建 Role</h3>

<p>现在创建一个 Role，选择 自定义信任策略。</p>

<p>信任策略的 JSON 内容如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"Federated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws-cn:iam::AAAA:oidc-provider/oidc.eks.region.amazonaws.com.cn/id/xxxxxx"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sts:AssumeRoleWithWebIdentity"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Condition"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"StringEquals"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"oidc.eks.region.amazonaws.com.cn/id/xxxxxx:aud"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sts.amazonaws.com"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"oidc.eks.region.amazonaws.com.cn/id/xxxxxx:sub"</span><span class="p">:</span><span class="w"> </span><span class="s2">"system:serviceaccount:kube-system:aws-load-balancer-controller"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>名为 <strong>AmazonEKSLoadBalancerControllerRole</strong>，</p>

<p>在选型策略里添加权限，选择上一步创建的  AWSLoadBalancerControllerIAMPolicy 即可。</p>

<p>现在，我们完成了 IAM 的 Role 创建。</p>

<h2 id="创建-eks-资源">创建 EKS 资源</h2>

<p>下面的操作在 BBBB 账号的 EKS 集群内完成。</p>

<h3 id="serviceaccount">ServiceAccount</h3>

<p>如果你已经安装了 EKS 的 aws-loadbalancer-controller，那么现在可以修改一下:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit sa aws-load-balancer-controller <span class="nt">-n</span> kube-system
</code></pre></div></div>

<p>将 <code class="language-plaintext highlighter-rouge">eks.amazonaws.com/role-arn: arn:aws-cn:iam::BBBB:role/AmazonEKSLoadBalancerControllerRole</code> 修改为 <code class="language-plaintext highlighter-rouge">eks.amazonaws.com/role-arn: arn:aws-cn:iam::AAAA:role/AmazonEKSLoadBalancerControllerRole</code></p>

<h3 id="重新安装-aws-loadbalancer-controller">重新安装 aws-loadbalancer-controller</h3>

<p>安装脚本如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">eksName</span><span class="o">=</span>abc
<span class="nv">region</span><span class="o">=</span>cn-north-1
<span class="nv">pubcVpc</span><span class="o">=</span>vpc-in-aaaa

helm <span class="nb">install </span>aws-load-balancer-controller eks/aws-load-balancer-controller <span class="se">\</span>
  <span class="nt">-n</span> kube-system <span class="se">\</span>
  <span class="nt">--set</span> <span class="nv">region</span><span class="o">=</span><span class="k">${</span><span class="nv">region</span><span class="k">}</span> <span class="se">\</span>
  <span class="nt">--set</span> <span class="nv">clusterName</span><span class="o">=</span><span class="k">${</span><span class="nv">eksName</span><span class="k">}</span> <span class="se">\</span>
  <span class="nt">--set</span> serviceAccount.create<span class="o">=</span><span class="nb">false</span> <span class="se">\</span>
  <span class="nt">--set</span> serviceAccount.name<span class="o">=</span>aws-load-balancer-controller <span class="se">\</span>
  <span class="nt">--set</span> <span class="nv">vpcId</span><span class="o">=</span><span class="k">${</span><span class="nv">pubcVpc</span><span class="k">}</span> <span class="se">\</span>
  <span class="nt">--set</span> <span class="nv">enableShield</span><span class="o">=</span><span class="nb">false</span> <span class="se">\</span>
  <span class="nt">--set</span> <span class="nv">enableWaf</span><span class="o">=</span><span class="nb">false</span> <span class="se">\</span>
  <span class="nt">--set</span> <span class="nv">enableWafv2</span><span class="o">=</span><span class="nb">false</span>

</code></pre></div></div>

<p>上面的 vpcId 需要填写 AAAA 账号的 vpcId，此 vpc 已经共享到 BBBB 账号，你可以在控制台看到。</p>

<p>如果之前使用 helm 安装过，先卸载一下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>helm uninstall aws-load-balancer-controller
</code></pre></div></div>

<p>如果之前没有安装过 aws-load-balancer-controller，你可以先创建一个 ServiceAccount，其中的 role-arn 填写 AAAA 账号的 Role，如下 YAML。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">eks.amazonaws.com/role-arn</span><span class="pi">:</span> <span class="s">arn:aws-cn:iam::AAAA:role/AmazonEKSLoadBalancerControllerRole</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">aws-load-balancer-controller</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
</code></pre></div></div>

<p>至此，所有基础层的工作已经全部完成。🎆 🎉🎉🎉🎉🎉</p>

<h3 id="测试-ingress">测试 Ingress</h3>

<p>先创建 Deployment 和 Service 资源(测试用)</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">httpbin</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">httpbin</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">httpbin</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">httpbin</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">public.ecr.aws/r2h3l6e4/pingcloud-clustertools/kennethreitz/httpbin:latest</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s">250m</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s">250Mi</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">httpbin</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http-httpbin</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">httpbin</span>
</code></pre></div></div>

<p>创建 Ingress</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">x-ingress</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">alb.ingress.kubernetes.io/target-type</span><span class="pi">:</span> <span class="s">ip</span>
    <span class="na">alb.ingress.kubernetes.io/scheme</span><span class="pi">:</span> <span class="s">internet-facing</span>
    <span class="na">alb.ingress.kubernetes.io/subnets</span><span class="pi">:</span> <span class="s2">"</span><span class="s">subnet-aaaa-pub1,</span><span class="nv"> </span><span class="s">subnet-aaaa-pub2"</span>
    <span class="na">alb.ingress.kubernetes.io/security-groups</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sg-aaaa-xxxx"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ingressClassName</span><span class="pi">:</span> <span class="s">alb</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
            <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">service</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">httpbin</span>
                <span class="na">port</span><span class="pi">:</span>
                  <span class="na">number</span><span class="pi">:</span> <span class="m">3000</span>
</code></pre></div></div>

<p>需要加入如下注解才能把 Ingress 的 ALB 创建到 AAAA 账号：</p>

<ul>
  <li>alb.ingress.kubernetes.io/target-type 为 ip</li>
  <li>alb.ingress.kubernetes.io/scheme: internet-facing 表示ALB</li>
  <li>alb.ingress.kubernetes.io/subnets 选择 AAAA 账号的对公子网</li>
  <li>alb.ingress.kubernetes.io/security-groups 为 AAAA 账号的安全组</li>
</ul>

<h3 id="targetgroupbinding">TargetGroupBinding</h3>

<p>如果你想让 EKS 想使用已存在的 ALB，那么只需要将 Service 绑定给目标群组即可。</p>

<p>可以先在 AAAA 账号下创建一个 目标群组/Target groups，并创建如下的 TargetGroupBinding CRD 资源，如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">elbv2.k8s.aws/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">TargetGroupBinding</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">static-alb</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">serviceRef</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">httpbin</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">3000</span>
  <span class="na">targetGroupARN</span><span class="pi">:</span> <span class="s">&lt;AAAA-target-goupd-arn&gt;</span>
</code></pre></div></div>

<p>创建好之后，就会看到该目标群组下 BBBB 账号的 pod 的 ip 了。</p>

<hr />
<p>参考：</p>

<p>中转网关使用文档：<a href="https://docs.amazonaws.cn/vpc/latest/tgw/tgw-transit-gateways.html">https://docs.amazonaws.cn/vpc/latest/tgw/tgw-transit-gateways.html</a></p>

<p><a href="https://aws.amazon.com/cn/blogs/containers/expose-amazon-eks-pods-through-cross-account-load-balancer/">Expose Amazon EKS pods through cross-account load balancer</a></p>]]></content><author><name>啤酒云</name></author><category term="aws," /><category term="container" /><summary type="html"><![CDATA[在企业级生产环境下，通常会把网络服务，安全服务等产品放在统一一个公网账号下进行管理，各个业务模块也可能使用独立的账号，并且与外网隔离。 EKS 会被部署在隔离环境，那么如何创建对公网的 Ingress 呢？理想的做法是创建 Ingress 的时候直接把 ALB 创建到公网账号下，本文尝试实现这一过程。]]></summary></entry><entry><title type="html">使用 LLM embeddings 进行数据存储和检索的新姿势</title><link href="https://youbug.cn/2023/04/llm-embeddings-search.html" rel="alternate" type="text/html" title="使用 LLM embeddings 进行数据存储和检索的新姿势" /><published>2023-04-24T04:13:33+00:00</published><updated>2023-04-24T04:13:33+00:00</updated><id>https://youbug.cn/2023/04/llm-embeddings-search</id><content type="html" xml:base="https://youbug.cn/2023/04/llm-embeddings-search.html"><![CDATA[<p>大语言模型可以将文字转化为 embeddings, embeddings 是一个向量(浮点数) 数组。把向量数组存到数据库，然后我们通过搜索最接近的向量就可以得到搜索结果了。本文试验了这一方式。</p>

<h2 id="概述">概述</h2>

<p>本文的过程大概如下：</p>

<p><img src="/assets/posts/aiml/llm-vector.png" alt="LLM Vecotor Search" /></p>

<p>本文将代码片段分解在了各小节，你如果要运行此文章的代码，可能需要一点 nodejs 的知识。你也可以直接转跳到最后一小节看效果。</p>

<p>调用本文章的代码需要设置如下这些环境变量：</p>

<ul>
  <li>OPENAI_API_KEY</li>
  <li>AWS_ACCESS_KEY_ID</li>
  <li>AWS_SECRET_ACCESS_KEY</li>
</ul>

<h2 id="向量计算">向量计算</h2>

<p>首先你要有一个大语言模型，需要将文本计算出向量，你可以部署一个私有的，也可以调用 API。</p>

<p>下面的函数 使用了 OpenAI 的 API 来获取向量值。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">OpenAIEmbeddings</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">langchain/embeddings/openai</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">embeddings</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenAIEmbeddings</span><span class="p">({</span> <span class="na">temperature</span><span class="p">:</span> <span class="mf">0.9</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">toVec</span> <span class="o">=</span>  <span class="k">async</span> <span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">embeddings</span><span class="p">.</span><span class="nx">embedQuery</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="向量数据库">向量数据库</h2>

<p>我们需要一个数据库能支持向量的存储和查询，可以使用专门的向量数据库，也可以使用 OpenSearch（Elastic Search），他的 knn 插件即可用来干这个。</p>

<p>我们先去 AWS 开通一个 OpenSearch，验证方式先使用 IAM User，稍后我们通过该 User 的 AKSK 来访问 OpenSearch。</p>

<p>请注意：需要使用 OpenSearch 而不是 OpenSearch Serverless。（OpenSearch Serverless 还不支持 knn 插件，2023-4-24）</p>

<h2 id="建索引">建索引</h2>

<p>首先创建索引，如下面的代码：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">defaultProvider</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@aws-sdk/credential-provider-node</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// V3 SDK.</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@opensearch-project/opensearch</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">AwsSigv4Signer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@opensearch-project/opensearch/aws</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
  <span class="p">...</span><span class="nx">AwsSigv4Signer</span><span class="p">({</span>
    <span class="na">region</span><span class="p">:</span> <span class="dl">'</span><span class="s1">us-east-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">service</span><span class="p">:</span> <span class="dl">'</span><span class="s1">es</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">getCredentials</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">credentialsProvider</span> <span class="o">=</span> <span class="nx">defaultProvider</span><span class="p">();</span>
      <span class="k">return</span> <span class="nx">credentialsProvider</span><span class="p">();</span>
    <span class="p">},</span>
  <span class="p">}),</span>
  <span class="na">node</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://xxxxxx.us-east-1.es.amazonaws.com</span><span class="dl">"</span>
<span class="p">});</span>


<span class="kd">var</span> <span class="nx">index_name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">doc_embeddings</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">createIndex</span><span class="p">:</span> <span class="k">async</span> <span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">indices</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="na">index</span><span class="p">:</span> <span class="nx">index_name</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">settings</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">index.knn</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">mappings</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">properties</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="dl">"</span><span class="s2">content_vec</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">knn_vector</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">dimension</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1536</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">method</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
              <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hnsw</span><span class="dl">"</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">space_type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">l2</span><span class="dl">"</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">engine</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">nmslib</span><span class="dl">"</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">parameters</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">ef_construction</span><span class="dl">"</span><span class="p">:</span> <span class="mi">128</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">m</span><span class="dl">"</span><span class="p">:</span> <span class="mi">24</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">},</span>
  <span class="p">});</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Creating index:</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
<span class="p">},</span>

</code></pre></div></div>

<h2 id="插入数据">插入数据</h2>

<p>参考下面的方法：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateData</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">index</span><span class="p">({</span>
      <span class="nx">id</span><span class="p">,</span>
      <span class="na">index</span><span class="p">:</span> <span class="nx">index_name</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
      <span class="na">refresh</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Adding document:</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
  <span class="p">},</span>
</code></pre></div></div>

<p>现在我想通过 url 直接让 OpenAI 对网址进行概括，并计算出向量值，存入数据库中。</p>

<p>这个是我要抓的 Url：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">datasets</span> <span class="o">=</span> <span class="p">[</span>
  <span class="dl">"</span><span class="s2">https://www.pinecone.io/learn/vector-database/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://www.infoq.com/news/2023/04/logic-apps-new-data-mapper/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://aws.amazon.com/cn/blogs/china/large-scale-dynamodb-table-data-cross-account-migration-guide/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://aws.amazon.com/blogs/startups/8-highlights-from-aws-startup-day-miami-you-want-to-experience/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://www.baeldung.com/java-serialization</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://www.baeldung.com/mockito-lazy-verification</span><span class="dl">"</span>
<span class="p">];</span>
</code></pre></div></div>

<p>调用 OpenAI，让他去帮我们总结文章内容。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span>  <span class="nx">briefUrl</span> <span class="o">=</span> <span class="k">async</span> <span class="nx">url</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">model</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">`Summarize this url in English: </span><span class="p">${</span><span class="nx">url</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">};</span>
</code></pre></div></div>

<p>连起来调用：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateDataByUrl</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="nx">brief</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">briefUrl</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">content_vec</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">toVec</span><span class="p">(</span><span class="nx">brief</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">updateData</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">id</span><span class="p">,</span>
        <span class="nx">content_vec</span><span class="p">,</span>
        <span class="nx">url</span><span class="p">,</span>
        <span class="nx">brief</span>
    <span class="p">})</span>
<span class="p">};</span>


<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">index</span> <span class="k">in</span> <span class="nx">datasets</span><span class="p">){</span>
    <span class="nx">updateDataByUrl</span><span class="p">(</span>
        <span class="nx">index</span><span class="p">,</span> 
        <span class="nx">datasets</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="查询">查询</h2>

<p>到此为止，我们已经灌进去了几篇文章，这几篇文章大概是：</p>

<pre><code class="language-plain">0: 介绍向量数据库的
1: 微软 VS 的一个 Data Mapper 新功能
2: AWS DynamoDB 的迁移
3: AWS Miami 创业日的亮点
4: Java 序列化的方法
5: Mockito 的懒验证方式
</code></pre>

<p>下面是查询函数，返回了 2 条相关结果，最接近的数据排在了最前面：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 通过向量查询</span>
<span class="kd">const</span>  <span class="nx">searchVec</span> <span class="o">=</span> <span class="k">async</span> <span class="nx">vq</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">size</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">query</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">knn</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">content_vec</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">vector</span><span class="dl">"</span><span class="p">:</span> <span class="nx">vq</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">k</span><span class="dl">"</span><span class="p">:</span> <span class="mi">2</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">search</span><span class="p">({</span>
      <span class="na">index</span><span class="p">:</span> <span class="nx">index_name</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">query</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">hits</span><span class="p">;</span>
  <span class="p">};</span>

<span class="c1">// 封装成关键字，这里又问了 OpenAI 一下。</span>
<span class="kd">const</span>  <span class="nx">search</span> <span class="o">=</span> <span class="k">async</span> <span class="nx">q</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="nx">qVec</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">toVec</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">searchVec</span><span class="p">(</span><span class="nx">qVec</span><span class="p">);</span>
  <span class="p">};</span>

</code></pre></div></div>

<p>调用：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">search</span><span class="p">(</span><span class="dl">"</span><span class="s2">微软</span><span class="dl">"</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">rec</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
            <span class="na">_id</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
            <span class="na">_score</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_score</span><span class="p">,</span>
            <span class="na">url</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span>
            <span class="na">brief</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">brief</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</code></pre></div></div>

<p>我存入的向量值都是通过英文计算出来的，现在我们就可以按照语义理解来查询了。</p>

<p>下面列举了查询的词语和和第一条结果。结果中的 brief 是使用 AI 帮忙总结的文章内容，并且 embeddings 值也是通过他计算出来的。</p>

<p>“微软”：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'1'</span>,
  _score: 0.6547316,
  url: <span class="s1">'https://www.infoq.com/news/2023/04/logic-apps-new-data-mapper/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s2">"This article discusses Microsoft's Azure Logic Apps Data Mapper, a new feature that enables developers to easily map data between different sources and applications. The article outlines the various benefits of this tool, such as enabling better data integration and making complex data migrations easier. It also explains how the tool can help organizations migrate to the cloud more quickly and easily."</span>
<span class="o">}</span>
</code></pre></div></div>

<p>“亚马逊”</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'3'</span>,
  _score: 0.6621346,
  url: <span class="s1">'https://aws.amazon.com/blogs/startups/8-highlights-from-aws-startup-day-miami-you-want-to-experience/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s1">'This article summarizes the highlights from AWS Startup Day in Miami. It includes topics such as inspiring stories from entrepreneurs, tips on how to succeed in the startup world, and additional resources for those in the tech industry.'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>“データベース” - 数据库的日语</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'0'</span>,
  _score: 0.6666581,
  url: <span class="s1">'https://www.pinecone.io/learn/vector-database/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s1">'This article provides an introduction to vector databases, which are databases that store and process data in vector, rather than the traditional tabular, form. It outlines the advantages of using vector databases, such as faster query performance and more powerful analysis capabilities, and describes the components of a vector database and how they function.'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>“如何迁移亚马逊云的数据”</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'2'</span>,
  _score: 0.69728285,
  url: <span class="s1">'https://aws.amazon.com/cn/blogs/china/large-scale-dynamodb-table-data-cross-account-migration-guide/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s1">'This website provides a guide for those wishing to migrate large amounts of data from one DynamoDB table to another, between different AWS accounts. It covers topics such as what data can be migrated, best practices, and step-by-step instructions.'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我还测试了几个，比如 “I have no time” 查到了 懒加载，”怎么做生意” 查询到了 aws 创业日。</p>

<p>从整个逻辑可以看到 <strong>LLM 语言模型的能力越强，你的数据库系统的语言理解能力越强</strong>，然后就是要看数据库向量检索的能力了，现在市面上已经有很多的向量数据库了。</p>

<p>在 AIGC 和大模型的当下，还有很多事情可以做！大家加油！</p>

<hr />

<p>参考：</p>

<p><a href="https://docs.langchain.com/">https://docs.langchain.com/</a></p>

<p><a href="https://opensearch.org/docs/latest/search-plugins/knn/knn-index/">https://opensearch.org/docs/latest/search-plugins/knn/knn-index/</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="aws," /><category term="container" /><summary type="html"><![CDATA[大语言模型可以将文字转化为 embeddings, embeddings 是一个向量(浮点数) 数组。把向量数组存到数据库，然后我们通过搜索最接近的向量就可以得到搜索结果了。本文试验了这一方式。]]></summary></entry><entry><title type="html">ChatGLM-6B 的 Lora 微调</title><link href="https://youbug.cn/2023/04/chatglm-6b-finetune-lora.html" rel="alternate" type="text/html" title="ChatGLM-6B 的 Lora 微调" /><published>2023-04-19T02:10:49+00:00</published><updated>2023-04-19T02:10:49+00:00</updated><id>https://youbug.cn/2023/04/chatglm-6b-finetune-lora</id><content type="html" xml:base="https://youbug.cn/2023/04/chatglm-6b-finetune-lora.html"><![CDATA[<p>本文是开源项目的使用记录，按照文档操作， finetune 的过程其实很简单。</p>

<h2 id="项目信息">项目信息</h2>

<p>相关脚本地址：<a href="https://github.com/mymusise/ChatGLM-Tuning">https://github.com/mymusise/ChatGLM-Tuning</a></p>

<p>这个项目提供了如下的脚本：</p>

<p>转化 alpaca 数据集为 jsonl，tokenization 脚本，训练等。</p>

<h2 id="数据准备">数据准备</h2>

<p>使用了 stanford_alpaca 的数据集格式，格式如下:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"instruction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"帮我总结一下论文？"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"input"</span><span class="p">:</span><span class="w"> </span><span class="s2">"这里是论文的内容"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"output"</span><span class="p">:</span><span class="w"> </span><span class="s2">"总结的内容"</span><span class="w"> 
   </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>如果只是问答类型的数据，input 可以留空。</p>

<h2 id="数据集转换">数据集转换</h2>

<p>上述数据集 文件名是: <code class="language-plaintext highlighter-rouge">answers.json</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python cover_alpaca2jsonl.py <span class="se">\</span>
    <span class="nt">--data_path</span> data/answers.json <span class="se">\</span>
    <span class="nt">--save_path</span> data/answers.jsonl

python tokenize_dataset_rows.py <span class="se">\</span>
    <span class="nt">--jsonl_path</span> data/answers.jsonl <span class="se">\</span>
    <span class="nt">--save_path</span> data/answer <span class="se">\</span>
    <span class="nt">--skip_overlength</span> True
</code></pre></div></div>

<h2 id="开始训练">开始训练</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python finetune.py <span class="se">\</span>
      <span class="nt">--dataset_path</span> data/answer     <span class="se">\</span>
      <span class="nt">--lora_rank</span> 8     <span class="se">\</span>
      <span class="nt">--per_device_train_batch_size</span> 6     <span class="se">\</span>
      <span class="nt">--gradient_accumulation_steps</span> 1     <span class="se">\</span>
      <span class="nt">--max_steps</span> 400     <span class="se">\</span>
      <span class="nt">--save_steps</span> 100     <span class="se">\</span>
      <span class="nt">--save_total_limit</span> 2     <span class="se">\</span>
      <span class="nt">--learning_rate</span> 1e-4     <span class="se">\</span>
      <span class="nt">--fp16</span>     <span class="se">\</span>
      <span class="nt">--remove_unused_columns</span> <span class="nb">false</span>     <span class="se">\</span>
      <span class="nt">--logging_steps</span> 50     <span class="se">\</span>
      <span class="nt">--output_dir</span> output

</code></pre></div></div>

<p>训练比较耗时，所以这一步是最 “难” 的：如果参数不佳，需要调整参数重来一遍。</p>

<h2 id="使用刚刚训练-lora-模型">使用刚刚训练 Lora 模型</h2>

<p>下面的代码可以将 Lora 模型叠加到基础模型上去。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">AutoModel</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">"ChatGLM-path"</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">PeftModel</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="s">"&lt;Your_Path&gt;/ChatGLM-Tuning/output"</span><span class="p">,</span> <span class="n">fan_in_fan_out</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>啤酒云</name></author><category term="aiml" /><summary type="html"><![CDATA[本文是开源项目的使用记录，按照文档操作， finetune 的过程其实很简单。]]></summary></entry><entry><title type="html">在 AWS 部署 AI 文生图为 Restful API 的最简单方式</title><link href="https://youbug.cn/2023/04/easy-way-to-inference-on-aws.html" rel="alternate" type="text/html" title="在 AWS 部署 AI 文生图为 Restful API 的最简单方式" /><published>2023-04-03T08:10:49+00:00</published><updated>2023-04-03T08:10:49+00:00</updated><id>https://youbug.cn/2023/04/easy-way-to-inference-on-aws</id><content type="html" xml:base="https://youbug.cn/2023/04/easy-way-to-inference-on-aws.html"><![CDATA[<p>当你的大模型练就之后，“很容易” 将模型部署到 SageMaker，但我们一般需要通过 Restful API 集成到应用中。本文以 Stable Diffussion 为例，介绍了一种简便的集成方法，并提供了代码。</p>

<h2 id="流程">流程</h2>

<p><img src="/assets/posts/aiml/sagemaker-s3-restful.png" alt="SageMaker restful" /></p>

<ol>
  <li>
    <p>用户请求 API Gateway, prompt 包含在 Url 中。</p>
  </li>
  <li>
    <p>API Gateway 将请求传向 Lambda。</p>
  </li>
  <li>
    <p>Lambda 请求 SageMaker 的 Endpoint。</p>
  </li>
  <li>
    <p>SageMaker 响应请求，返回 图片和 prompt 信息。</p>
  </li>
  <li>
    <p>Lambda 将图片上传到 S3。</p>
  </li>
  <li>
    <p>上传完成后，Lambda 对 S3 Object 进行 Url 签名。</p>
  </li>
  <li>
    <p>返回结果</p>
  </li>
  <li>
    <p>返回结果</p>
  </li>
</ol>

<h2 id="在-sagemaker-中部署模型">在 SageMaker 中部署模型</h2>

<p>进入 AWS 控制台的 SageMaker Studio，从左侧菜单选择 SageMaker JumpStart - Models, notebooks, solutions。</p>

<p>这里有非常多的现成的模型，选择一个，如 Stable Diffusion 2.1 base，进入之后，选择 “Deploy”。</p>

<p>稍等 “片刻”，等待 Endpoint 生产完成。</p>

<p>完成后，可以在左侧菜单的 Deployments - Endpoints 里看到 Endpoint 的 Name，这个 Name 就是下面代码中的 endpoint_name。</p>

<h2 id="编写-lambda">编写 Lambda</h2>

<p>直接看代码好了，解析在代码末尾，本段 Lambda 使用 Python 编写：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">boto3</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="n">endpoint_name</span> <span class="o">=</span> <span class="s">'jumpstart-name'</span>
<span class="n">bucket_name</span> <span class="o">=</span> <span class="s">'cloudbeer-aigc-works'</span>

<span class="n">s3_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'s3'</span><span class="p">)</span>
<span class="n">sagemaker_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'runtime.sagemaker'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">query_endpoint</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">"prompt"</span><span class="p">:</span><span class="n">text</span><span class="p">,</span> <span class="s">"width"</span><span class="p">:</span><span class="mi">512</span><span class="p">,</span> <span class="s">"height"</span><span class="p">:</span><span class="mi">512</span><span class="p">}</span>
    <span class="n">query_response</span> <span class="o">=</span> <span class="n">sagemaker_client</span><span class="p">.</span><span class="n">invoke_endpoint</span><span class="p">(</span>
              <span class="n">EndpointName</span><span class="o">=</span><span class="n">endpoint_name</span><span class="p">,</span> 
              <span class="n">ContentType</span><span class="o">=</span><span class="s">'application/json'</span><span class="p">,</span> 
              <span class="n">Body</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">).</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">),</span> 
              <span class="n">Accept</span> <span class="o">=</span> <span class="s">'application/json;jpeg'</span><span class="p">)</span>
    <span class="n">generated_images</span><span class="p">,</span> <span class="n">prompt</span> <span class="o">=</span> <span class="n">parse_response_multiple_images</span><span class="p">(</span><span class="n">query_response</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">generated_images</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">parse_response_multiple_images</span><span class="p">(</span><span class="n">query_response</span><span class="p">):</span>
    <span class="n">response_dict</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">query_response</span><span class="p">[</span><span class="s">'Body'</span><span class="p">].</span><span class="n">read</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">response_dict</span><span class="p">[</span><span class="s">'generated_images'</span><span class="p">],</span> <span class="n">response_dict</span><span class="p">[</span><span class="s">'prompt'</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">save_s3</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
    <span class="n">object_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">())</span> <span class="o">+</span> <span class="s">'.jpg'</span>
    <span class="n">resPut</span> <span class="o">=</span> <span class="n">s3_client</span><span class="p">.</span><span class="n">put_object</span><span class="p">(</span>
        <span class="n">ContentType</span><span class="o">=</span><span class="s">"image/jpeg"</span><span class="p">,</span>
        <span class="n">Body</span><span class="o">=</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">image</span><span class="p">),</span>
        <span class="n">Bucket</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">,</span>
        <span class="n">Key</span><span class="o">=</span><span class="n">object_name</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">s3_client</span><span class="p">.</span><span class="n">generate_presigned_url</span><span class="p">(</span><span class="s">'get_object'</span><span class="p">,</span>
                                                    <span class="n">Params</span><span class="o">=</span><span class="p">{</span><span class="s">'Bucket'</span><span class="p">:</span> <span class="n">bucket_name</span><span class="p">,</span>
                                                            <span class="s">'Key'</span><span class="p">:</span> <span class="n">object_name</span><span class="p">},</span>
                                                    <span class="n">ExpiresIn</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">ClientError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">response</span>
    
<span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="n">event</span><span class="p">[</span><span class="s">"queryStringParameters"</span><span class="p">][</span><span class="s">'prompt'</span><span class="p">]</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">query_endpoint</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="s">'statusCode'</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
        <span class="s">'body'</span><span class="p">:</span>  <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span>
            <span class="s">"url"</span><span class="p">:</span> <span class="n">save_s3</span><span class="p">(</span><span class="n">image</span><span class="p">),</span>
            <span class="s">"prompt"</span><span class="p">:</span> <span class="n">prompt</span>
        <span class="p">})</span>
    <span class="p">}</span>

</code></pre></div></div>

<p>上面的代码非常的简单，做了如下的事情：</p>

<ul>
  <li>定义了 2 个变量，分别是 模型的 Endpoint 和 S3 桶的名称。</li>
  <li>query_endpoint 和 parse_response_multiple_images 这两个函数直接使用了 SageMaker 的 Notebook 中的 Python 函数。这俩函数用来调用推理，并解析推理结果。</li>
  <li>save_s3 这个函数将图片上传到 S3 的存储桶，并生成一个 Presigned Url 作为输出结果。query_endpoint 的图片结果是图片的 byte 数组 base64 encode 之后的字符串，在上传 S3 的时候需要将字符串 decode 成 byte 数组。</li>
  <li>最后把结果组装一下就可以了， 参数：prompt 获取自 Querystring: <code class="language-plaintext highlighter-rouge">event["queryStringParameters"]['prompt']</code>。</li>
  <li>这个代码如果需要生产环境使用，请注意如下问题：
    <ul>
      <li>图片大小为 512*512，此尺寸可以直接在代码中修改，图片的尺寸会直接关系到生成速度和资源占用。</li>
      <li>Lambda 的执行超时时间需要调整。</li>
      <li>S3 文件的 Key 没有创建子目录，都在根下。</li>
      <li>S3 的文件名使用了时间戳，并发大的时候，有可能会有重复名称。</li>
      <li>S3 的签名过期时间是 5 分钟。</li>
      <li>记得加上权限认证，把这个服务提供给你真正的客户，毕竟 GPU 有点贵。</li>
    </ul>
  </li>
</ul>

<h2 id="iam-权限">IAM 权限</h2>

<p>在 Lambda 的 Configuration 的 Tab 里，可以看到一个 Execution role，点击具体的 role 进入 IAM 中，在这个 role 中需要分别加入 SageMaker 和 S3 的权限。</p>

<p>如，S3 的 Inline Policy 可以如下配置：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AccessAiGC"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:*"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"arn:aws:s3:::cloudbeer-aigc-works"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"arn:aws:s3:::cloudbeer-aigc-works/*"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>你亦可以配置相应的 SageMaker 权限。</p>

<h2 id="api-gateway">API Gateway</h2>

<p>新建一个 API Gateway，把他指向 Lambda 就好了。</p>

<p>现在访问如下的 API Gateway 的 Url 就可以看到结果了：</p>

<p><a href="https://xxxxxxxxxxx.execute-api.region.amazonaws.com/route?prompt=cyborg_tiger">https://xxxxxxxxxxx.execute-api.region.amazonaws.com/route?prompt=cyborg_tiger</a>  假的，不要点。</p>

<p>结果为：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://xxxxxxx.s3.amazonaws.com/xxxxxxxx.jpg?AWSAccessKeyId=...."</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cyborg_tiger"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>上面的 url 就是 AIGC 的输出结果，你应该看到了一只赛博老虎。😄</p>

<hr />

<p>参考：</p>

<p><a href="https://aws.amazon.com/cn/blogs/machine-learning/generate-images-from-text-with-the-stable-diffusion-model-on-amazon-sagemaker-jumpstart/">https://aws.amazon.com/cn/blogs/machine-learning/generate-images-from-text-with-the-stable-diffusion-model-on-amazon-sagemaker-jumpstart/</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml" /><summary type="html"><![CDATA[当你的大模型练就之后，“很容易” 将模型部署到 SageMaker，但我们一般需要通过 Restful API 集成到应用中。本文以 Stable Diffussion 为例，介绍了一种简便的集成方法，并提供了代码。]]></summary></entry></feed>