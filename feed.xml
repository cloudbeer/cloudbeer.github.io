<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://youbug.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://youbug.cn/" rel="alternate" type="text/html" /><updated>2022-12-10T10:07:14+00:00</updated><id>https://youbug.cn/feed.xml</id><title type="html">YouBug</title><subtitle>分享，记录而已</subtitle><entry><title type="html">在 AWS EKS 中部署 Gitlab</title><link href="https://youbug.cn/2022/12/gitlab-in-eks.html" rel="alternate" type="text/html" title="在 AWS EKS 中部署 Gitlab" /><published>2022-12-10T09:50:33+00:00</published><updated>2022-12-10T09:50:33+00:00</updated><id>https://youbug.cn/2022/12/gitlab-in-eks</id><content type="html" xml:base="https://youbug.cn/2022/12/gitlab-in-eks.html"><![CDATA[<p>本文记录了 Gitlab 在 Kubernetes 中的安装过程，目标是构建出生产可用的 Gitlab 系统。本文以 AWS EKS 为例。</p>

<h2 id="在-aws-部署-gitlab-的前提条件">在 AWS 部署 Gitlab 的前提条件</h2>

<p>首先需要创建出合适的集群，Gitlab 对 EKS 集群的需求基本需求如下：</p>

<ul>
  <li>Ingress: 需要安装 aws-load-balancer</li>
  <li>PV 卷: 需要安装 ebs-csi-driver</li>
  <li>HPA: 需要安装 metrics-server</li>
</ul>

<p>生产环境下：</p>

<ul>
  <li>PostgresSQL: 安装 RDS for Postgres。</li>
  <li>Redis: 安装 ElasticCache for Reids。</li>
</ul>

<p>高级特性(非必须，这部分内容稍后探讨)：</p>

<ul>
  <li>CI 过程的优化: 创建 Karpenter Provisinor</li>
  <li>CI 缓存: 创建 S3 存储桶</li>
  <li>数据存储的高可用</li>
</ul>

<p>因为 Gitlab 不会创建数据库本身，<strong>需要首先在 Postgres 里创建一个数据库</strong> <code class="language-plaintext highlighter-rouge">gitlab</code>，这个库名可以自定义，稍后指定到安装配置里。</p>

<h2 id="部署-gitlab">部署 Gitlab</h2>

<p>首先在 EKS 中 创建命名空间 gitlab：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create ns gitlab
</code></pre></div></div>

<p>创建数据库和 SMTP Server 的密码 Secret:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> - <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-password
  namespace: gitlab
type: Opaque  
stringData:
  psql-password: &lt;your-psql-secret&gt;
  smtp-password: &lt;your-smtp-password&gt;
</span><span class="no">EOF
</span></code></pre></div></div>

<ul>
  <li>这里的 name 和 key 可以自定义，稍后需要定义到 HelmChart 的配置中。</li>
  <li>用户名是直接明文写在 Gitlab 的配置中的。</li>
  <li>Secret 需要配置到 Gitlab 的安装 namespace。</li>
</ul>

<p>下面是完整的 HelmChart 的配置，这里的格式是 CDK，如果您使用 Helm 直接安装，试着转换成 Values.yaml:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ClusterInfo</span><span class="p">,</span> <span class="nx">ClusterAddOn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@aws-quickstart/eks-blueprints</span><span class="dl">'</span><span class="p">;</span>


<span class="kd">const</span> <span class="nx">smtpEmail</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">cloudeer@gmail.com</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">psqlAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;postgres-address&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">redisAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;redis-address&gt;</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">GitlabAddon</span> <span class="k">implements</span> <span class="nx">ClusterAddOn</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="nx">deploy</span><span class="p">(</span><span class="nx">clusterInfo</span><span class="p">:</span> <span class="nx">ClusterInfo</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">vpc</span> <span class="o">=</span> <span class="nx">clusterInfo</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">vpc</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">clusterInfo</span><span class="p">.</span><span class="nx">getResourceContext</span><span class="p">().</span><span class="nx">scope</span><span class="p">;</span>

    <span class="nx">clusterInfo</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">addHelmChart</span><span class="p">(</span><span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">chart</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">repository</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://charts.gitlab.io/</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">version</span><span class="p">:</span> <span class="dl">"</span><span class="s2">6.6.2</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">namespace</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">release</span><span class="p">:</span> <span class="dl">"</span><span class="s2">abigfun</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">createNamespace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">values</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">global</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">hosts</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">domain</span><span class="p">:</span> <span class="dl">"</span><span class="s2">abig.fun</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">https</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
          <span class="p">},</span>
          <span class="na">shell</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">tcp</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">proxyProtocol</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">},</span>
          <span class="na">email</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">display_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GitLab</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">from</span><span class="p">:</span> <span class="nx">smtpEmail</span><span class="p">,</span>
            <span class="na">reply_to</span><span class="p">:</span> <span class="nx">smtpEmail</span>
          <span class="p">},</span>
          <span class="na">smtp</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">enabled</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">smtp.gmail.com</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">tls</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">587</span><span class="p">,</span>
            <span class="na">authentication</span><span class="p">:</span> <span class="dl">'</span><span class="s1">login</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">user_name</span><span class="p">:</span> <span class="nx">smtpEmail</span><span class="p">,</span>
            <span class="na">starttls_auto</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">openssl_verify_mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">peer</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">secret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">gitlab-password</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">smtp-password</span><span class="dl">'</span>
            <span class="p">}</span>

          <span class="p">},</span>
          <span class="na">ingress</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">tls</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">enabled</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">configureCertmanager</span><span class="p">:</span> <span class="kc">false</span>
          <span class="p">},</span>
          <span class="na">psql</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="nx">psqlAddress</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">5432</span><span class="p">,</span>
            <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">secret</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab-password</span><span class="dl">"</span><span class="p">,</span>
              <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">psql-password</span><span class="dl">"</span>
            <span class="p">},</span>
          <span class="p">},</span>
          <span class="na">redis</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="nx">redisAddress</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">6379</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">enabled</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">},</span>
        <span class="na">redis</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">install</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">},</span>
        <span class="na">postgresql</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">install</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="dl">"</span><span class="s2">nginx-ingress</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">controller</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">service</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">annotations</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">service.beta.kubernetes.io/aws-load-balancer-backend-protocol</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">tcp</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">service.beta.kubernetes.io/aws-load-balancer-proxy-protocol</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span>
              <span class="p">}</span>
            <span class="p">},</span>
            <span class="na">config</span><span class="p">:</span> <span class="p">{</span>
              <span class="dl">"</span><span class="s2">use-proxy-protocol</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">},</span>
        <span class="dl">"</span><span class="s2">gitlab-runner</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">runners</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">privileged</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">config</span><span class="p">:</span> <span class="s2">`
[[runners]]
  [runners.kubernetes]
    image = "ubuntu:20.04"
    privileged = true
  [[runners.kubernetes.volumes.empty_dir]]
    name = "docker-certs"
    mount_path = "/certs/client"
    medium = "Memory"
  [[runners.kubernetes.volumes.empty_dir]]
    name = "dind-storage"
    mount_path = "/var/lib/docker"
  [[runners.kubernetes.volumes.host_path]]
    name = "hostpath-modules"
    mount_path = "/lib/modules"
    read_only = true
    host_path = "/lib/modules"
  [[runners.kubernetes.volumes.host_path]]
    name = "hostpath-cgroup"
    mount_path = "/sys/fs/cgroup"
    host_path = "/sys/fs/cgroup"
            `</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>代码解读：</p>

<ul>
  <li>需要配置一个域名，最好这个域名是真实的。本例中使用的是: abig.fun</li>
  <li>Gitlab 安装了一个 NginxIngress Controller，所以 AWS 的 LB 只需要使用 TCP 即可。</li>
  <li>在 K8S 里构建 docker 镜像，需要给 runner 提权，并配置一些 volumes 绑定，如上面的 gitlab-runner.runners.config 配置节点</li>
</ul>

<p>Gitlab 安装完成后，查看安装结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ kubectl get po <span class="nt">-n</span> gitlab
NAME                                                READY   STATUS      RESTARTS       AGE
abigfun-certmanager-7c98d5576b-64q2l                1/1     Running     0              139m
abigfun-certmanager-cainjector-c74d89b67-w8gwj      1/1     Running     0              139m
abigfun-certmanager-webhook-6c4fbb8c86-rkfl6        1/1     Running     0              139m
abigfun-gitaly-0                                    1/1     Running     0              139m
abigfun-gitlab-exporter-fb9dc9776-f5llm             1/1     Running     0              139m
abigfun-gitlab-runner-6f75dd5f8f-snlx5              1/1     Running     8 <span class="o">(</span>109m ago<span class="o">)</span>   139m
abigfun-gitlab-shell-77b9f4fcf9-2lxw8               1/1     Running     0              139m
abigfun-gitlab-shell-77b9f4fcf9-h99gf               1/1     Running     0              139m
abigfun-kas-6b4c6b9b7c-snjt5                        1/1     Running     0              140m
abigfun-kas-6b4c6b9b7c-vrqmv                        1/1     Running     0              139m
abigfun-migrations-2-2pxlh                          0/1     Completed   0              44m
abigfun-minio-596cb868fd-g87wj                      1/1     Running     0              140m
abigfun-minio-create-buckets-2-r4l75                0/1     Completed   0              44m
abigfun-nginx-ingress-controller-59dc9b7959-7xlv2   1/1     Running     0              139m
abigfun-nginx-ingress-controller-59dc9b7959-q96mn   1/1     Running     0              139m
abigfun-prometheus-server-76944cc9cf-srptg          2/2     Running     0              139m
abigfun-registry-864b87ccd8-hgcv6                   1/1     Running     0              139m
abigfun-registry-864b87ccd8-qvvgl                   1/1     Running     0              139m
abigfun-sidekiq-all-in-1-v2-7c98fb88fd-vkk9w        1/1     Running     0              44m
abigfun-toolbox-89cd5c577-twctl                     1/1     Running     0              43m
abigfun-webservice-default-849d958f64-nqfhr         2/2     Running     0              44m
abigfun-webservice-default-849d958f64-rr9q7         2/2     Running     0              43m
</code></pre></div></div>

<h2 id="第一次运行-gitlab">第一次运行 Gitlab</h2>

<p>运行前，需要进行域名解析：</p>

<p>显示 ingress：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get ing <span class="nt">-n</span> gitlab
</code></pre></div></div>

<p>会看到所有的 ingress 都绑定到了一个经典 LB。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                         CLASS           HOSTS               ADDRESS                                                                        PORTS   AGE
abigfun-kas                  abigfun-nginx   kas.abig.fun        xxxxxxxxxx.elb.amazonaws.com   80      58m
abigfun-minio                abigfun-nginx   minio.abig.fun      xxxxxxxxxx.elb.amazonaws.com   80      58m
abigfun-registry             abigfun-nginx   registry.abig.fun   xxxxxxxxxx.elb.amazonaws.com   80      58m
abigfun-webservice-default   abigfun-nginx   gitlab.abig.fun     xxxxxxxxxx.elb.amazonaws.com   80      58m
</code></pre></div></div>

<p>现在去添加解析。分别将上述 HOSTS 中的域名 CNAME 到 <code class="language-plaintext highlighter-rouge">xxxxxxxxxx.elb.amazonaws.com</code>。</p>

<p>等域名生效。访问 <a href="http://gitlab.abig.fun">http://gitlab.abig.fun</a></p>

<p>首先注册一个用户。</p>

<p>管理员账号：root</p>

<p>初始密码：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get secret <span class="nt">--namespace</span> <span class="s2">"gitlab"</span> abigfun-gitlab-initial-root-password <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.data.password}"</span> | <span class="nb">base64</span> <span class="nt">-d</span>
</code></pre></div></div>

<p>使用管理账号进入之后，审批一下 刚刚注册的账号。</p>

<h2 id="功能测试">功能测试</h2>

<p>使用刚刚自己注册的账号登录，创建一个项目，并添加一个文件: <code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code>。 这部分可以测试 git 源代码管理功能。</p>

<p>.gitlab-ci.yml 的内容如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
  <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
  <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/certs"</span>
  <span class="na">DOCKER_TLS_VERIFY</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">DOCKER_CERT_PATH</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/certs/client"</span>

<span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">package</span>

<span class="na">docker-build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker:20</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">package</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">sleep </span><span class="m">5</span>
    <span class="pi">-</span> <span class="s">docker info</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">echo "Hehe"</span>

</code></pre></div></div>

<ul>
  <li>上面的示例可以测试 docker dind 是否正常</li>
  <li>sleep 5 是为了…我也说不清，新版本的 docker 加一下这个就正常了，我觉得是个坑，搞了很久才发现是这个原因。</li>
</ul>

<p>水一段文字记录一下成功结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running with gitlab-runner 15.6.0 <span class="o">(</span>44a1c2be<span class="o">)</span>
  on abigfun-gitlab-runner-8567dfbd8-bcg84 xJfSsxKi
Preparing the <span class="s2">"kubernetes"</span> executor
00:00
Using Kubernetes namespace: gitlab
Using Kubernetes executor with image docker:20 ...
Using attach strategy to execute scripts...
Preparing environment
00:03
Waiting <span class="k">for </span>pod gitlab/runner-xjfssxki-project-2-concurrent-0wrtsq to be running, status is Pending
Running on runner-xjfssxki-project-2-concurrent-0wrtsq via abigfun-gitlab-runner-8567dfbd8-bcg84...
Getting <span class="nb">source </span>from Git repository
00:01
Fetching changes with git depth <span class="nb">set </span>to 20...
Initialized empty Git repository <span class="k">in</span> /builds/[MASKED]/gateway/.git/
Created fresh repository.
Checking out 7fb43706 as main...
Skipping Git submodules setup
Executing <span class="s2">"step_script"</span> stage of the job script
00:06
<span class="nv">$ </span><span class="nb">sleep </span>5
<span class="nv">$ </span>docker info
Client:
 Context:    default
 Debug Mode: <span class="nb">false
 </span>Plugins:
  buildx: Docker Buildx <span class="o">(</span>Docker Inc., v0.9.1<span class="o">)</span>
  compose: Docker Compose <span class="o">(</span>Docker Inc., v2.14.0<span class="o">)</span>
Server:
 Containers: 0
  Running: 0
  Paused: 0
  Stopped: 0
 Images: 0
 Server Version: 20.10.21
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: <span class="nb">true
  </span>Native Overlay Diff: <span class="nb">true
  </span>userxattr: <span class="nb">false
 </span>Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: 1
 Plugins:
  Volume: <span class="nb">local
  </span>Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file <span class="nb">local </span>logentries splunk syslog
 Swarm: inactive
 Runtimes: io.containerd.runtime.v1.linux runc io.containerd.runc.v2
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: 1c90a442489720eec95342e1789ee8a5e1b9536f
 runc version: v1.1.4-0-g5fd4c4d1
 init version: de40ad0
 Security Options:
  seccomp
   Profile: default
 Kernel Version: 5.10.135
 Operating System: Alpine Linux v3.17 <span class="o">(</span>containerized<span class="o">)</span>
 OSType: linux
 Architecture: x86_64
 CPUs: 2
 Total Memory: 7.655GiB
 Name: runner-xjfssxki-project-2-concurrent-0wrtsq
 ID: MS4S:WD6L:NYMX:Q2EK:AASW:ICI5:2PSL:DARY:5EZ5:FYNP:IPCK:3WVF
 Docker Root Dir: /var/lib/docker
 Debug Mode: <span class="nb">false
 </span>Registry: https://index.docker.io/v1/
 Labels:
 Experimental: <span class="nb">false
 </span>Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: <span class="nb">false
 </span>Product License: Community Engine
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"Hehe"</span>
Hehe
Job succeeded
</code></pre></div></div>

<h2 id="其他">其他</h2>

<h3 id="创建内网-postgres-数据库">创建内网 Postgres 数据库</h3>

<p>数据库没有公网，没有跳板机，我使用了如下方法：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run psql-client <span class="nt">-ndefault</span> <span class="nt">--env</span><span class="o">=</span><span class="s2">"POSTGRES_PASSWORD=pAssw0rd"</span> <span class="nt">--image</span><span class="o">=</span>postgres 
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">exec</span> <span class="nt">-ndefault</span> <span class="nt">-it</span> psql-client <span class="nt">--</span> sh
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="nt">-h</span> &lt;postgres-host&gt; <span class="nt">-U</span> postgres <span class="nt">-W</span> 
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">gitlab</span><span class="p">;</span>
</code></pre></div></div>

<p>感觉好傻！</p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="iac," /><category term="aws" /><category term="gitlab," /><category term="cdk," /><category term="eks" /><summary type="html"><![CDATA[本文记录了 Gitlab 在 Kubernetes 中的安装过程，目标是构建出生产可用的 Gitlab 系统。本文以 AWS EKS 为例。]]></summary></entry><entry><title type="html">使用 terraform 增加 EKS 组件</title><link href="https://youbug.cn/2022/12/modify-eks-by-terraform.html" rel="alternate" type="text/html" title="使用 terraform 增加 EKS 组件" /><published>2022-12-07T12:54:44+00:00</published><updated>2022-12-07T12:54:44+00:00</updated><id>https://youbug.cn/2022/12/modify-eks-by-terraform</id><content type="html" xml:base="https://youbug.cn/2022/12/modify-eks-by-terraform.html"><![CDATA[<p>在已经开通了 EKS 的情况下，使用 terraform 给 EKS 集群安装组件。</p>

<h2 id="常用-sdk">常用 SDK</h2>

<p>操作 EKS 的常用 SDK 如下：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 4.40.0"</span>
    <span class="p">}</span>
    <span class="nx">kubernetes</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/kubernetes"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 2.15.0"</span>
    <span class="p">}</span>
    <span class="nx">helm</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/helm"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 2.7.1"</span>
    <span class="p">}</span>
    <span class="nx">kubectl</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"gavinbunney/kubectl"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 1.14.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>hashicorp/aws: 操作 aws 资源</li>
  <li>hashicorp/kubernetes: 操作 k8s 资源</li>
  <li>hashicorp/helm: 操作 helm 图样</li>
  <li>gavinbunney/kubectl: 被广泛采用的个人工具，可以支持单资源 kubectl 操作</li>
</ul>

<h2 id="先决条件">先决条件</h2>

<p>对于已经创建资源，在 terraform 中，通常使用 data 去查询，如下代码，只需要指定 集群的 名字就可以查询到集群的信息：</p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">data</span> <span class="s2">"aws_eks_cluster"</span> <span class="s2">"main"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">cluster_name</span>
<span class="p">}</span>
</code></pre></div></div>

<p>对于 helm 和 kubectl 工具，我们需要为其配置相应的权限：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"helm"</span> <span class="p">{</span>
  <span class="nx">kubernetes</span> <span class="p">{</span>
    <span class="nx">host</span>                   <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">endpoint</span>
    <span class="nx">cluster_ca_certificate</span> <span class="p">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">certificate_authority</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="k">data</span><span class="p">)</span>
    <span class="nx">exec</span> <span class="p">{</span>
      <span class="nx">api_version</span> <span class="p">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
      <span class="nx">args</span>        <span class="p">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="p">,</span> <span class="s2">"--region"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">region</span><span class="p">]</span>
      <span class="nx">command</span>     <span class="p">=</span> <span class="s2">"aws"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">provider</span> <span class="s2">"kubectl"</span> <span class="p">{</span>
  <span class="nx">host</span>                   <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">endpoint</span>
  <span class="nx">cluster_ca_certificate</span> <span class="p">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">certificate_authority</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="k">data</span><span class="p">)</span>
  <span class="nx">exec</span> <span class="p">{</span>
    <span class="nx">api_version</span> <span class="p">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
    <span class="nx">args</span>        <span class="p">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="p">,</span> <span class="s2">"--region"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">region</span><span class="p">]</span>
    <span class="nx">command</span>     <span class="p">=</span> <span class="s2">"aws"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="使用-helm-安装组件">使用 helm 安装组件</h2>

<p>使用 helm 安装非常简单，参照 helm 图样的说明即可，传入相应的参数.</p>

<p>下面的代码是在集群内安装 Gitlab 的示例：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"namespace"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"gitlab"</span>
<span class="p">}</span>

<span class="k">variable</span> <span class="s2">"name"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"gitlab"</span>
<span class="p">}</span>

<span class="k">variable</span> <span class="s2">"domain"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"helm_release"</span> <span class="s2">"gitlab"</span> <span class="p">{</span>
  <span class="nx">namespace</span>        <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">namespace</span>
  <span class="nx">create_namespace</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">name</span>             <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">name</span>
  <span class="nx">repository</span>       <span class="p">=</span> <span class="s2">"https://charts.gitlab.io/"</span>
  <span class="nx">chart</span>            <span class="p">=</span> <span class="s2">"gitlab"</span>
  <span class="nx">version</span>          <span class="p">=</span> <span class="s2">"6.5.5"</span>

  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"global.ingress.enabled"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"global.ingress.configureCertmanager"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab.certmanager.install"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab.prometheus.install"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab.grafana.install"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"nginx-ingress.enabled"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab-runner.enabled"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"global.hosts.domain"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">domain</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="使用-kubectl-安装组件">使用 kubectl 安装组件</h2>

<p>下面的示例安装了 argocd，使用了官网的默认安装方法，使用 kubectl 直接执行 yaml 文件。</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"namespace"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"argocd"</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"kubectl_manifest"</span> <span class="s2">"argocd_namepsace"</span> <span class="p">{</span>
  <span class="nx">yaml_body</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">YAML</span><span class="sh">
apiVersion: v1
kind: Namespace
metadata:
  name: ${var.namespace}
</span><span class="no">YAML
</span><span class="p">}</span>
</code></pre></div></div>

<p>在集群内创建了一个 namespace。</p>

<p>由于 kubectl_manifest 只能执行单资源，象 argocd 给出的 yaml 文件里，包含了很多的资源，此时需要使用 <code class="language-plaintext highlighter-rouge">kubectl_file_documents</code> 将一大段资源结构成单个资源数组。</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">data</span> <span class="s2">"http"</span> <span class="s2">"argocd_yaml"</span> <span class="p">{</span>
  <span class="nx">url</span> <span class="p">=</span> <span class="s2">"https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"</span>
<span class="p">}</span>

<span class="k">data</span> <span class="s2">"kubectl_file_documents"</span> <span class="s2">"argocd_docs"</span> <span class="p">{</span>
  <span class="nx">content</span> <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="nx">argocd_yaml</span><span class="p">.</span><span class="nx">response_body</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后循环执行即可：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"kubectl_manifest"</span> <span class="s2">"argocd"</span> <span class="p">{</span>
  <span class="nx">for_each</span>           <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">kubectl_file_documents</span><span class="p">.</span><span class="nx">argocd_docs</span><span class="p">.</span><span class="nx">manifests</span>
  <span class="nx">yaml_body</span>          <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">override_namespace</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">namespace</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>啤酒云</name></author><category term="iac," /><category term="aws," /><category term="container" /><category term="iac," /><category term="container," /><category term="aws," /><category term="terraform" /><summary type="html"><![CDATA[在已经开通了 EKS 的情况下，使用 terraform 给 EKS 集群安装组件。]]></summary></entry><entry><title type="html">在 K8S 中配置域名解析</title><link href="https://youbug.cn/2022/12/dns-in-k8s.html" rel="alternate" type="text/html" title="在 K8S 中配置域名解析" /><published>2022-12-06T08:09:00+00:00</published><updated>2022-12-06T08:09:00+00:00</updated><id>https://youbug.cn/2022/12/dns-in-k8s</id><content type="html" xml:base="https://youbug.cn/2022/12/dns-in-k8s.html"><![CDATA[<p>在应用开发中，我们不应把远程服务的 ip 硬编码到应用中。有些同学习惯使用域名来标定远程服务，通过修改解析，来区分开发测试和生产环境，这是一个挺好的习惯。在 k8s 系统中，我们使用服务名来调用服务，并通过 coredns 来进行解析。但那些集群外的服务，并且已经被硬编码的域名如何访问呢？</p>

<p>此文拷贝自自己的旧文章，为防止知识过期，在 aws eks 上重新验证成功。</p>

<h2 id="方法1修改容器实例的-hosts">方法1：修改容器实例的 hosts</h2>

<p>设想：把 hosts 文件内容存储在 ConfigMap 中，通过 volume 绑定到 /etc/hosts。但很不幸，/etc/hosts 被 k8s 征用了，无法修改。</p>

<p>但 K8S 给我们提供了 hostAliases 来解决此问题。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hosts-append</span>
  <span class="na">labels</span><span class="pi">:</span> 
    <span class="na">app</span><span class="pi">:</span> <span class="s">hosts-append</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hosts-append</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hosts-append</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">hostAliases</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">ip</span><span class="pi">:</span> <span class="s2">"</span><span class="s">127.0.0.1"</span>
        <span class="na">hostnames</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">foo.local"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">bar.local"</span>
      <span class="pi">-</span> <span class="na">ip</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10.1.2.3"</span>
        <span class="na">hostnames</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">foo.remote"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">bar.remote"</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:alpine</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">hosts-append</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
</code></pre></div></div>

<p>部署后，pod 里面的 hosts 文件已经追加了解析记录。查看结果如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">exec </span>hosts-append-&lt;your-id&gt; <span class="nt">--</span> <span class="nb">cat</span> /etc/hosts
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Kubernetes-managed hosts file.</span>
127.0.0.1 localhost
::1 localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
fe00::0 ip6-mcastprefix
fe00::1 ip6-allnodes
fe00::2 ip6-allrouters
10.10.6.23 hosts-append-6f96d5449f-rldxr

<span class="c"># Entries added by HostAliases.</span>
127.0.0.1 foo.local bar.local
10.1.2.3 foo.remote bar.remote
</code></pre></div></div>

<p>此方法的缺点是：不同环境下的域名映射是不一样的，必须为环境编写不同的 yaml 部署文件，并且给每一个 deployment 编写 hostAliases 会有点“侵入”。</p>

<h2 id="方法2使用内置-coredns-解析">方法2：使用内置 coredns 解析</h2>

<p>K8S 内部默认已经安装了 coredns 服务，可以通过修改 coredns 的配置来达到内部解析的目的。</p>

<p>coredns 的配置写在了 configmap 的 kube-system 命名空间下的 coredns 配置节点了。只需要修改 hosts 配置节点内容就好。</p>

<p>编辑他：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit cm <span class="nt">-n</span> kube-system coredns
</code></pre></div></div>

<p>配置示例(其中 hosts 节点是自定义的解析节点，如果没有 hosts 节点，可以增加一个)：</p>

<pre><code class="language-configmap">    .:53 {
        errors
        health
        kubernetes cluster.local. in-addr.arpa ip6.arpa {
            pods insecure
            upstream
            fallthrough in-addr.arpa ip6.arpa
        }
        hosts {
          127.0.0.1 foo.local
          8.8.8.8 foo.remote
          fallthrough
        }
        prometheus :9153
        proxy . /etc/resolv.conf
        cache 30
        reload
        loadbalance
    }
</code></pre>

<p>修改完成后，要等等。配置下发完成即可生效。可以进入 pod 内部 ping 一下域名看看。</p>

<h2 id="方法3-使用自定义域名服务器解析">方法3. 使用自定义域名服务器解析</h2>

<p>在 coredns 的 ConfigMap 中，还可以自定义 name server，配置类似：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">annotations</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">eks.amazonaws.com/component</span><span class="pi">:</span> <span class="s">coredns</span>
    <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">kube-dns</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">coredns</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">Corefile</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">.:53 {</span>
        <span class="s">errors</span>
        <span class="s">health</span>
        <span class="s">kubernetes cluster.local in-addr.arpa ip6.arpa {</span>
          <span class="s">pods insecure</span>
          <span class="s">fallthrough in-addr.arpa ip6.arpa</span>
        <span class="s">}</span>
        <span class="s">prometheus :9153</span>
        <span class="s">forward . /etc/resolv.conf</span>
        <span class="s">cache 30</span>
        <span class="s">loop</span>
        <span class="s">reload</span>
        <span class="s">loadbalance</span>
    <span class="s">}</span>
    <span class="s">domain-name:53 {</span>
        <span class="s">errors</span>
        <span class="s">cache 30</span>
        <span class="s">forward . custom-dns-server</span>
        <span class="s">reload</span>
    <span class="s">}</span>
</code></pre></div></div>

<ul>
  <li>在 <code class="language-plaintext highlighter-rouge">domain-name:53</code> 节点中可以定义 name server</li>
  <li>如果没有这个节点，可以增加一个，此节点与 <code class="language-plaintext highlighter-rouge">.:53</code> 平级。</li>
</ul>

<p>下面以 aws route53 为例进行测试。</p>

<p>首选进入 route53 控制台，进入 <a href="https://console.aws.amazon.com/route53/v2/hostedzones#CreateHostedZone">创建托管区</a>。如图：</p>

<p><img src="/assets/posts/container/create-dns-zone.png" alt="Create 53 Private Zone" /></p>

<p>创建完成可以看到解析记录里 name server，地址类似如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ns-1536.awsdns-00.co.uk.
ns-0.awsdns-00.com.
ns-1024.awsdns-00.org.
ns-512.awsdns-00.net.
</code></pre></div></div>

<p>并添加一个新解析 A 记录，如下图：</p>

<p><img src="/assets/posts/container/dns-res.png" alt="DNS result" /></p>

<p>编辑 ConfigMap，参考上面的配置，修改 K8S/EKS 的 name server</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit cm <span class="nt">-n</span> kube-system coredns
</code></pre></div></div>

<p>在 <code class="language-plaintext highlighter-rouge">domain-name:53</code> 节点设置 <code class="language-plaintext highlighter-rouge">forward . ns-1536.awsdns-00.co.uk.</code> 即可。</p>

<p>设置完成，进入 EKS 的 任意 pod 测试，ping 或者 dig 一下，结果如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># dig www.youbug.cn</span>

<span class="p">;</span> &lt;&lt;<span class="o">&gt;&gt;</span> DiG 9.16.33-Debian &lt;&lt;<span class="o">&gt;&gt;</span> www.youbug.cn
<span class="p">;;</span> global options: +cmd
<span class="p">;;</span> Got answer:
<span class="p">;;</span> -&gt;&gt;HEADER<span class="o">&lt;&lt;-</span> <span class="no">opcode</span><span class="sh">: QUERY, status: NOERROR, id: 42026
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: d032981648385382 (echoed)
;; QUESTION SECTION:
;www.youbug.cn.   IN A

;; ANSWER SECTION:
www.youbug.cn.  30 IN A 192.168.0.1

;; Query time: 0 msec
;; SERVER: 172.20.0.10#53(172.20.0.10)
;; WHEN: Wed Dec 07 02:39:49 UTC 2022
;; MSG SIZE  rcvd: 83

</span></code></pre></div></div>

<p>可以看到已经生效了。</p>

<p>其他云厂商的或者自建域名服务器可以使用类似方法，不一一赘述了。</p>

<h2 id="使用场景总结">使用场景总结</h2>

<table>
  <tbody>
    <tr>
      <td><strong>名称</strong></td>
      <td><strong>方法</strong></td>
      <td><strong>适用场景</strong></td>
    </tr>
    <tr>
      <td>hostAliases</td>
      <td>修改 pod 的 hosts 配置</td>
      <td>K8S 集群内部分 workloads 需要单独解析。开发者临时测试没有 ConfigMap 权限等。A/B Test。</td>
    </tr>
    <tr>
      <td>coredns 直接解析</td>
      <td>修改 ConfigMap 直接解析</td>
      <td>完整的 K8S 开发测试环境，UAT 环境等</td>
    </tr>
    <tr>
      <td>自定义 dns server</td>
      <td>修改 ConfigMap 配置以使用自定义域名服务器</td>
      <td>多 K8S 集群，有非 K8S 负载，VPC 范围解析</td>
    </tr>
  </tbody>
</table>

<p>当然，更好的做法是把 <strong>配置文件与应用解耦，所有的配置，包括远程服务的域名或 ip 都可以被远程修改</strong>。</p>]]></content><author><name>啤酒云</name></author><category term="container," /><category term="aws" /><category term="容器," /><category term="aws," /><category term="dns," /><category term="kubernetes" /><summary type="html"><![CDATA[在应用开发中，我们不应把远程服务的 ip 硬编码到应用中。有些同学习惯使用域名来标定远程服务，通过修改解析，来区分开发测试和生产环境，这是一个挺好的习惯。在 k8s 系统中，我们使用服务名来调用服务，并通过 coredns 来进行解析。但那些集群外的服务，并且已经被硬编码的域名如何访问呢？]]></summary></entry><entry><title type="html">容器 DevOps: Argo CD 入门</title><link href="https://youbug.cn/2022/12/argocd-start.html" rel="alternate" type="text/html" title="容器 DevOps: Argo CD 入门" /><published>2022-12-05T08:20:01+00:00</published><updated>2022-12-05T08:20:01+00:00</updated><id>https://youbug.cn/2022/12/argocd-start</id><content type="html" xml:base="https://youbug.cn/2022/12/argocd-start.html"><![CDATA[<p>在 GitOps 模式下，当 CI 完成容器打包后，还需要将部署脚本的容器版本号更新到 git 仓库，接下来的工作就可以交给容器内的 CD 来干了。这有效解耦了 CI/CD 过程。这个模式非常适合多云多集群的应用部署，以及有效协调运维部门和业务研发部门的工作。</p>

<h2 id="gitops-和-argo-cd">GitOps 和 Argo CD</h2>

<p>GitOps 的基本概念:</p>

<p>参考这个：<a href="https://www.weave.works/technologies/gitops/">https://www.weave.works/technologies/gitops/</a>。大概意思是：将 CI/CD 整个过程作为代码，存储在 git 仓库，基于 git 仓库中的代码和动作作为 CI/CD 的依据。CI/CD 系统会根据变动触发构建或部署过程。</p>

<p>Argo CD 的定义是：</p>

<p>在 Kubernetes 中声明式 GitOps 的持续交付工具。Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.</p>

<p>下面的示例中，将演示一下一个 CD 的过程。</p>

<h2 id="简要安装测试模式">简要安装(测试模式)</h2>

<p>安装非常简单，过程如下：</p>

<p>创建 命名空间：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create namespace argocd
</code></pre></div></div>

<p>安装：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-n</span> argocd <span class="nt">-f</span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
</code></pre></div></div>

<p>这样就可以了。</p>

<p>使用下面的命令验证安装结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get po <span class="nt">-nargocd</span>
</code></pre></div></div>

<p>显示结果如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                                                READY   STATUS    RESTARTS      AGE
argocd-application-controller-0                     1/1     Running   0             64s
argocd-applicationset-controller-6779fd5cf5-ct5ck   1/1     Running   0             78s
argocd-dex-server-68f86575b6-xcrx6                  1/1     Running   2 <span class="o">(</span>65s ago<span class="o">)</span>   76s
argocd-notifications-controller-769b876844-wj6ck    1/1     Running   0             74s
argocd-redis-547f5d94cd-9rb94                       1/1     Running   0             72s
argocd-repo-server-77b686784d-2bkjp                 1/1     Running   0             69s
argocd-server-6f497ddb95-l4sxv                      1/1     Running   0             66s
</code></pre></div></div>

<p>如果在生产环境，请参考高可用模式安装: <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/">https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/</a></p>

<h2 id="部署第一个-cd-应用">部署第一个 CD 应用</h2>

<p>请 clone 这个 github 仓库 ，这里包含了应用部署脚本和 Argo CD 的脚本。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/cloudbeer/cd-script.git
</code></pre></div></div>

<p>下面我们尝试使用 argocd 持续升级 nginx 应用。</p>

<p>为此，我们需要编写 nginx 的 k8s 部署脚本。</p>

<h3 id="代码说明">代码说明</h3>

<p>部署 nginx 应用：deployment.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
              <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
</code></pre></div></div>

<p>暴露 nginx 服务: service.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http-nginx</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
</code></pre></div></div>

<p>kustomization.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">kustomize.config.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Kustomization</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
<span class="na">commonLabels</span><span class="pi">:</span>
  <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
<span class="na">resources</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">deployment.yaml</span>
  <span class="pi">-</span> <span class="s">service.yaml</span>
<span class="na">images</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">newTag</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1.16"</span>
</code></pre></div></div>

<p>上面编写的部署脚本，现在无须执行，先放到 git 仓库，
本示例的代码位于： <a href="https://github.com/cloudbeer/cd-script/tree/main/nginx">https://github.com/cloudbeer/cd-script/tree/main/nginx</a></p>

<p>现在编写 Argo CD 的应用，此部分可以在 Web 界面配置（稍后我们去查看 Web UI），
Argo CD 的 Application 其实是在 K8S 中以 CRD 形式存在，就象下面的代码：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">argoproj.io/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Application</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">project</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">destination</span><span class="pi">:</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
    <span class="na">server</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://kubernetes.default.svc"</span>
  <span class="na">source</span><span class="pi">:</span>
    <span class="na">repoURL</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://github.com/cloudbeer/cd-script.git"</span>
    <span class="na">targetRevision</span><span class="pi">:</span> <span class="s">HEAD</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">syncPolicy</span><span class="pi">:</span>
    <span class="na">automated</span><span class="pi">:</span> 
      <span class="na">prune</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">selfHeal</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>拆解一下上面的代码：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kind: Application</code> 是 Argo CD 扩展的 CRD。</li>
  <li><code class="language-plaintext highlighter-rouge">project: default</code> project 是 argocde 的逻辑组织单元，他可以按照 project 去分类维护 Application。</li>
  <li><code class="language-plaintext highlighter-rouge">destination</code> 部分描述了我们需要部署的目标为当前集群的 default 命名空间。(如果部署到其他命名空间，请先创建 ns，或者在 yaml 指定)。</li>
  <li><code class="language-plaintext highlighter-rouge">source</code> 表示部署文件所在的 git 地址。本例中是这个 git 仓库的 nginx 目录。</li>
  <li><code class="language-plaintext highlighter-rouge">syncPolicy</code> 是同步策略，自动策略中包括开关：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">automated.prune</code>: 字面意思是 修剪，如果设置为 true，他可以允许删除 yaml 里没有的资源以保持部署与描述一致。</li>
      <li><code class="language-plaintext highlighter-rouge">automated.selfHeal</code>: 设置为 true 的时候，Argo CD 会定期检查当前集群的状态和 yaml 描述是否一致，如果不一致，则会触发部署。</li>
    </ul>
  </li>
</ul>

<h3 id="部署">部署</h3>

<p>现在请将上述 Application 部署到 K8S 集群 中。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">kubectl apply -f applications/nginx.yaml</span>
</code></pre></div></div>

<p>检查部署结果:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">kubectl get app -nargocd</span>
</code></pre></div></div>

<p>可以看到应用已经同步了：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME    SYNC STATUS   HEALTH STATUS
nginx   Synced        Healthy
</code></pre></div></div>

<p>同时检查一下业务应用部署结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get po <span class="nt">-ndefault</span>
</code></pre></div></div>

<p>查看一下当前部署的版本：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get deploy nginx <span class="nt">-oyaml</span> | <span class="nb">grep </span>image:
</code></pre></div></div>

<p>现在我们尝试更新一下 nginx 的版本号，修改一下 kustomization.yaml 文件中的版本号。然后持续观察部署结果。</p>

<blockquote>
  <p>通常修改 kustomization 的动作是由 CI 系统来完成的，在上一章文章 <a href="/2022/12/k8s-devops-gitlab-ci.html">Gitlab CI</a> 里我们已经演示了如何 修改  kustomization.yaml 这个文件了。</p>
</blockquote>

<h3 id="使用-web-ui">使用 Web UI</h3>

<p>先查询一下密码：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nt">-n</span> argocd get secret argocd-initial-admin-secret <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.data.password}"</span> | <span class="nb">base64</span> <span class="nt">-d</span><span class="p">;</span> <span class="nb">echo</span>
</code></pre></div></div>

<p>映射端口：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl port-forward svc/argocd-server <span class="nt">-n</span> argocd 8080:80
</code></pre></div></div>

<p>然后访问 <a href="http://localhost:8080">http://localhost:8080</a>，登录用户名 admin，密码为刚刚查询的密码。</p>

<p>登录进去之后，就可以看到 Web 界面了，在 Web 里，可以看到很多绚烂的内容。</p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container" /><category term="gitops," /><category term="argocd" /><summary type="html"><![CDATA[在 GitOps 模式下，当 CI 完成容器打包后，还需要将部署脚本的容器版本号更新到 git 仓库，接下来的工作就可以交给容器内的 CD 来干了。这有效解耦了 CI/CD 过程。这个模式非常适合多云多集群的应用部署，以及有效协调运维部门和业务研发部门的工作。]]></summary></entry><entry><title type="html">Github pages jekyll 插件不支持怎么办</title><link href="https://youbug.cn/2022/12/github-pages-not-support.html" rel="alternate" type="text/html" title="Github pages jekyll 插件不支持怎么办" /><published>2022-12-04T14:13:33+00:00</published><updated>2022-12-04T14:13:33+00:00</updated><id>https://youbug.cn/2022/12/github-pages-not-support</id><content type="html" xml:base="https://youbug.cn/2022/12/github-pages-not-support.html"><![CDATA[<p>花了一下午的时间，将博客的分页，分类功能加上了。结果发现 github pages 不支持，还不能自己安装 jekyll 的插件。然后头大了。</p>

<p>这片文章记录了如何解决这个麻烦。</p>

<h2 id="github-pages-插件别瞎用">github pages 插件别瞎用</h2>

<p>当你觉得你完美解决了写博客的问题的时候，就发现问题了。</p>

<p>下午找到一个不错的分页插件：jekyll-paginate-v2， 搞定了 分页，tags 功能，本地渲染出来很不错，甚合我意。</p>

<p>推送之后，发现了蛋疼的事情：所有的列表页面都是空的。</p>

<p>Actions 也都正常，调查半天才发现，github pages 不支持 jekyll-paginate-v2。</p>

<p>这是他支持的：<a href="https://pages.github.com/versions/">https://pages.github.com/versions/</a></p>

<h2 id="circleci-集成">circleci 集成</h2>

<p>那只能用第三方 CI 工具了。用 gitlab ci 肯定是可以的。</p>

<p>现在试试 circleci。 下面记录了过程：</p>

<h3 id="step-1-创建新分支">step 1. 创建新分支</h3>

<p>创建 cloudbeer.github.io 新分支：soruce。</p>

<h3 id="step-2-添加-circleci-config-文件">step 2. 添加 circleci config 文件</h3>

<p>在新分支里添加文件：<code class="language-plaintext highlighter-rouge">.circleci/config.yml</code>，内容如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">cimg/ruby:2.7.4</span>
        <span class="na">environment</span><span class="pi">:</span>
          <span class="na">USER_NAME</span><span class="pi">:</span> <span class="s">cloudbeer</span>
          <span class="na">USER_EMAIL</span><span class="pi">:</span> <span class="s">cloudbeer@gmail.com</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="na">restore_cache</span><span class="pi">:</span>
          <span class="na">keys</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">rubygems-v1-{{ checksum "Gemfile.lock" }}</span>
            <span class="pi">-</span> <span class="s">rubygems-v1-fallback</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Bundle Install</span>
          <span class="na">command</span><span class="pi">:</span> <span class="s">bundle install</span>
      <span class="pi">-</span> <span class="na">save_cache</span><span class="pi">:</span>
          <span class="na">paths</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">vendor/bundle</span>
          <span class="na">key</span><span class="pi">:</span> <span class="s">rubygems-v1-{{ checksum "Gemfile.lock" }}</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> 
          <span class="na">name</span><span class="pi">:</span> <span class="s">Jekyll Build</span>
          <span class="na">command</span><span class="pi">:</span> <span class="s">JEKYLL_ENV=production bundle exec jekyll build</span>
      <span class="pi">-</span> <span class="na">deploy</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy Release to GitHub</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">if [ $CIRCLE_BRANCH == 'source' ]; then</span>
              <span class="s">bash .circleci/deploy.sh</span>
            <span class="s">fi</span>
<span class="na">workflows</span><span class="pi">:</span>
  <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">jobs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">deploy</span><span class="pi">:</span>
          <span class="na">filters</span><span class="pi">:</span>
            <span class="na">branches</span><span class="pi">:</span>
              <span class="na">only</span><span class="pi">:</span> 
                <span class="pi">-</span> <span class="s">source</span>

</code></pre></div></div>

<p>代码的意思大概是：</p>

<ul>
  <li>使用 ruby 镜像，安装依赖，build</li>
  <li>然后调用 deploy 脚本</li>
</ul>

<h3 id="step-3-doploy-脚本">step 3. doploy 脚本</h3>

<p>添加脚本 <code class="language-plaintext highlighter-rouge">.circleci/deploy.sh</code>，内容如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config user.name <span class="s2">"</span><span class="nv">$USER_NAME</span><span class="s2">"</span>
git config user.email <span class="s2">"</span><span class="nv">$USER_EMAIL</span><span class="s2">"</span>

git checkout main
git pull origin main

find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'_site'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.git'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.gitignore'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.circleci'</span> <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-rf</span> <span class="o">{}</span> <span class="se">\;</span>
<span class="nb">mv </span>_site/<span class="k">*</span> <span class="nb">.</span>
<span class="nb">rm</span> <span class="nt">-R</span> _site/

git add <span class="nt">-fA</span>
git commit <span class="nt">--allow-empty</span> <span class="nt">-m</span> <span class="s2">"</span><span class="si">$(</span>git log <span class="nb">source</span> <span class="nt">-1</span> <span class="nt">--pretty</span><span class="o">=</span>%B<span class="si">)</span><span class="s2">"</span>

git remote set-url origin https://cloudbeer:<span class="k">${</span><span class="nv">GITHUB_PWD</span><span class="k">}</span>@github.com/cloudbeer/cloudbeer.github.io.git

git push <span class="nt">-f</span> origin main

<span class="nb">echo</span> <span class="s2">"deployed successfully"</span>
</code></pre></div></div>

<p>代码的大概意思是：</p>

<ul>
  <li>把分支切到 main，把编译目标 _site 目录里面的文件拷贝到根目录。</li>
  <li>把代码推回去。</li>
  <li>github pages 里设置的是 main 分支的 / 目录，此时 main 下面都是纯 html 页面。</li>
  <li>稍等一会儿 github pages 发布完成就可以看到结果了。</li>
</ul>

<p>上面的代码有个地方需要改进，就是这行：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote set-url origin https://cloudbeer:<span class="k">${</span><span class="nv">GITHUB_PWD</span><span class="k">}</span>@github.com/cloudbeer/cloudbeer.github.io.git
</code></pre></div></div>

<p>推送的时候发现没有权限，先用这个土办法了。这里的 <a href="https://github.com/settings/tokens">GITHUB_PWD 需要去生产</a>，我把申请到的结果存入了 circleci 的环境变量里。</p>

<p>还需要改进的有：</p>

<p>github 在发现有新的 push 之后 还是在运行 jekyll build，在此种情况下，应该直接部署就好。后面再看看咋搞。</p>

<h2 id="github-pages-随便搞">github pages 随便搞</h2>

<p>了解了 github pages 的规则，就可以用任意支持 markdown 的框架来做你的博客了，前提是他静态页面生产器。</p>

<p>发现 circleci 在第二次 build 的时候很快啊，比 gitlab 快很多。可能是一个默认缓存，一个没默认缓存的缘故吧。</p>

<hr />

<p>本文代码参考了如下俩：</p>

<p><a href="https://jasonthai.me/blog/2019/07/22/how-to-deploy-a-github-page-using-circleci-20-custom-jekyll-gems/">How to Deploy to Github Pages Using CircleCI 2.0 + Custom Jekyll Dependencies
</a></p>

<p><a href="https://jekyllrb.com/docs/continuous-integration/circleci/">Jekyll - CircleCI</a></p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="tucao," /><category term="circleci," /><category term="github," /><category term="jekyll" /><summary type="html"><![CDATA[花了一下午的时间，将博客的分页，分类功能加上了。结果发现 github pages 不支持，还不能自己安装 jekyll 的插件。然后头大了。]]></summary></entry><entry><title type="html">AWS CDK 入门：Hello World</title><link href="https://youbug.cn/2022/12/cdk-start-hello-world.html" rel="alternate" type="text/html" title="AWS CDK 入门：Hello World" /><published>2022-12-04T11:54:44+00:00</published><updated>2022-12-04T11:54:44+00:00</updated><id>https://youbug.cn/2022/12/cdk-start-hello-world</id><content type="html" xml:base="https://youbug.cn/2022/12/cdk-start-hello-world.html"><![CDATA[<p>本文是 AWS CDK 入门教程，将利用 “渐进” 模式 使用 AWS CDK 生产一个生产可用的 EKS 集群。本文是上半部分，CDK 入门知识。</p>

<h2 id="iac-和-cdk-简介">IaC 和 CDK 简介</h2>

<h3 id="什么是-iac">什么是 IaC？</h3>

<p>这段来自：<a href="https://www.redhat.com/zh/topics/automation/what-is-infrastructure-as-code-iac">https://www.redhat.com/zh/topics/automation/what-is-infrastructure-as-code-iac</a></p>

<blockquote>
  <p>基础设施即代码（IaC）是通过代码而非手动流程来管理和置备基础设施的方法。</p>

  <p>利用 IaC 我们可以创建包含基础设施规范的配置文件，从而便于编辑和分发配置。此外，它还可确保每次置备的环境都完全相同。通过对配置规范进行整理和记录，IaC 有助于实现配置管理，并避免发生未记录的临时配置更改。</p>

  <p>版本控制是 IaC 的一个重要组成部分，就像其他任何软件源代码文件一样，配置文件也应该在源代码控制之下。以基础设施即代码方式部署还意味着您可以将基础架构划分为若干模块化组件，它们可通过自动化以不同的方式进行组合。</p>

  <p>借助 IaC 实现基础架构置备的自动化，意味着开发人员无需再在每次开发或部署应用时手动置备和管理服务器、操作系统、存储及其他基础架构组件。对基础架构编码即可创建一个置备用的模板，尽管置备过程仍然可以手动完成，但也可以由自动化工具（例如红帽® Ansible® 自动化平台）为您代劳。</p>
</blockquote>

<p>简要来说就是：使用描述性的代码管理您的基础设施。</p>

<h3 id="什么是-cdk">什么是 CDK？</h3>

<p>这段来自：<a href="https://aws.amazon.com/cn/getting-started/guides/setup-cdk/">https://aws.amazon.com/cn/getting-started/guides/setup-cdk/</a></p>

<blockquote>
  <p>AWS CDK 是一个开源软件开发框架，可让您使用熟悉的编程语言 (如 JavaScript、TypeScript、Python、Java、C# 和 Go) 定义云应用程序资源。您编写的代码转换为 CloudFormation (CFN) 模板，可使用 <a href="https://aws.amazon.com/cn/cloudformation/">AWS CloudFormation</a> 创建基础设施。</p>
</blockquote>

<p>这个也总结一下：CDK 就是 AWS 的 IaC，他依赖 Cloudformation，可以用常用的语言来描述您的基础设施。</p>

<h2 id="安装和设置-aws-cdk">安装和设置 AWS CDK</h2>

<p>我习惯使用命令行的方式运行，如 <code class="language-plaintext highlighter-rouge">cdk deploy</code>。cdk 这个命令其实是一个 nodejs 程序。</p>

<p>nodejs 安装就不说了，现在国内有很多开源镜像，如：<a href="https://mirrors.tuna.tsinghua.edu.cn/nodejs-release">https://mirrors.tuna.tsinghua.edu.cn/nodejs-release</a>，请安装版本 &gt;= 10.3.0 的。</p>

<p>nodejs 安装完成后，就可以安装 cdk 命令行：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-g</span> aws-cdk
</code></pre></div></div>

<p>默认安装完成后 CDK 就是全局命令行了。</p>

<p>CDK 同时要依赖 AWS CLI 以及 AWS 凭证。</p>

<p>安装 AWS CLI 参考：<a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/getting-started-install.html">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/getting-started-install.html</a></p>

<p>在开发环境配置凭证：<a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-configure-quickstart.html">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-configure-quickstart.html</a></p>

<h2 id="hello-world">Hello World</h2>

<p>开发环境都设置好了！</p>

<p>首先新建一个目录：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>cdk-demo <span class="o">&amp;&amp;</span> <span class="nb">cd </span>cdk-demo
</code></pre></div></div>

<p>初始换项目，使用 typescipt 语言:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cdk init app <span class="nt">--language</span> typescript
</code></pre></div></div>

<ul>
  <li>选择 typescipt 语言，是因为 cdk 的文档最多最全的是 typescipt 语言，包括 api 和 示例。</li>
</ul>

<p>等若干分钟（会依赖您依赖包的下载速度）之后，打开 lib/cdk-workshop-stack.ts，默认示例代码可以看出，创建了一个 sqs 的 Queue 资源。</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">CdkWorkshopStack</span> <span class="kd">extends</span> <span class="nx">Stack</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">props</span><span class="p">?:</span> <span class="nx">StackProps</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">sqs</span><span class="p">.</span><span class="nx">Queue</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">CdkWorkshopQueue</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">visibilityTimeout</span><span class="p">:</span> <span class="nx">Duration</span><span class="p">.</span><span class="nx">seconds</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">topic</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">sns</span><span class="p">.</span><span class="nx">Topic</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">CdkWorkshopTopic</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">topic</span><span class="p">.</span><span class="nx">addSubscription</span><span class="p">(</span><span class="k">new</span> <span class="nx">subs</span><span class="p">.</span><span class="nx">SqsSubscription</span><span class="p">(</span><span class="nx">queue</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>对于新环境，需要运行:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cdk bootstrap
</code></pre></div></div>

<ul>
  <li>此命令在同一个账号和 region 中只需执行一次。</li>
</ul>

<p>通过 list 命令可以查看 stack。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cdk <span class="nb">ls</span>
</code></pre></div></div>

<p>运行部署：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cdk deploy
</code></pre></div></div>

<ul>
  <li>此命令执行后，会有资源改变列表，并询问是否确认部署。</li>
  <li>检查无误后，输入 y</li>
</ul>

<p>待执行完成后，检查是否真的创建出了 SQS 资源。</p>

<p>清理资源：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cdk destroy
</code></pre></div></div>

<p>验证完成之后，请及时使用 cdk destroy 清理资源，否则会<strong>产生费用</strong>。</p>

<p>使用 cdk destroy 删除更干净。</p>

<h2 id="关于渐进式">关于“渐进式”</h2>

<p>在本文的简介中，提出了 IaC/CDK 是“渐进式”的，这个主要是指 IaC 在执行的过程中，会存储当前执行的状态，并且能够回滚，叠加，删除。</p>

<p>而且在实际运行的过程中，我们也可以使用 “渐进式” 的模式来操作，特别是在测试某个安装的情况下，可以一步一步执行，当执行失败的时候不至于全部回滚。</p>

<p>比如，我们可以先创建一个 VPC：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">vpc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vpc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">EKSVpc</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">ipAddresses</span><span class="p">:</span> <span class="nx">IpAddresses</span><span class="p">.</span><span class="nx">cidr</span><span class="p">(</span><span class="dl">'</span><span class="s1">10.10.0.0/16</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>此时 我们可以先执行这段程序:<code class="language-plaintext highlighter-rouge">cdk deploy</code>。</p>

<p>然后，我们加入新的代码，继续创建了一个 eks。</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">vpc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vpc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">EKSVpc</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">ipAddresses</span><span class="p">:</span> <span class="nx">IpAddresses</span><span class="p">.</span><span class="nx">cidr</span><span class="p">(</span><span class="dl">'</span><span class="s1">10.10.0.0/16</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">eksCluster</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cluster</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">EKSCluster</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">clusterName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cdk-workshop</span><span class="dl">"</span><span class="p">,</span>
      <span class="nx">vpc</span><span class="p">,</span>
      <span class="na">albController</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">version</span><span class="p">:</span> <span class="nx">AlbControllerVersion</span><span class="p">.</span><span class="nx">V2_4_1</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">defaultCapacity</span><span class="p">:</span> <span class="mi">1</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>然后继续执行 <code class="language-plaintext highlighter-rouge">cdk deploy</code>，此时执行引擎会去比较当前的资源描述和当前 state 的异同，并开始创建 eks。</p>

<p>如果 eks 创建失败，整个过程会回滚，此时状态会回滚到 eks 创建之前，也就是说 vpc 还在。</p>

<p>同理，如果想要删除 eks，只需要删除相应的 eks resource 代码即可。</p>]]></content><author><name>啤酒云</name></author><category term="iac," /><category term="aws" /><category term="cdk" /><summary type="html"><![CDATA[本文是 AWS CDK 入门教程，将利用 “渐进” 模式 使用 AWS CDK 生产一个生产可用的 EKS 集群。本文是上半部分，CDK 入门知识。]]></summary></entry><entry><title type="html">容器 DevOps: Gitlab CI</title><link href="https://youbug.cn/2022/12/k8s-devops-gitlab-ci.html" rel="alternate" type="text/html" title="容器 DevOps: Gitlab CI" /><published>2022-12-04T06:32:01+00:00</published><updated>2022-12-04T06:32:01+00:00</updated><id>https://youbug.cn/2022/12/k8s-devops-gitlab-ci</id><content type="html" xml:base="https://youbug.cn/2022/12/k8s-devops-gitlab-ci.html"><![CDATA[<p>当下 Gitlab 具备了 CI/CD 能力。 其 CI 流水线 主要定义在源代码根目录的 .gitlab-ci.yml 的文件里。这篇文章主要描述了如何编写 GitOps 方式的 gitlab-ci 文件。</p>

<h2 id="示例描述">示例描述</h2>

<p>本文使用了 Gitlab SaaS 版本。SaaS 版本的 CI 每个月有 400min 的免费的额度。</p>

<p>本文的源代码在：<a href="https://gitlab.com/cloudbeer/gateway">https://gitlab.com/cloudbeer/gateway</a>，这是一个 Spring Cloud gateway 应用。</p>

<p>ci 的过程包括：</p>

<ul>
  <li>编译 java 源码</li>
  <li>打包 docker 镜像，并上传到镜像仓库（本文使用的是 AWS ECR 仓库）</li>
  <li>修改部署目标脚本的镜像版本</li>
</ul>

<p>完成这几个步骤之后，argocd 会接手 cd 的工作。</p>

<h2 id="gitlab-ciyml-代码拆解">.gitlab-ci.yml 代码拆解</h2>

<h3 id="环境变量">环境变量</h3>

<p>环境变量的定义有三种方式：</p>

<ul>
  <li>全局定义：左侧菜单 Settings -&gt; CI/CD, 页面上 Variables 部分，展开 Expand。</li>
  <li>在 yaml 文件里直接定义：参见下面的代码。</li>
  <li>手工指定：在每次手工启动流水线时，可以填写变量。</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay</span>
  <span class="na">DOCKER_REGISTRY</span><span class="pi">:</span> <span class="s">00000000.dkr.ecr.us-east-2.amazonaws.com</span>
  <span class="na">AWS_DEFAULT_REGION</span><span class="pi">:</span> <span class="s">us-east-2</span>
  <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2375</span>
</code></pre></div></div>

<h3 id="stages-的定义">stages 的定义</h3>

<p>首先定义几个 大的步骤：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">build</span>
  <span class="pi">-</span> <span class="s">package</span>
  <span class="pi">-</span> <span class="s">deploy</span>
</code></pre></div></div>

<p>然后在各个步骤详情里，可以把当前的步骤进行分类，就像这样：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">do-something</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">build</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">alpine</span>
  <span class="na">script</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sleep</span><span class="nv"> </span><span class="s">300"</span>
</code></pre></div></div>

<h3 id="源码编译">源码编译</h3>

<p>对于编译型语言，需要将源代码进行编译，本示例中就是需要将 java 源代码编译打包成 jar 包。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">maven</span><span class="o">-</span><span class="nl">build:</span>
  <span class="nl">image:</span> <span class="nl">maven:</span><span class="n">latest</span>
  <span class="nl">stage:</span> <span class="n">build</span>
  <span class="nl">script:</span> <span class="s">"mvn package"</span>
  <span class="nl">artifacts:</span>
    <span class="nl">paths:</span>
      <span class="o">-</span> <span class="n">target</span><span class="o">/*.</span><span class="na">jar</span>
</code></pre></div></div>

<ul>
  <li>编译时使用 maven 这个镜像</li>
  <li>运行的指令是 <code class="language-plaintext highlighter-rouge">mvn package</code></li>
  <li>编译的结果指定为 target 目录下的所有 jar 文件，gitlab 会将 artifacts 上传，供给后面的步骤使用。</li>
</ul>

<h3 id="docker-镜像打包上传">Docker 镜像打包上传</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">docker-build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">amazon/aws-cli</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">package</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">amazon-linux-extras install docker</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker build -t $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA .</span>
    <span class="pi">-</span> <span class="s">aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY</span>
    <span class="pi">-</span> <span class="s">docker push $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA</span>

</code></pre></div></div>

<ul>
  <li>打包完成后需要上传到 ecr，而 ecr 依赖了 aws cli，所以使用了 aws_cli 的镜像包。在执行过程中，还需要将 AWS 的 AKSK 配置到环境变量。</li>
  <li>在 before_script 里，在 aws_cli 镜像里安装 docker，此时使用了 dind (docker in docker) 模式。</li>
  <li>在 docker build 的过程中，使用了 git 的 commiot sha 作为版本号。 CI_COMMIT_SHORT_SHA 是 gitlab 的内置环境变量。</li>
</ul>

<blockquote>
  <p>gitlab 的 dind 可以参考这个：<a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html</a></p>
</blockquote>

<blockquote>
  <p>gitlab 内置环境变量参考：<a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">https://docs.gitlab.com/ee/ci/variables/predefined_variables.html</a></p>
</blockquote>

<h3 id="部署">部署</h3>

<p>在本示例中，采用了 gitops 的方式，将 CI 和 CD 完全解耦，CI 只需要做到构建完成，并更新部署代码仓库就可以了。剩下的工作交由 CD 来完成。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">yaml-change</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">line/kubectl-kustomize</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">apk add git</span>
    <span class="pi">-</span> <span class="s">git clone https://cloudbeer:${GITHUB_PWD}@github.com/cloudbeer/cd-script.git "/${CI_COMMIT_SHA}"</span>
    <span class="pi">-</span> <span class="s">git config --global user.email "cloudbeer@gmail.com"</span>
    <span class="pi">-</span> <span class="s">git config --global user.name "gitlab-robot"</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cd "/${CI_COMMIT_SHA}/gateway"</span>
    <span class="pi">-</span> <span class="s">kustomize edit set image $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA</span>
    <span class="pi">-</span> <span class="s">cat kustomization.yaml</span>
  <span class="na">after_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cd "/${CI_COMMIT_SHA}"</span>
    <span class="pi">-</span> <span class="s">git add .</span>
    <span class="pi">-</span> <span class="s">git commit -m "[skip ci]updating image $DOCKER_REGISTRY/$CI_COMMIT_SHORT_SHA"</span>
    <span class="pi">-</span> <span class="s">git push origin main</span>
</code></pre></div></div>

<ul>
  <li>镜像上传到镜像仓库后，就可以去修改部署代码了。本示例将部署代码放到了 github，您可以将部署代码放到任意 git 仓库。但在 gitops 模式下，部署脚本不建议和业务源代码放到一起。</li>
  <li>本示例使用了 <a href="https://kustomize.io/">kustomize</a> 来更新部署，kustomize 也被 argocd 默认支持。</li>
  <li>过程是：将部署代码从 git 仓库拉回本地，通过 kustomize 命令修改了 image 的地址，修改完成后推回 git 仓库。</li>
</ul>

<blockquote>
  <p>GITHUB_PWD 需要配置一个 带有 scope 的 token，请到 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 配置。</p>
</blockquote>

<p>完整的代码如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_REGISTRY</span><span class="pi">:</span> <span class="s">cloudbeer</span>
  <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay</span>
  <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2375</span>

<span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">build</span>
  <span class="pi">-</span> <span class="s">package</span>
  <span class="pi">-</span> <span class="s">deploy</span>

<span class="na">maven-build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">maven:latest</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">build</span>
  <span class="na">script</span><span class="pi">:</span> <span class="s2">"</span><span class="s">mvn</span><span class="nv"> </span><span class="s">package"</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">target/*.jar</span>

<span class="na">docker-build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker:20</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">package</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker info</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker build -t $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA .</span>
    <span class="pi">-</span> <span class="s">echo $DOCKER_PASS | docker login -u$DOCKER_USER --password-stdin</span>
    <span class="pi">-</span> <span class="s">docker push $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA</span>

<span class="na">yaml-change</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">line/kubectl-kustomize</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">apk add git</span>
    <span class="pi">-</span> <span class="s">git clone https://cloudbeer:${GITHUB_PWD}@github.com/cloudbeer/cd-script.git "/${CI_COMMIT_SHA}"</span>
    <span class="pi">-</span> <span class="s">git config --global user.email "cloudbeer@gmail.com"</span>
    <span class="pi">-</span> <span class="s">git config --global user.name "gitlab-robot"</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cd "/${CI_COMMIT_SHA}/gateway"</span>
    <span class="pi">-</span> <span class="s">kustomize edit set image $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA</span>
    <span class="pi">-</span> <span class="s">cat kustomization.yaml</span>
  <span class="na">after_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cd "/${CI_COMMIT_SHA}"</span>
    <span class="pi">-</span> <span class="s">git add .</span>
    <span class="pi">-</span> <span class="s">git commit -m "[skip ci]updating image $DOCKER_REGISTRY/$CI_COMMIT_SHORT_SHA"</span>
    <span class="pi">-</span> <span class="s">git push origin main</span>
</code></pre></div></div>

<p>完整代码与文章正文会稍有出入，改用了公开的 github 和 docker hub 来存储 部署文件 和 镜像。</p>

<h3 id="本项目的运行和测试过程">本项目的运行和测试过程</h3>

<p>克隆项目</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://gitlab.com/cloudbeer/gateway.git
</code></pre></div></div>

<p>上传到您自己的 gitlab 仓库，并启动自动构建。</p>

<p>修改构建脚本，将 部署仓库，镜像仓库分别改成您自己的地址。并将相关账号配置到 Variables 里。</p>

<p>改动代码后，如果您不想让 gitlab 自动启动 pipeline，在 commit 信息里加上 <code class="language-plaintext highlighter-rouge">[skip ci]xxxx</code> 即可。</p>

<p>观察构建过程，成功后，可以看到镜像仓库中增加了 版本(tag)， 部署仓库中的 gateway 目录里的 kustomization.yaml 被修改。</p>

<hr />

<p>本文涉及的三个外部仓库，这三个仓库均为 public：</p>

<p>业务源代码：<a href="https://gitlab.com/cloudbeer/gateway">https://gitlab.com/cloudbeer/gateway</a></p>

<p>部署仓库：<a href="https://github.com/cloudbeer/cd-script">https://github.com/cloudbeer/cd-script</a></p>

<p>镜像仓库：<a href="https://hub.docker.com/r/cloudbeer/gateway/tags">https://hub.docker.com/r/cloudbeer/gateway/tags</a></p>]]></content><author><name>啤酒云</name></author><category term="devops" /><category term="gitlab," /><category term="gitops," /><category term="持续集成" /><summary type="html"><![CDATA[当下 Gitlab 具备了 CI/CD 能力。 其 CI 流水线 主要定义在源代码根目录的 .gitlab-ci.yml 的文件里。这篇文章主要描述了如何编写 GitOps 方式的 gitlab-ci 文件。]]></summary></entry><entry><title type="html">在 K8S 中实现 灰度，蓝绿 发布</title><link href="https://youbug.cn/2022/12/k8s-gray-blue-green.html" rel="alternate" type="text/html" title="在 K8S 中实现 灰度，蓝绿 发布" /><published>2022-12-01T08:09:00+00:00</published><updated>2022-12-01T08:09:00+00:00</updated><id>https://youbug.cn/2022/12/k8s-gray-blue-green</id><content type="html" xml:base="https://youbug.cn/2022/12/k8s-gray-blue-green.html"><![CDATA[<p>在基本的 K8S 中，没有提供方便细粒度的流量分配策略。但借助 K8S 的 selector 机制，仍然可以实现简单的灰度和蓝绿发布。</p>

<h2 id="应用部署">应用部署</h2>

<p>应用版本 1</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">ng-v1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">4</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">ng</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">ng</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ng</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:1.22</span>
</code></pre></div></div>

<p>应用版本 2</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">ng-v2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">ng</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">ng</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ng</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">kong/httpbin</span>
</code></pre></div></div>

<ul>
  <li>为了演示版本不同，分别部署了 2 个完全不同的应用作为演示。</li>
  <li>这俩应用有着相同的 label: app 以及不同的 label: version</li>
</ul>

<h2 id="灰度发布">灰度发布</h2>

<p>首先创建一个 service，这个 service 对外暴露服务使用了 app=ng 作为选择器。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">ng</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">ng</span>
</code></pre></div></div>

<p>由于 service 本身是按照 RR 的策略进行轮询的，所有对应的 pod endpoint 得到的流量会保持一致。</p>

<p>所以上述代码中，流量会按照 pod 数量分配，此示例中 v1:v2 流量比例为 4:1。通过改变 pod 的数量就可以实现<strong>粗糙的</strong>灰度了。</p>

<p>启动一个 pod 测试一下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nb">test</span> <span class="nt">--image</span><span class="o">=</span>nginx:1.22 <span class="nt">--restart</span><span class="o">=</span>Never <span class="nt">--</span> sh
</code></pre></div></div>

<p>在终端中重复执行多次 curl，查看会发现流量按照 4:1 的比例分配了。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl ng
</code></pre></div></div>

<p>这个 bash 代码模拟了每隔 5 秒逐步增加 V2 的流量，通过 4 次改变 pod 数量，最终将流量完全切换到 v2。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">v1count</span><span class="o">=</span>5
<span class="nv">v2count</span><span class="o">=</span>0
<span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..5<span class="o">}</span>
<span class="k">do
  </span><span class="nv">v1count</span><span class="o">=</span><span class="k">$((</span>v1count-1<span class="k">))</span>
  <span class="nv">v2count</span><span class="o">=</span><span class="k">$((</span>v2count+1<span class="k">))</span>
  kubectl scale deployment ng-v1 <span class="nt">--replicas</span> <span class="nv">$v1count</span>
  kubectl scale deployment ng-v2 <span class="nt">--replicas</span> <span class="nv">$v2count</span>
  <span class="nb">sleep </span>5
<span class="k">done</span>
</code></pre></div></div>

<p>这个方法不适合如下情况：</p>

<ul>
  <li>pod数量只有一两个的</li>
  <li>需按一定规则灰度</li>
</ul>

<h2 id="蓝绿发布">蓝绿发布</h2>

<p>需要修改 service，增加一个版本的 selector，让 service 固定在特定版本：</p>

<p>当应用是版本 v1 的时候：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">ng</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">ng</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
</code></pre></div></div>

<p>实际生产中，先部署好 v2 版本，当验证无误后，可以通过修改 service 的 version 为 v2 。</p>

<p>现在测试一下：</p>

<p>先将 2 个版本部署成等量 pod。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl scale deployment ng-v1 <span class="nt">--replicas</span> 1

kubectl scale deployment ng-v2 <span class="nt">--replicas</span> 1
</code></pre></div></div>

<p>初始的 service 为版本 v1：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: ng
spec:
  ports:
    - port: 80
  selector:
    app: ng
    version: v1
</span><span class="no">EOF
</span></code></pre></div></div>

<p>现在切换到 v2 版本，如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl patch svc ng <span class="nt">-p</span> <span class="s1">'{"spec":{"selector": {"app": "ng", "version": "v2"}}}'</span>
</code></pre></div></div>

<h2 id="ab-test-发布">A/B test 发布</h2>

<p>A/B test 意味着需要按照一定逻辑进行流量分发。</p>

<blockquote>
  <p>😭，臣妾做不到。</p>
</blockquote>

<p>但可以借助 nginx 等产品完成。</p>

<p>事实上，一些第三方的 ingress 产品，以及 Service Mesh 就都可以解决这些问题的。</p>

<p>如果对延迟不敏感，可以考虑直接上 Istio 或 Linkerd 等 Service Mesh 产品。</p>]]></content><author><name>啤酒云</name></author><category term="container," /><category term="devops" /><category term="kubernetes," /><category term="蓝绿," /><category term="灰度," /><category term="容器" /><summary type="html"><![CDATA[在基本的 K8S 中，没有提供方便细粒度的流量分配策略。但借助 K8S 的 selector 机制，仍然可以实现简单的灰度和蓝绿发布。]]></summary></entry><entry><title type="html">Apache Airflow 入门</title><link href="https://youbug.cn/2022/12/airflow-start.html" rel="alternate" type="text/html" title="Apache Airflow 入门" /><published>2022-12-01T04:57:44+00:00</published><updated>2022-12-01T04:57:44+00:00</updated><id>https://youbug.cn/2022/12/airflow-start</id><content type="html" xml:base="https://youbug.cn/2022/12/airflow-start.html"><![CDATA[<p>从小白到略知一二。</p>

<h2 id="背景">背景</h2>

<p>都说 Airflow 很强大，用 python 语言写 DAG。</p>

<p>对于我，语言不重要，了解他的运行架构和设计思想更重要。</p>

<p>先安装一个单机版本试试。</p>

<h2 id="安装">安装</h2>

<p>在 Mac M1 上默认安装各种编译错误，然后使用 <strong>conda</strong> 重新安装了 python，终于搞定。</p>

<p>安装过程复制自官方：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">AIRFLOW_VERSION</span><span class="o">=</span>2.4.3
<span class="nv">PYTHON_VERSION</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>python <span class="nt">--version</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">" "</span> <span class="nt">-f</span> 2 | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">"."</span> <span class="nt">-f</span> 1-2<span class="si">)</span><span class="s2">"</span>
<span class="nv">CONSTRAINT_URL</span><span class="o">=</span><span class="s2">"https://raw.githubusercontent.com/apache/airflow/constraints-</span><span class="k">${</span><span class="nv">AIRFLOW_VERSION</span><span class="k">}</span><span class="s2">/constraints-</span><span class="k">${</span><span class="nv">PYTHON_VERSION</span><span class="k">}</span><span class="s2">.txt"</span>
pip <span class="nb">install</span> <span class="s2">"apache-airflow==</span><span class="k">${</span><span class="nv">AIRFLOW_VERSION</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--constraint</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CONSTRAINT_URL</span><span class="k">}</span><span class="s2">"</span>
</code></pre></div></div>

<p>启动一个开发版本试试：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow standalone
</code></pre></div></div>

<p>成功启动后，控制台打印了一些有用信息。本机 Web 端默认为： <code class="language-plaintext highlighter-rouge">http://localhost:8080</code>。</p>

<p>登录账号也在控制台中打印。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>standalone |
standalone | Airflow is ready
standalone | Login with username: admin  password: xxxxxxxxxx
standalone | Airflow Standalone is <span class="k">for </span>development purposes only. Do not use this <span class="k">in </span>production!
standalone |
</code></pre></div></div>

<p>进入之后，有很多现成的 DAG，一头雾水。</p>

<p>或者<strong>走下面这个步骤，都差不多。</strong></p>

<p>初始化数据库：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow db init
</code></pre></div></div>

<p>这个过程中，有个警告，是说要安装 kubernetes 的 excutor。顺手给他装一下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>apache-airflow-providers-cncf-kubernetes
</code></pre></div></div>

<p>创建一个新账号</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow <span class="nb">users </span>create <span class="se">\</span>
    <span class="nt">--username</span> xie <span class="se">\</span>
    <span class="nt">--firstname</span> Cloudbeer <span class="se">\</span>
    <span class="nt">--lastname</span> Xie <span class="se">\</span>
    <span class="nt">--role</span> Admin <span class="se">\</span>
    <span class="nt">--email</span> cloudbeer@gmail.com
</code></pre></div></div>

<p>换个端口启动 Web Server</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow webserver <span class="nt">--port</span> 9000
</code></pre></div></div>

<p>换个 终端窗口启动 Scheduler：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow scheduler
</code></pre></div></div>

<h2 id="编写第一个-dag">编写第一个 DAG</h2>

<p>Airflow 的 hello world 代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
<span class="kn">from</span> <span class="nn">textwrap</span> <span class="kn">import</span> <span class="n">dedent</span>
<span class="kn">from</span> <span class="nn">airflow</span> <span class="kn">import</span> <span class="n">DAG</span>

<span class="kn">from</span> <span class="nn">airflow.operators.bash</span> <span class="kn">import</span> <span class="n">BashOperator</span>
<span class="k">with</span> <span class="n">DAG</span><span class="p">(</span>
    <span class="s">'hellodag'</span><span class="p">,</span>
    <span class="n">default_args</span><span class="o">=</span><span class="p">{</span>
        <span class="s">'depends_on_past'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="s">'email'</span><span class="p">:</span> <span class="p">[</span><span class="s">'cloudbeer@gmail.com'</span><span class="p">],</span>
        <span class="s">'email_on_failure'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="s">'email_on_retry'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="s">'retries'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="s">'retry_delay'</span><span class="p">:</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>
    <span class="p">},</span>
    <span class="n">description</span><span class="o">=</span><span class="s">'这是一个简单的 DAG'</span><span class="p">,</span>
    <span class="n">schedule</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="n">start_date</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
    <span class="n">catchup</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="s">'example'</span><span class="p">],</span>
<span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'print_date'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'date'</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">t2</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'sleep'</span><span class="p">,</span>
        <span class="n">depends_on_past</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'sleep 5'</span><span class="p">,</span>
        <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">t1</span><span class="p">.</span><span class="n">doc_md</span> <span class="o">=</span> <span class="n">dedent</span><span class="p">(</span>
        <span class="s">"""</span><span class="se">\
</span><span class="s">    #### Task Documentation
    You can document your task using the attributes `doc_md` (markdown),
    `doc` (plain text), `doc_rst`, `doc_json`, `doc_yaml` which gets
    rendered in the UI's Task Instance Details page.
    ![img](http://montcs.bloomu.edu/~bobmon/Semesters/2012-01/491/import%20soul.png)
    **Image Credit:** Randall Munroe, [XKCD](https://xkcd.com/license.html)
    """</span>
    <span class="p">)</span>

    <span class="n">dag</span><span class="p">.</span><span class="n">doc_md</span> <span class="o">=</span> <span class="s">"""
    这是一个简单的 DAG。
    """</span> 


    <span class="n">templated_command</span> <span class="o">=</span> <span class="n">dedent</span><span class="p">(</span>
        <span class="s">"""
    {% for i in range(5) %}
        echo "{{ ds }}"
        echo "{{ macros.ds_add(ds, 7)}}"
    {% endfor %}
        """</span>
    <span class="p">)</span>
    <span class="n">t3</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'templated'</span><span class="p">,</span>
        <span class="n">depends_on_past</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="n">templated_command</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">t1</span> <span class="o">&gt;&gt;</span> <span class="p">[</span><span class="n">t2</span><span class="p">,</span> <span class="n">t3</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>上面的代码修改 DAG 的名字为 hellodag</li>
  <li>文件名命名为 hellodag.py</li>
</ul>

<p>将这个文件放到 ~/airflow/dags 目录下。</p>

<p>使用 python 验证一下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python hellodag.py
</code></pre></div></div>

<p>没有错误。</p>

<h2 id="airflow-任务测试">Airflow 任务测试</h2>

<p>dag 文件放到了对应的目录了，现在查看一下 dags。（又要开一个终端）</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow dags list
</code></pre></div></div>

<ul>
  <li>hellodag 已经出现在列表了。</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow tasks list hellodag <span class="nt">--tree</span>
</code></pre></div></div>

<ul>
  <li>这个命令可以看到这个 dag 包含了三个任务 <code class="language-plaintext highlighter-rouge">print_date</code>, <code class="language-plaintext highlighter-rouge">sleep</code>, <code class="language-plaintext highlighter-rouge">templated</code></li>
  <li>–tree 显示了依赖关系。</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Task<span class="o">(</span>BashOperator<span class="o">)</span>: print_date&gt;
    &lt;Task<span class="o">(</span>BashOperator<span class="o">)</span>: <span class="nb">sleep</span><span class="o">&gt;</span>
    &lt;Task<span class="o">(</span>BashOperator<span class="o">)</span>: templated&gt;
</code></pre></div></div>

<p>测试一下任务：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow tasks <span class="nb">test </span>hellodag print_date 2015-06-01

airflow tasks <span class="nb">test </span>hellodag <span class="nb">sleep </span>2015-06-01

airflow tasks <span class="nb">test </span>hellodag templated 2015-06-01
</code></pre></div></div>

<p>运行 backfill (回填)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow dags backfill hellodag <span class="se">\</span>
    <span class="nt">--start-date</span> 2015-06-01 <span class="se">\</span>
    <span class="nt">--end-date</span> 2015-06-07
</code></pre></div></div>

<p>好了。入了个门。我去研究 Airflow in K8S 了。</p>]]></content><author><name>啤酒云</name></author><category term="data" /><category term="调度平台," /><category term="大数据," /><category term="airflow" /><summary type="html"><![CDATA[从小白到略知一二。]]></summary></entry><entry><title type="html">使用 CDK 安装 Karpenter 新版</title><link href="https://youbug.cn/2022/11/cdk-install-karpenter-1.9.2.html" rel="alternate" type="text/html" title="使用 CDK 安装 Karpenter 新版" /><published>2022-11-30T13:49:06+00:00</published><updated>2022-11-30T13:49:06+00:00</updated><id>https://youbug.cn/2022/11/cdk-install-karpenter-1.9.2</id><content type="html" xml:base="https://youbug.cn/2022/11/cdk-install-karpenter-1.9.2.html"><![CDATA[<p>本文记录了使用 CDK (2.53.0) 安装 Karpenter (v0.19.2) 的方法。</p>

<h2 id="cdk-和-karpenter-分别是什么">CDK 和 Karpenter 分别是什么</h2>

<p>这个问题先不细说了吧，后面会发文章补。</p>

<p>可以去相应官方网站查看：</p>

<p><a href="https://aws.amazon.com/cn/cdk/">CDK</a></p>

<p><a href="https://karpenter.sh/">Karpenter</a></p>

<p>反正好有一比：</p>

<ul>
  <li>CDK 类似于 terraform。</li>
  <li>Karpenter 就是 K8S 的节点伸缩器。</li>
</ul>

<h2 id="适用性">适用性</h2>

<p>CDK 和 Karpenter 当下这个时间点正在以天为单位 <strong>疯狂发版</strong>，所以这篇文章具有时效性。</p>

<p>当前最新版本为：</p>

<p>CDK 的版本为：<strong>2.53.0</strong></p>

<p>Karpenter 的版本为： <strong>v0.19.2</strong></p>

<h2 id="show-me-the-code">Show me the code</h2>

<p>先上代码为敬！</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Cluster</span><span class="p">,</span> <span class="nx">HelmChart</span><span class="p">,</span> <span class="nx">KubernetesManifest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-cdk-lib/aws-eks</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">CfnInstanceProfile</span><span class="p">,</span> <span class="nx">CfnServiceLinkedRole</span><span class="p">,</span> <span class="nx">IRole</span><span class="p">,</span> <span class="nx">ManagedPolicy</span><span class="p">,</span> <span class="nx">PolicyDocument</span><span class="p">,</span> <span class="nx">Role</span><span class="p">,</span> <span class="nx">ServicePrincipal</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-cdk-lib/aws-iam</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">KarpenterControllerPolicy</span> <span class="o">=</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">Version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2012-10-17</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">Statement</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">Effect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Allow</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">Action</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">ec2:CreateLaunchTemplate</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:CreateFleet</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:RunInstances</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:CreateTags</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:TerminateInstances</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DeleteLaunchTemplate</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeLaunchTemplates</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeInstances</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeSecurityGroups</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeSubnets</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeImages</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeInstanceTypes</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeInstanceTypeOfferings</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeAvailabilityZones</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ssm:GetParameter</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">pricing:GetProducts</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">ec2:DescribeSpotPriceHistory</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">sqs:DeleteMessage</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">sqs:GetQueueUrl</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">sqs:GetQueueAttributes</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">sqs:ReceiveMessage</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">iam:PassRole</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">],</span>
      <span class="dl">"</span><span class="s2">Resource</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">};</span>


<span class="k">export</span> <span class="kd">class</span> <span class="nx">KarpenterAddon</span> <span class="p">{</span>
  <span class="nl">cluster</span><span class="p">:</span> <span class="nx">Cluster</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">cluster</span><span class="p">:</span> <span class="nx">Cluster</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span> <span class="o">=</span> <span class="nx">cluster</span><span class="p">;</span>


    <span class="k">this</span><span class="p">.</span><span class="nx">createNodeRole</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">createKarpeter</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">createNodeRole</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">new</span> <span class="nx">CfnServiceLinkedRole</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span> <span class="dl">'</span><span class="s1">SpotSLR</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">awsServiceName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">spot.amazonaws.com</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">karpenterNodeRole</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Role</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span> <span class="dl">'</span><span class="s1">karpenter-node-role</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">assumedBy</span><span class="p">:</span> <span class="k">new</span> <span class="nx">ServicePrincipal</span><span class="p">(</span><span class="s2">`ec2.</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">urlSuffix</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span>
      <span class="na">managedPolicies</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">ManagedPolicy</span><span class="p">.</span><span class="nx">fromAwsManagedPolicyName</span><span class="p">(</span><span class="dl">"</span><span class="s2">AmazonEKSWorkerNodePolicy</span><span class="dl">"</span><span class="p">),</span>
        <span class="nx">ManagedPolicy</span><span class="p">.</span><span class="nx">fromAwsManagedPolicyName</span><span class="p">(</span><span class="dl">"</span><span class="s2">AmazonEKS_CNI_Policy</span><span class="dl">"</span><span class="p">),</span>
        <span class="nx">ManagedPolicy</span><span class="p">.</span><span class="nx">fromAwsManagedPolicyName</span><span class="p">(</span><span class="dl">"</span><span class="s2">AmazonEC2ContainerRegistryReadOnly</span><span class="dl">"</span><span class="p">),</span>
        <span class="nx">ManagedPolicy</span><span class="p">.</span><span class="nx">fromAwsManagedPolicyName</span><span class="p">(</span><span class="dl">"</span><span class="s2">AmazonSSMManagedInstanceCore</span><span class="dl">"</span><span class="p">),</span>
      <span class="p">],</span>
      <span class="na">roleName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">KarpenterNodeRole-</span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">clusterName</span>
    <span class="p">});</span>

    <span class="k">new</span> <span class="nx">CfnInstanceProfile</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span> <span class="dl">'</span><span class="s1">karpenter</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">roles</span><span class="p">:</span> <span class="p">[</span><span class="nx">karpenterNodeRole</span><span class="p">.</span><span class="nx">roleName</span><span class="p">],</span>
      <span class="na">instanceProfileName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">KarpenterNodeInstanceProfile-</span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">clusterName</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">awsAuth</span><span class="p">.</span><span class="nx">addRoleMapping</span><span class="p">(</span><span class="nx">karpenterNodeRole</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">groups</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">system:bootstrapper</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">system:nodes</span><span class="dl">'</span><span class="p">],</span>
      <span class="na">username</span><span class="p">:</span> <span class="dl">'</span><span class="s1">system:node:</span><span class="dl">'</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">createKarpeter</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">ns</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KubernetesManifest</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span> <span class="dl">"</span><span class="s2">karpenter-ns</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">cluster</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span>
      <span class="na">manifest</span><span class="p">:</span> <span class="p">[{</span>
        <span class="na">apiVersion</span><span class="p">:</span> <span class="dl">'</span><span class="s1">v1</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Namespace</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">metadata</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">karpenter</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}],</span>
      <span class="na">overwrite</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">prune</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">sa</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">addServiceAccount</span><span class="p">(</span><span class="dl">"</span><span class="s2">karpenter-sa</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">karpenter</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">namespace</span><span class="p">:</span> <span class="dl">'</span><span class="s1">karpenter</span><span class="dl">'</span>
    <span class="p">});</span>
    <span class="nx">sa</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">addManagedPolicy</span><span class="p">(</span><span class="k">new</span> <span class="nx">ManagedPolicy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span> <span class="dl">'</span><span class="s1">karpenter-node-policy</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">document</span><span class="p">:</span> <span class="nx">PolicyDocument</span><span class="p">.</span><span class="nx">fromJson</span><span class="p">(</span><span class="nx">KarpenterControllerPolicy</span><span class="p">),</span>
    <span class="p">}))</span>
    <span class="nx">sa</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">addDependency</span><span class="p">(</span><span class="nx">ns</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">helm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HelmChart</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span> <span class="dl">"</span><span class="s2">karpenter-chart</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">cluster</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">,</span>
      <span class="na">namespace</span><span class="p">:</span> <span class="dl">'</span><span class="s1">karpenter</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">chart</span><span class="p">:</span> <span class="dl">'</span><span class="s1">oci://public.ecr.aws/karpenter/karpenter</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">repository</span><span class="p">:</span> <span class="dl">'</span><span class="s1">oci://public.ecr.aws/karpenter/karpenter</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">release</span><span class="p">:</span> <span class="dl">"</span><span class="s2">karpenter</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">version</span><span class="p">:</span> <span class="dl">"</span><span class="s2">v0.19.2</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">values</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">serviceAccount</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">create</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">karpenter</span><span class="dl">"</span>
        <span class="p">},</span>
        <span class="dl">"</span><span class="s2">serviceAccount.annotations</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="dl">"</span><span class="s2">eks.amazonaws.com/role-arn</span><span class="dl">"</span><span class="p">:</span> <span class="nx">sa</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">roleArn</span>
        <span class="p">},</span>
        <span class="na">settings</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">aws</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">clusterEndpoint</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">clusterEndpoint</span><span class="p">,</span>
            <span class="na">clusterName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">clusterName</span><span class="p">,</span>
            <span class="na">defaultInstanceProfile</span><span class="p">:</span> <span class="dl">'</span><span class="s1">KarpenterNodeInstanceProfile-</span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">clusterName</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>
    <span class="nx">helm</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">addDependency</span><span class="p">(</span><span class="nx">ns</span><span class="p">);</span>
    <span class="nx">helm</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">addDependency</span><span class="p">(</span><span class="nx">sa</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>上面的代码大概过程如下：</p>

<ul>
  <li>创建一个角色，这个拥有角色有 <code class="language-plaintext highlighter-rouge">AmazonEKSWorkerNodePolicy</code> <code class="language-plaintext highlighter-rouge">AmazonEKS_CNI_Policy</code> <code class="language-plaintext highlighter-rouge">AmazonEC2ContainerRegistryReadOnly</code> <code class="language-plaintext highlighter-rouge">AmazonSSMManagedInstanceCore</code> 几个预设策略。 未来 Kapenter 会将这个角色赋予 Node。</li>
  <li>在 karpenter 这个命名空间下创建一系列资源，包括：
    <ul>
      <li>IRSA：将 K8S 的 Service Account 与 IAM 的 Role 建立关联。</li>
      <li>通过 Helm 安装 Karpenter。</li>
    </ul>
  </li>
</ul>

<h2 id="上面代码的坑">上面代码的坑</h2>

<p>坑主要集中在 Helm 图样的安装：</p>

<ol>
  <li>CDK 的 HelmChart 对于 oci 库的支持处于起步阶段，经过多次试验以及阅读相关源码，才确认写法：<code class="language-plaintext highlighter-rouge">chart: 'oci://public.ecr.aws/karpenter/karpenter'</code>，<code class="language-plaintext highlighter-rouge">repository: 'oci://public.ecr.aws/karpenter/karpenter'</code>。</li>
  <li>Karpenter HelmChart 对于 values 的写法，这个和官网不一样，如果按照 terraform 的写法会完全无效，terraform 的写法是：”settings.aws.clusterEndpoint”，而这里的写法<strong>必须是</strong> JSON 格式。</li>
</ol>]]></content><author><name>啤酒云</name></author><category term="container," /><category term="iac," /><category term="aws" /><category term="kubernetes," /><category term="自动伸缩," /><category term="karpenter," /><category term="cdk," /><category term="iam" /><summary type="html"><![CDATA[本文记录了使用 CDK (2.53.0) 安装 Karpenter (v0.19.2) 的方法。]]></summary></entry></feed>