<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://youbug.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://youbug.cn/" rel="alternate" type="text/html" /><updated>2023-02-12T11:41:58+00:00</updated><id>https://youbug.cn/feed.xml</id><title type="html">YouBug</title><subtitle>分享，记录而已</subtitle><entry><title type="html">企业微信集成 ChatGPT 开发笔记</title><link href="https://youbug.cn/2023/02/wecom-chatgpt.html" rel="alternate" type="text/html" title="企业微信集成 ChatGPT 开发笔记" /><published>2023-02-12T10:09:44+00:00</published><updated>2023-02-12T10:09:44+00:00</updated><id>https://youbug.cn/2023/02/wecom-chatgpt</id><content type="html" xml:base="https://youbug.cn/2023/02/wecom-chatgpt.html"><![CDATA[<p>原来是想使用企业微信的机器人来集成 ChatGPT，但… 这玩意不支持收消息，只能推送消息，所以只能另寻他法。</p>

<h2 id="思路">思路</h2>

<p>可以收消息的途径：企业应用。</p>

<p>可以发消息的：企业应用的推送，群机器人。</p>

<h2 id="过程及重点代码">过程及重点代码</h2>

<p>步骤如下：</p>

<h3 id="新建企业应用">新建企业应用</h3>

<p>限制条件：必须是认证的企业，有认证过的相关域名。</p>

<p>新建一个企业微信的企业内部应用，并启用接收消息的 API 功能。</p>

<p>第一步必须有一个认证的过程，需要验证有效性，你必须把他的结果解密出来发给他。这个过程是他发送 GET 请求到你预定的 URL 的。</p>

<p>相关的验证代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">//计算签名，如果计算结果和他给的结果一致就是有效的</span>
  <span class="na">computeSign</span><span class="p">:</span> <span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">msg_encrypt</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">tmpArr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">token</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">msg_encrypt</span><span class="p">];</span>
    <span class="k">return</span> <span class="nx">sha1</span><span class="p">(</span><span class="nx">tmpArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
  <span class="p">},</span>
  <span class="na">decode</span><span class="p">:</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encodingAESKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">aesKey</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">encodingAESKey</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">=</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">aesCipher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipheriv</span><span class="p">(</span><span class="dl">"</span><span class="s2">aes-256-cbc</span><span class="dl">"</span><span class="p">,</span> <span class="nx">aesKey</span><span class="p">,</span> <span class="nx">aesKey</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">));</span>
    <span class="nx">aesCipher</span><span class="p">.</span><span class="nx">setAutoPadding</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">decipheredBuff</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">aesCipher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">),</span> <span class="nx">aesCipher</span><span class="p">.</span><span class="nx">final</span><span class="p">()]);</span>
    <span class="nx">decipheredBuff</span> <span class="o">=</span> <span class="nx">PKCS7Decoder</span><span class="p">(</span><span class="nx">decipheredBuff</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">len_netOrder_corpid</span> <span class="o">=</span> <span class="nx">decipheredBuff</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">msg_len</span> <span class="o">=</span> <span class="nx">len_netOrder_corpid</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nx">readUInt32BE</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">len_netOrder_corpid</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">msg_len</span> <span class="o">+</span> <span class="mi">4</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span> 
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">sha1</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">md5sum</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="dl">'</span><span class="s1">sha1</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">md5sum</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">ciphertext</span> <span class="o">=</span> <span class="nx">md5sum</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="dl">'</span><span class="s1">hex</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">ciphertext</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">PKCS7Decoder</span><span class="p">(</span><span class="nx">buff</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">pad</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">[</span><span class="nx">buff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pad</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">pad</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pad</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">buff</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">buff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">pad</span><span class="p">);</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">QiWeiController</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">async</span> <span class="nx">verifySignature</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">app</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">msg_signature</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">echostr</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">mySign</span> <span class="o">=</span> <span class="nx">computeSign</span><span class="p">(</span><span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">echostr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">mySign</span> <span class="o">!=</span> <span class="nx">msg_signature</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Invalid signature.</span><span class="dl">"</span><span class="p">;</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">echostr</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span><span class="p">);</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>请注意，上述代码有可能并不在一个代码文件中。</li>
</ul>

<h3 id="接收消息">接收消息</h3>

<p>这个应用创建了之后，在客户端的工作台能看到这个应用，你可以和这个应用聊天，发给这个应用的消息都会被接受。发送的信息会被 Post 到你定义的 URL。</p>

<p>接收信息代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">decodeIncomingMsg</span><span class="p">:</span> <span class="p">(</span><span class="nx">encMsg</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ptToUserName</span> <span class="o">=</span> <span class="sr">/&lt;ToUserName&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">ToUserName&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptFromUserName</span> <span class="o">=</span> <span class="sr">/&lt;FromUserName&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">FromUserName&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptContent</span> <span class="o">=</span> <span class="sr">/&lt;Content&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">Content&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">realMsg</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">encMsg</span><span class="p">,</span> <span class="nx">key</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">resMsg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">ToUserName</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptToUserName</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
      <span class="na">FromUserName</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptFromUserName</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
      <span class="na">Content</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptContent</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">};</span>
    <span class="c1">//这里可以修改到 MQ 中，并最终落盘</span>
    <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">resMsg</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">resMsg</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">QiWeiController</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">async</span> <span class="nx">incoming</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">app</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">msg_signature</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptEncMsg</span> <span class="o">=</span> <span class="sr">/&lt;Encrypt&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">Encrypt&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">found</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptEncMsg</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">found</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">mySign</span> <span class="o">=</span> <span class="nx">computeSign</span><span class="p">(</span><span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">mySign</span> <span class="o">==</span> <span class="nx">msg_signature</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">decodeIncomingMsg</span><span class="p">(</span><span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>接收到信息之后，讲信息解码出来，放到一个数组(队列) 中，供其他 deamon 方法调用。</li>
</ul>

<h3 id="请求-chatgpt">请求 ChatGPT</h3>

<p>使用了 chatpgt 这个 npm 包，调用非常简单。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">qiwei</span><span class="o">=</span><span class="p">{</span>

  <span class="na">chatdeamon</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">paimon</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">tarMsg</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="c1">// tarMsg &amp;&amp; console.log(tarMsg);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">tarMsg</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">conversationId</span> <span class="o">=</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">ToUserName</span><span class="p">;</span>
        <span class="kd">let</span> <span class="nx">chatOpts</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">timeoutMs</span><span class="p">:</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
          <span class="nx">conversationId</span>
        <span class="p">};</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">qiwei</span><span class="p">.</span><span class="nx">parentMessageId</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">chatOpts</span><span class="p">.</span><span class="nx">parentMessageId</span> <span class="o">=</span> <span class="nx">parentMessageId</span><span class="p">;</span>
        <span class="p">};</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">输入:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="dl">"</span><span class="s2">堆积量:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">paimon</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="nx">chatOpts</span><span class="p">);</span>
        <span class="nx">parentMessageId</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">投送结果：</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
        <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">sendToPerson</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">);</span>
        <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">paimonSendToRoom</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>写了死循环处理消息，这里 的 app 是 eggjs 的上下文的，用于取配置。</li>
  <li>ChatGPT 的 API 经常限流，这里处理成了同步调用，一条一条往下进行。</li>
  <li>代码中 paimon 是一个 ChatGPT 实例。</li>
</ul>

<h3 id="分发消息">分发消息</h3>

<p>上面的代码可以看到拿到结果后分别分发到了个人和机器人。</p>

<p>发送到个人可以在直接在单聊对话中看到结果，同时可以让企业微信机器人分发到群里。</p>

<p>分发到个人的代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">getAccessToken</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">access_token</span><span class="dl">"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">expire_time</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">expire_time</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">expire_time</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">current</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">isExpire</span> <span class="o">=</span> <span class="nx">expire_time</span> <span class="o">&lt;</span> <span class="nx">current</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isExpire</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">access_response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="s2">`https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_CORP_ID</span><span class="p">}</span><span class="s2">&amp;corpsecret=</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_APP_SECRET</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span>
    <span class="p">});</span>
    <span class="kd">let</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">access_token</span><span class="p">,</span> <span class="nx">expires_in</span>
    <span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">access_response</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">access_token</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">access_token</span><span class="p">,</span>
        <span class="na">expire_time</span><span class="p">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="nx">expires_in</span>
      <span class="p">};</span>
      <span class="k">return</span> <span class="nx">access_token</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`获取 access_token 失败`</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">access_response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">sendToPerson</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">access_token</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">getAccessToken</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=</span><span class="p">${</span><span class="nx">access_token</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">touser</span><span class="p">:</span> <span class="nx">to</span><span class="p">,</span>
      <span class="na">msgtype</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">agentid</span><span class="p">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_APP_AGENT_ID</span><span class="p">,</span>
      <span class="na">text</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">content</span><span class="p">:</span> <span class="nx">a</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">msg</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">个人投送完成！</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>直接调用 信息发送 API 完成。</li>
</ul>

<p>使用群机器人完成发送</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>

  <span class="na">paimonSendToRoom</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">q</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">msgtype</span><span class="p">:</span> <span class="dl">"</span><span class="s2">markdown</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">markdown</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">content</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">to</span><span class="p">}</span><span class="s2">: **</span><span class="p">${</span><span class="nx">q</span><span class="p">}</span><span class="s2">**
---
&lt;font color="warning"&gt;</span><span class="p">${</span><span class="nx">a</span><span class="p">}</span><span class="s2">&lt;/font&gt;`</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_BOT_WEBHOOK</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">msg</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">机器人投送完成！</span><span class="dl">"</span><span class="p">);</span>

  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>这个 API 很简单，直接把消息组装好丢给 webhook 就行了。表扬一下这个 API。</li>
</ul>

<h2 id="总结一下">总结一下</h2>

<p>就不画时序图了。</p>

<p>整体的过程是：</p>

<ul>
  <li>用户给企业微信 APP 发信息。</li>
  <li>APP 收到信息丢入队列中，包含了文本，谁发的等信息。</li>
  <li>另一个进程获取从队列中获取一个记录，调用 openai API 得到结果。</li>
  <li>使用微信的消息 API 将结果发给问问题的人。</li>
  <li>使用群机器人的 WebHook 将结果发送给相应的群。</li>
</ul>

<h2 id="吐槽">吐槽</h2>

<p>1 隔壁的钉钉和飞书的机器人都能直接收发消息，为啥你不行。</p>

<p>2 企业微信的 API 设计，有 XML 的，有 Json 的，API 调用方式也是千奇百怪。收消息的那个签名验证搞那么复杂，示例和 SDK 还不全。</p>

<p>3 文档真乱，要到处去找。</p>

<p>4 哈哈，我的机器人名字叫 派萌/pimon。</p>

<hr />

<p>参考链接：</p>

<p><a href="https://developer.work.weixin.qq.com/document/path/91770">https://developer.work.weixin.qq.com/document/path/91770</a></p>

<p><a href="https://developer.work.weixin.qq.com/document/10514">https://developer.work.weixin.qq.com/document/10514</a></p>

<p><a href="https://www.npmjs.com/package/chatgpt">https://www.npmjs.com/package/chatgpt</a></p>

<p><a href="https://developer.work.weixin.qq.com/document/path/90236">https://developer.work.weixin.qq.com/document/path/90236</a></p>

<p><a href="https://github.com/WecomTeam/InnerAppCodeSample/tree/main/server">https://github.com/WecomTeam/InnerAppCodeSample/tree/main/server</a></p>]]></content><author><name>啤酒云</name></author><category term="tucao" /><summary type="html"><![CDATA[原来是想使用企业微信的机器人来集成 ChatGPT，但… 这玩意不支持收消息，只能推送消息，所以只能另寻他法。]]></summary></entry><entry><title type="html">一个现成的 ChatGPT 微信机器人</title><link href="https://youbug.cn/2023/02/chatgpt-wechat-bot.html" rel="alternate" type="text/html" title="一个现成的 ChatGPT 微信机器人" /><published>2023-02-09T11:09:00+00:00</published><updated>2023-02-09T11:09:00+00:00</updated><id>https://youbug.cn/2023/02/chatgpt-wechat-bot</id><content type="html" xml:base="https://youbug.cn/2023/02/chatgpt-wechat-bot.html"><![CDATA[<p>本文是一个集成了 ChatGPT 的简单微信机器人的部署文档，使用了现有的 github 仓库，并进行适当修改，并发布成公共镜像包。当前文档说明为 2.0 镜像包。</p>

<h2 id="说明">说明</h2>

<p>在这个项目（<a href="https://github.com/wangrongding/wechat-bot">https://github.com/wangrongding/wechat-bot</a>）的基础上进行的修改：</p>

<ul>
  <li>从 openai 改回了 chatgpt 的调用。</li>
  <li>修改了 chatgpt 的对话模型，现在有两种机器人: 群机器人和私人机器人。</li>
  <li>在群里，用群机器人开头的文字会训练群机器人，用私人机器人名字开头的可以训练私有机器人。</li>
  <li>与机器人私聊也要以机器人的名字开头，私聊的时候用两种机器人名字开头都会训练私有机器人。</li>
  <li>增加了错误处理，当出错的时候，现在机器人能做出响应了。</li>
</ul>

<p>镜像地址：</p>

<p><a href="https://hub.docker.com/r/cloudbeer/wx-chatbot/tags">https://hub.docker.com/r/cloudbeer/wx-chatbot/tags</a></p>

<h2 id="部署">部署</h2>

<h3 id="在-k8s-中部署">在 K8S 中部署</h3>

<p>部署 YAML 参考如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">cloudbeer/wx-chatbot:2.0</span>
          <span class="na">env</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">OPENAI_API_KEY</span>
              <span class="na">value</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">your-api-key</span><span class="pi">]</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">BOT_NAME</span>
              <span class="na">value</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">your-bot-name</span><span class="pi">]</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ROOM_BOT_NAME</span>
              <span class="na">value</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">your-room-bot-name</span><span class="pi">]</span>
          <span class="na">command</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">node</span>
            <span class="pi">-</span> <span class="s">index.js</span>
</code></pre></div></div>

<p>修改上面代码中的环境变量 <code class="language-plaintext highlighter-rouge">[your-api-key]</code>, <code class="language-plaintext highlighter-rouge">[your-bot-name]</code>，<code class="language-plaintext highlighter-rouge">[your-room-bot-name]</code>：</p>

<ul>
  <li>
    <p>OPENAI_API_KEY: 在 openai 网站申请的 API_KEY，当前申请地址是： <a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p>
  </li>
  <li>
    <p>BOT_NAME: 私人机器人的名字，当发送以这个名字开头的文字的时候，会调用 chatgpt，如 BOT_NAME 为 <code class="language-plaintext highlighter-rouge">hisiri</code> 的时候，发送：<code class="language-plaintext highlighter-rouge">hisiri 你好</code> 会得到 ChatGPT 的响应。</p>
  </li>
  <li>
    <p>ROOM_BOT_NAME: 群机器人名字，这个机器人的会话是基于群的，群内的所有人都可以训练同一个机器人。</p>
  </li>
  <li>
    <p>你可以在群里分别和两个机器人对话。</p>
  </li>
</ul>

<p>部署完成之后，使用 logs 命令查看二维码，相关的命令如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs wx-chatbot-xxxxxxx <span class="nt">-f</span>
</code></pre></div></div>

<ul>
  <li>-f 可以持续打印日志，查看控制台信息。</li>
  <li>使用微信扫码之后，当前扫码的微信会成为 ChatGPT 机器人。你可以和他私聊或者拉到群里。</li>
  <li>聊天的时候需要分别以 2 个机器人的名字开头才能做出响应。</li>
</ul>

<h2 id="docker-启动">Docker 启动</h2>

<p>Docker 启动不再赘述，使用如下命令即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">--name</span> wx-chatgpt-bot <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">OPENAI_API_KEY</span><span class="o">=</span>abc <span class="nt">-e</span> <span class="nv">BOT_NAME</span><span class="o">=</span>小米 <span class="nt">-e</span> <span class="nv">ROOM_BOT_NAME</span><span class="o">=</span>大米 <span class="se">\</span>
  cloudbeer/wx-chatbot:2.0 node index.js
</code></pre></div></div>

<ul>
  <li>记得修改三个环境变量：<code class="language-plaintext highlighter-rouge">-e OPENAI_API_KEY=abc -e BOT_NAME=@siri</code>。</li>
  <li>注意：此命令在 MAC 启动有bug。用 linux 系统无虞。</li>
</ul>

<h2 id="问题和改进点">问题和改进点</h2>

<ul>
  <li>免费账号 ChatGPT 测会经常报 429 Too Many Requests 的错误。</li>
  <li>微信可能会被封，建议使用新注册的微信小号作为机器人。（暂且不清楚微信侧触发机制）</li>
  <li>重启应用会重新加载微信的会话，导致重复调用 ChatGPT API，并由可能导致微信被封，重启应用的时候多等一会儿，让会话过期，或者修改两个bot 的名字后重启。</li>
</ul>]]></content><author><name>啤酒云</name></author><category term="container," /><category term="aws" /><category term="容器" /><summary type="html"><![CDATA[本文是一个集成了 ChatGPT 的简单微信机器人的部署文档，使用了现有的 github 仓库，并进行适当修改，并发布成公共镜像包。当前文档说明为 2.0 镜像包。]]></summary></entry><entry><title type="html">调度 Jenkins 任务到 Karpenter 节点池</title><link href="https://youbug.cn/2023/01/jenkins-job-with-karpenter.html" rel="alternate" type="text/html" title="调度 Jenkins 任务到 Karpenter 节点池" /><published>2023-01-02T07:12:33+00:00</published><updated>2023-01-02T07:12:33+00:00</updated><id>https://youbug.cn/2023/01/jenkins-job-with-karpenter</id><content type="html" xml:base="https://youbug.cn/2023/01/jenkins-job-with-karpenter.html"><![CDATA[<p>本文介绍了如何调度 Jenkins 任务到 EKS 集群的 Karpenter 虚拟节点。Karpenter 强大的 Node 组织能力，可以最大程度节约任务运行的成本。</p>

<h2 id="插件配置">插件配置</h2>

<p>首先确认 Jenkins 的 Kubernetes 插件已经安装:</p>

<p>以管理员身份进入 Manage Jenkins -&gt; Manage Plugins, 搜索 Kubernetes，确认插件已经安装。</p>

<p>然后，进行 Node 配置:</p>

<p>进入 Manage Jenkins -&gt; Manage Nodes and Clouds -&gt; Config Clouds, 展开 Kubernetes Cloud details…</p>

<p>如果您的 Jenkins 安装在 EKS 集群里，并且工作任务也要调度到这个集群，可以按照如下配置：</p>

<ul>
  <li>Kubernetes 地址: <a href="https://kubernetes.default">https://kubernetes.default</a></li>
  <li>Kubernetes 命名空间: jenkins</li>
  <li>Jenkins 地址: <a href="http://jenkins.jenkins.svc.cluster.local:8080">http://jenkins.jenkins.svc.cluster.local:8080</a></li>
  <li>Jenkins 通道: jenkins-agent.jenkins.svc.cluster.local:50000</li>
</ul>

<p>如果是非本地集群，还需要配置合适的地址和权限。</p>

<h2 id="任务配置">任务配置</h2>

<p>现在在项目（业务）根目录编写如下的一个 Jenkinsfile：</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">podTemplate</span><span class="o">(</span><span class="nl">yaml:</span> <span class="s1">'''
    apiVersion: v1
    kind: Pod
    spec:
      nodeSelector:
        karpenter-arch: arm64
      containers:
      - name: maven
        image: maven
        command:
        - sleep
        args:
        - 99d
      - name: golang
        image: golang
        command:
        - sleep
        args:
        - 99d
'''</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">node</span><span class="o">(</span><span class="n">POD_LABEL</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">stage</span><span class="o">(</span><span class="s1">'Get a Maven project'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">container</span><span class="o">(</span><span class="s1">'maven'</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">stage</span><span class="o">(</span><span class="s1">'Build a Maven project'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sh</span> <span class="s1">'mvn --version'</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>

      <span class="n">stage</span><span class="o">(</span><span class="s1">'Get a Golang project'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">git</span> <span class="nl">url:</span> <span class="s1">'https://github.com/aws-code-sample/demo-jenkins.git'</span><span class="o">,</span> <span class="nl">branch:</span> <span class="s1">'main'</span>
        <span class="n">container</span><span class="o">(</span><span class="s1">'golang'</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">stage</span><span class="o">(</span><span class="s1">'Build a Go project'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sh</span> <span class="s1">'''
            go version
            ls
          '''</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上面的代码中 Pod 的描述中，有一个 <code class="language-plaintext highlighter-rouge">nodeSelector: {karpenter-arch: 'arm64'}</code> 的选择器，表示这个 Pod 要部署到有 karpenter-arch: ‘arm64’ 标签的节点。这个节点是通过 Karpenter 来定义的，具体如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.sh/v1alpha5</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Provisioner</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">arm-builder</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">karpenter.sh/capacity-type</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">spot"</span><span class="pi">]</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">kubernetes.io/arch"</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">arm64"</span><span class="pi">]</span>
  <span class="na">limits</span><span class="pi">:</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">cpu</span><span class="pi">:</span> <span class="m">1000</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">karpenter-arch</span><span class="pi">:</span> <span class="s">arm64</span>
  <span class="na">providerRef</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">ttlSecondsAfterEmpty</span><span class="pi">:</span> <span class="m">90</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.k8s.aws/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">AWSNodeTemplate</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">amiFamily</span><span class="pi">:</span> <span class="s">Bottlerocket</span>
  <span class="na">subnetSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">aws:cloudformation:stack-name"</span><span class="err">:</span> <span class="s">CdkEksPocStack</span>
    <span class="s">"aws-cdk:subnet-type": Private</span>
  <span class="na">securityGroupSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">kubernetes.io/cluster/poc-eks"</span><span class="err">:</span> <span class="s">owned</span>
</code></pre></div></div>

<p>通过 Karpenter，我们可以动态去购买 ARM + Spot 的实例。</p>

<p>现在在 Jenkins 的 Web UI 上新建一个 Jenkins 任务。</p>

<p>选择 “多分支流水线”，我的 demo 中主要字段配置如下：</p>

<p>分支源</p>

<ul>
  <li>项目仓库地址：<a href="https://github.com/aws-code-sample/demo-jenkins">https://github.com/aws-code-sample/demo-jenkins</a></li>
</ul>

<p>Build Configuration</p>

<ul>
  <li>
    <p>Mode: By Jenkinsfile</p>
  </li>
  <li>
    <p>脚本路径: Jenkinsfile</p>
  </li>
</ul>

<h2 id="运行结果">运行结果</h2>

<p>点击 “立即构建” 后，可以看到如下日志（部分）：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Started by user Jenkins Admin
 &gt; git rev-parse --resolve-git-dir /var/jenkins_home/caches/git-cfff1181f69195f8b158693b85c23bf9/.git # timeout=10
Setting origin to https://github.com/aws-code-sample/demo-jenkins
...
Seen branch in repository origin/main
Seen 1 remote branch
Obtained Jenkinsfile from b7f6d7cb4db0b89577a60faf5023d710798311e9
[Pipeline] Start of Pipeline
[Pipeline] podTemplate
[Pipeline] {
[Pipeline] node
Created Pod: kubernetes jenkins/demo-jenkins-main-10-1kw6t-mzbkc-6r4qk
Still waiting to schedule task
‘demo-jenkins-main-10-1kw6t-mzbkc-6r4qk’ is offline

Running on demo-jenkins-main-10-1kw6t-mzbkc-6r4qk in /home/jenkins/agent/workspace/demo-jenkins_main
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Get a Maven project)
[Pipeline] container
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build a Maven project)
[Pipeline] sh
+ mvn --version
Apache Maven 3.8.7 (b89d5959fcde851dcb1c8946a785a163f14e1e29)
Maven home: /usr/share/maven
Java version: 17.0.6, vendor: Eclipse Adoptium, runtime: /opt/java/openjdk
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "5.15.79", arch: "aarch64", family: "unix"
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Get a Golang project)
[Pipeline] git
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/aws-code-sample/demo-jenkins.git
 &gt; git init /home/jenkins/agent/workspace/demo-jenkins_main # timeout=10
Fetching upstream changes from https://github.com/aws-code-sample/demo-jenkins.git
 &gt; git --version # timeout=10
 &gt; git --version # 'git version 2.30.2'
 &gt; git fetch --tags --force --progress -- https://github.com/aws-code-sample/demo-jenkins.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Checking out Revision b7f6d7cb4db0b89577a60faf5023d710798311e9 (refs/remotes/origin/main)
 &gt; git config remote.origin.url https://github.com/aws-code-sample/demo-jenkins.git # timeout=10
 &gt; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git rev-parse refs/remotes/origin/main^{commit} # timeout=10
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f b7f6d7cb4db0b89577a60faf5023d710798311e9 # timeout=10
 &gt; git branch -a -v --no-abbrev # timeout=10
 &gt; git checkout -b main b7f6d7cb4db0b89577a60faf5023d710798311e9 # timeout=10
Commit message: "sh"
 &gt; git rev-list --no-walk b7f6d7cb4db0b89577a60faf5023d710798311e9 # timeout=10
[Pipeline] container
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build a Go project)
[Pipeline] sh
+ go version
go version go1.19.5 linux/arm64
+ ls
Jenkinsfile
readme.md
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] }
[Pipeline] // podTemplate
[Pipeline] End of Pipeline
Finished: SUCCESS
</code></pre></div></div>

<p>从上述 log 中，可以看到运行过程如下：</p>

<ul>
  <li>任务启动后，由于没有合适的 Node 可以选择，pod offline。</li>
  <li>此时 Karpenter 购买 EC2 并安装 OS 和必要 pod，此过程大约 90 秒左右。</li>
  <li>然后启动任务，从输出结果中可以看到 使用了 arm 架构（aarch64 或 arm64）</li>
  <li>描述 node（或在 AWS 控制台）可显示相应的 EC2 为 Spot 实例。</li>
</ul>

<hr />

<p>相关阅读：</p>

<p><a href="https://plugins.jenkins.io/kubernetes/">Jenkins 的 Kubernetes 插件</a></p>

<p><a href="https://karpenter.sh/">Karpenter 官网</a></p>

<p><a href="https://youbug.cn/2022/12/the-cheapest-way-to-ci-cn.html">在 AWS 构建应用 (Gitlab CI) 最便宜的姿势</a></p>

<p><a href="https://youbug.cn/2022/11/cdk-install-karpenter-1.9.2.html">使用 CDK 安装 Karpenter 新版</a></p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container" /><summary type="html"><![CDATA[本文介绍了如何调度 Jenkins 任务到 EKS 集群的 Karpenter 虚拟节点。Karpenter 强大的 Node 组织能力，可以最大程度节约任务运行的成本。]]></summary></entry><entry><title type="html">编写 Argo CD 人工部署 API</title><link href="https://youbug.cn/2022/12/argocd-manual-sync-api.html" rel="alternate" type="text/html" title="编写 Argo CD 人工部署 API" /><published>2022-12-23T09:53:33+00:00</published><updated>2022-12-23T09:53:33+00:00</updated><id>https://youbug.cn/2022/12/argocd-manual-sync-api</id><content type="html" xml:base="https://youbug.cn/2022/12/argocd-manual-sync-api.html"><![CDATA[<p>使用 ArgoCD 可以有效解耦 CI 和 CD。
想象这个场景：当 CI 流程将构建物打包完成，并更新了 Git 部署仓库，此时 CI 流程发通知给相关有审批人员，审批者通过点击链接就可以完成部署。
虽然可以通过登录 Argo CD 的 UI 界面可以完成此操作，但感觉还不够丝滑。</p>

<h2 id="想法">想法</h2>

<p>我的想法是：</p>

<p>编写 2 个 API 暴露出来：</p>

<ul>
  <li>发邮件(或者发微信，slack 啥的) 的 API</li>
  <li>封装 argocd sync 的 API</li>
</ul>

<p>过程是：</p>

<p>CI 结束后 -&gt; 调用 API 发邮件，邮件的内容，是一个带有时间戳签名的 Url -&gt; 收到邮件的人，直接在邮件里点击此链接触发 argocd sync。
下面我来分解这一过程，并最后给出整体的代码。</p>

<p>本文的代码使用 C# 编写，为啥用 C#？因为好久没用过了。这个语言我不想忘记，他是最好的面对对象语言。</p>

<h2 id="先看看-argo-cd-api">先看看 Argo CD API</h2>

<p>通过这个地址阅读 Argo CD API 文档：<code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;/swagger-ui</code></p>

<p>我们找到了我们需要的 API 有两个：</p>

<ul>
  <li>SessionService_Create: <code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;/api/v1/session</code>，获取 Authorization token。</li>
  <li>ApplicationService_Sync: <code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;/api/v1/applications/{name}/sync</code>，同步应用。</li>
</ul>

<p>请将 <code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;</code> 更换为您的 Argo CD 对外发布地址 (在 K8S 集群内对应的服务为：argocd-server)。</p>

<p>调用方法大约为：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /api/v1/session

{
  "username": "admin",
  "password": "argocd-secret"
}
</code></pre></div></div>

<ul>
  <li>这里需要传入您的 Argo CD 的用户名和密码。</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /api/v1/applications/{name}/sync
Authorization: Bearer ${token}

{
  "appNamespace": "argocd"
}
</code></pre></div></div>

<ul>
  <li>其中必须的参数 url 中间的 name，这个就是创建的 ArgoCD 应用的名字。</li>
  <li>注意 appNamespace 是 ArgoCD 应用的命名空间，不是你的业务应用的命名空间。</li>
</ul>

<p>有了这 2 个 API，下面的操作就简单了。</p>

<h2 id="发送更新邮件">发送更新邮件</h2>

<p>下面这个方法映射了一个 URL 用于发送邮件：</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">public</span> <span class="kt">string</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appName</span><span class="p">){</span>

    <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MimeMessage</span><span class="p">();</span>

    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span> <span class="p">=</span> <span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"CD Bot"</span><span class="p">;</span>

    <span class="n">email</span><span class="p">.</span><span class="n">From</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">To</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">emails</span><span class="p">));</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Subject</span> <span class="p">=</span> <span class="s">$"Application </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s"> is ready for deployment."</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">sign</span> <span class="p">=</span> <span class="nf">signApi</span><span class="p">(</span><span class="n">appName</span><span class="p">,</span> <span class="m">7200</span><span class="p">);</span> 
    <span class="n">email</span><span class="p">.</span><span class="n">Body</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextPart</span><span class="p">(</span><span class="n">TextFormat</span><span class="p">.</span><span class="n">Html</span><span class="p">)</span> <span class="p">{</span> 
      <span class="n">Text</span> <span class="p">=</span>  <span class="s">$@"</span><span class="err">
</span><span class="s">        Application Name: </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        Updated Date: </span><span class="p">{</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br&gt;</span><span class="err">
</span><span class="s">        Click this link to approve the deployment in 2 hours.&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;a href='http://localhost:9999/argo/deploy?name=</span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&amp;sign=</span><span class="p">{</span><span class="n">sign</span><span class="p">}</span><span class="s">' </span><span class="err">
</span><span class="s">          style='padding:10px 30px;border:1px solid #ccc;border-radius:5px;'&gt;</span><span class="err">
</span><span class="s">        Deploy Now</span><span class="err">
</span><span class="s">        &lt;/a&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;请注意：上述链接 2 小时候有效。"</span>
    <span class="p">};</span>

    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">smtp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SmtpClient</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="s">"smtp.gmail.com"</span><span class="p">,</span> <span class="m">465</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Authenticate</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">,</span> <span class="n">gmailPassword</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Disconnect</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="s">"OK"</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>使用了 MailKit 发送邮件。</li>
  <li>此 API 接受参数: email 和 appName</li>
  <li>计算包含时间戳(2小时过期时间)的签名， 将部署链接 (http://localhost:9999/argo/deploy?name=?) 和签名作为邮件正文发送到目标邮箱。</li>
  <li>此 api 应该由 CI 来调用。</li>
  <li>点击邮件里面的链接，则会触发部署操作。</li>
</ul>

<h2 id="触发部署操作">触发部署操作</h2>

<p>先看代码：</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">deploy</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sign</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="nf">verifyApi</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">sign</span><span class="p">)){</span>
      <span class="k">return</span> <span class="s">"签名验证失败，或者链接过期了"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"username"</span><span class="p">,</span> <span class="n">argoUsername</span><span class="p">);</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"password"</span><span class="p">,</span> <span class="n">argoPassword</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">pContent</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>


    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">argoUrl</span> <span class="p">+</span> <span class="s">"/api/v1/session"</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Accept</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">MediaTypeWithQualityHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">));</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">pContent</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MediaTypeHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">);</span>
    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">httpClientHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClientHandler</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">httpClientHandler</span><span class="p">.</span><span class="n">ServerCertificateCustomValidationCallback</span> <span class="p">=</span> <span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">cert</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="p">};</span>
      <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">httpClientHandler</span><span class="p">))</span>
      <span class="p">{</span>
        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
        <span class="kt">string</span> <span class="n">responseBody</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">responseBody</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nf">syncApp</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="s">"token"</span><span class="p">],</span> <span class="s">"gateway"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>首先验证签名。</li>
  <li>通过调用 ArgoCD 的 <code class="language-plaintext highlighter-rouge">/api/v1/session</code> 去获取 Argo CD 的 临时 Authorization token。</li>
  <li>调用应用同步 API。</li>
  <li>调用成功则完成触发应用同步。</li>
</ul>

<h2 id="测试过程">测试过程</h2>

<p>1 邮件发送</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:9999/argo/sendemail?email<span class="o">=</span>cloudbeer@gmail.com&amp;appName<span class="o">=</span>product
</code></pre></div></div>

<p>2 gmail 邮箱收邮件，点击 Deploy Now 链接。这个链接类似这样：</p>

<p><a href="http://localhost:9999/argo/deploy?name=product&amp;sign=eyJl...1In0=">http://localhost:9999/argo/deploy?name=product&amp;sign=eyJl...1In0=</a></p>

<p>3 点击上面的链接完成应用部署。</p>

<h2 id="完整的代码">完整的代码</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http.Headers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MailKit.Net.Smtp</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MimeKit</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MimeKit.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ArgoTrigger.Controllers</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ArgoController</span> <span class="p">:</span> <span class="n">Controller</span>
<span class="p">{</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">argoUrl</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ARGO_URL"</span><span class="p">)</span> <span class="p">??</span> <span class="s">"http://host.docker.internal:8080"</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">argoUsername</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ARGO_USERNAME"</span><span class="p">)??</span> <span class="s">"admin"</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">argoPassword</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ARGO_PASSWORD"</span><span class="p">)??</span><span class="s">"uBGroHnh9TjSa7ud"</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">gmailPassword</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"GMAIL_PASSWORD"</span><span class="p">);</span>
  
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">deploy</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sign</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="nf">verifyApi</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">sign</span><span class="p">)){</span>
      <span class="k">return</span> <span class="s">"签名验证失败，或者链接过期了"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"username"</span><span class="p">,</span> <span class="n">argoUsername</span><span class="p">);</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"password"</span><span class="p">,</span> <span class="n">argoPassword</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">pContent</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>


    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">argoUrl</span> <span class="p">+</span> <span class="s">"/api/v1/session"</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Accept</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">MediaTypeWithQualityHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">));</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">pContent</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MediaTypeHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">);</span>
    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">httpClientHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClientHandler</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">httpClientHandler</span><span class="p">.</span><span class="n">ServerCertificateCustomValidationCallback</span> <span class="p">=</span> <span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">cert</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="p">};</span>
      <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">httpClientHandler</span><span class="p">))</span>
      <span class="p">{</span>
        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
        <span class="kt">string</span> <span class="n">responseBody</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">responseBody</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nf">syncApp</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="s">"token"</span><span class="p">],</span> <span class="s">"gateway"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">syncApp</span><span class="p">(</span><span class="n">HttpClient</span> <span class="n">client</span><span class="p">,</span> <span class="kt">string</span> <span class="n">token</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appName</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"appNamespace"</span><span class="p">,</span> <span class="s">"argocd"</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">pContent</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">argoUrl</span> <span class="p">+</span> <span class="s">"/api/v1/applications/"</span> <span class="p">+</span> <span class="n">appName</span> <span class="p">+</span> <span class="s">"/sync"</span><span class="p">);</span>


    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Accept</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">MediaTypeWithQualityHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">));</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Authorization</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">AuthenticationHeaderValue</span><span class="p">(</span><span class="s">"Bearer"</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">pContent</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MediaTypeHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
    <span class="kt">string</span> <span class="n">responseBody</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

    <span class="k">return</span> <span class="n">responseBody</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="kt">string</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">emails</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appName</span><span class="p">){</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">emails</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">gmailPassword</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MimeMessage</span><span class="p">();</span>

    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span> <span class="p">=</span> <span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"CD Bot"</span><span class="p">;</span>

    <span class="n">email</span><span class="p">.</span><span class="n">From</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">To</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">emails</span><span class="p">));</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Subject</span> <span class="p">=</span> <span class="s">$"Application </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s"> is ready for deployment."</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">sign</span> <span class="p">=</span> <span class="nf">signApi</span><span class="p">(</span><span class="n">appName</span><span class="p">,</span> <span class="m">7200</span><span class="p">);</span> 
    <span class="n">email</span><span class="p">.</span><span class="n">Body</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextPart</span><span class="p">(</span><span class="n">TextFormat</span><span class="p">.</span><span class="n">Html</span><span class="p">)</span> <span class="p">{</span> 
      <span class="n">Text</span> <span class="p">=</span>  <span class="s">$@"</span><span class="err">
</span><span class="s">        Application Name: </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        Updated Date: </span><span class="p">{</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br&gt;</span><span class="err">
</span><span class="s">        Click this link to approve the deployment in 2 hours.&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;a href='http://localhost:9999/argo/deploy?name=</span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&amp;sign=</span><span class="p">{</span><span class="n">sign</span><span class="p">}</span><span class="s">' </span><span class="err">
</span><span class="s">          style='padding:10px 30px;border:1px solid #ccc;border-radius:5px;'&gt;</span><span class="err">
</span><span class="s">        Deploy Now</span><span class="err">
</span><span class="s">        &lt;/a&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;请注意：上述链接 2 小时候有效。"</span>
    <span class="p">};</span>

    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">smtp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SmtpClient</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="s">"smtp.gmail.com"</span><span class="p">,</span> <span class="m">465</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Authenticate</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">,</span> <span class="n">gmailPassword</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Disconnect</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="s">"OK"</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="kt">string</span> <span class="nf">signApi</span><span class="p">(</span><span class="kt">string</span> <span class="n">appName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">expireSecond</span><span class="p">){</span>
    <span class="kt">string</span> <span class="n">cachedKey</span> <span class="p">=</span> <span class="s">"abcdefghijklmnop"</span><span class="p">;</span>
    <span class="n">DateTime</span> <span class="n">expireAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddSeconds</span><span class="p">(</span><span class="n">expireSecond</span><span class="p">);</span>
    <span class="kt">string</span> <span class="n">sign</span> <span class="p">=</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">cachedKey</span> <span class="p">+</span> <span class="n">appName</span> <span class="p">+</span> <span class="n">expireAt</span><span class="p">.</span><span class="n">Ticks</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">signJson</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">signJson</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"expireAt"</span><span class="p">,</span> <span class="n">expireAt</span><span class="p">.</span><span class="n">Ticks</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
    <span class="n">signJson</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"sign"</span><span class="p">,</span> <span class="n">sign</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">jStrSign</span> <span class="p">=</span>  <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">signJson</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">jStrSign</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">base64Encode</span><span class="p">(</span><span class="n">jStrSign</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">private</span> <span class="kt">bool</span> <span class="nf">verifyApi</span><span class="p">(</span><span class="kt">string</span> <span class="n">appName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sign</span><span class="p">){</span>
    <span class="kt">string</span> <span class="n">cachedKey</span> <span class="p">=</span> <span class="s">"abcdefghijklmnop"</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">jStrSign</span> <span class="p">=</span> <span class="nf">base64Decode</span><span class="p">(</span><span class="n">sign</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">signJson</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">jStrSign</span><span class="p">);</span>
    <span class="kt">long</span> <span class="n">expireAt</span> <span class="p">=</span> <span class="kt">long</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">signJson</span><span class="p">[</span><span class="s">"expireAt"</span><span class="p">]);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span> <span class="p">&gt;</span> <span class="n">expireAt</span><span class="p">){</span>
      <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">string</span> <span class="n">signFromApi</span> <span class="p">=</span> <span class="n">signJson</span><span class="p">[</span><span class="s">"sign"</span><span class="p">];</span>
    <span class="kt">string</span> <span class="n">signFromCache</span> <span class="p">=</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">cachedKey</span> <span class="p">+</span> <span class="n">appName</span> <span class="p">+</span> <span class="n">signJson</span><span class="p">[</span><span class="s">"expireAt"</span><span class="p">]);</span>
    <span class="k">return</span> <span class="n">signFromCache</span> <span class="p">==</span> <span class="n">signFromApi</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">string</span> <span class="nf">sha256</span><span class="p">(</span><span class="kt">string</span> <span class="n">randomString</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">SHA256</span> <span class="n">mySHA256</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="kt">byte</span><span class="p">[]</span> <span class="n">crypto</span> <span class="p">=</span> <span class="n">mySHA256</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">randomString</span><span class="p">));</span>
      <span class="kt">string</span> <span class="n">hash</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
      <span class="k">foreach</span> <span class="p">(</span><span class="kt">byte</span> <span class="n">theByte</span> <span class="k">in</span> <span class="n">crypto</span><span class="p">)</span>
      <span class="p">{</span>
          <span class="n">hash</span> <span class="p">+=</span> <span class="n">theByte</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="s">"x2"</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kt">string</span> <span class="nf">base64Encode</span><span class="p">(</span><span class="kt">string</span> <span class="n">plainText</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">plainTextBytes</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="nf">ToBase64String</span><span class="p">(</span><span class="n">plainTextBytes</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kt">string</span> <span class="nf">base64Decode</span><span class="p">(</span><span class="kt">string</span> <span class="n">base64EncodedData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">base64EncodedBytes</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="nf">FromBase64String</span><span class="p">(</span><span class="n">base64EncodedData</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">base64EncodedBytes</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="附net-core-项目入门">附：.NET Core 项目入门</h2>

<p>下面记录了代码开始之前的工作，包括 .NET 运行环境配置，创建项目，开发配置等工作。我开始写这个文章的时候电脑还没有 .NET 环境。</p>

<p>我准备使用 .NET 镜像作为我的开发环境，先拉一下镜像：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull mcr.microsoft.com/dotnet/sdk:7.0
</code></pre></div></div>

<h3 id="创建一个项目">创建一个项目</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  dotnet new webapp <span class="nt">-o</span> /app/ArgoTrigger <span class="nt">--no-https</span> <span class="nt">-f</span> net7.0
</code></pre></div></div>

<p>这个命令含义如下：</p>

<ul>
  <li>家目录的 /projects/cloudbeer 映射到容器的 /app</li>
  <li>通过 dotnet 命令在子目录 ArgoTrigger 里生产一个 asp.net core 项目。</li>
</ul>

<h3 id="安装依赖包">安装依赖包</h3>

<p>安装 2 个依赖包，MailKit 和 MimeKit，用来发送通知邮件。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  sh <span class="nt">-c</span> <span class="s2">"cd /app/ArgoTrigger &amp;&amp; dotnet add package MailKit"</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  sh <span class="nt">-c</span> <span class="s2">"cd /app/ArgoTrigger &amp;&amp; dotnet add package MimeKit"</span>
</code></pre></div></div>

<h3 id="启动项目">启动项目</h3>

<p>现在项目已经产生，可以打开 vscode 进行编辑了。</p>

<p>默认的 Web 开发 Url 是 localhost + 随机端口，但我们需要将 容器的 端口映射出来，需要一个 0.0.0.0 的固定端口，修改配置文件 appsettings.json，加入：<code class="language-plaintext highlighter-rouge">"Urls": "http://0.0.0.0:9999"</code></p>

<p>appsettings.json 这个文件现在看起来应该是这样：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Urls"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://0.0.0.0:9999"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>然后启动项目的开发模式：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-p</span> 9999:9999 <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">DOTNET_WATCH_RESTART_ON_RUDE_EDIT</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">GMAIL_PASSWORD</span><span class="o">=</span><span class="nv">$GMAIL_PASSWORD</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  sh <span class="nt">-c</span> <span class="s2">"cd /app/ArgoTrigger &amp;&amp; dotnet watch -v"</span>
</code></pre></div></div>

<ul>
  <li>GMAIL_PASSWORD 是一个环境变量，是 Gmail 的临时登录 token，这个变量通过本机到容器，最终传入发送邮件的代码中。</li>
</ul>

<p>现在可以打开 <a href="http://localhost:9999/">http://localhost:9999/</a> 了。</p>

<blockquote>
  <p>没有 IDE 的代码提示，比较痛苦。不过，老夫是一把梭，一谷歌，一剪刀搞定一切。</p>
</blockquote>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container," /><category term="argocd" /><summary type="html"><![CDATA[使用 ArgoCD 可以有效解耦 CI 和 CD。 想象这个场景：当 CI 流程将构建物打包完成，并更新了 Git 部署仓库，此时 CI 流程发通知给相关有审批人员，审批者通过点击链接就可以完成部署。 虽然可以通过登录 Argo CD 的 UI 界面可以完成此操作，但感觉还不够丝滑。]]></summary></entry><entry><title type="html">自动化构建多架构(amd, arm)镜像</title><link href="https://youbug.cn/2022/12/buildx-multi-arch-images.html" rel="alternate" type="text/html" title="自动化构建多架构(amd, arm)镜像" /><published>2022-12-20T09:40:33+00:00</published><updated>2022-12-20T09:40:33+00:00</updated><id>https://youbug.cn/2022/12/buildx-multi-arch-images</id><content type="html" xml:base="https://youbug.cn/2022/12/buildx-multi-arch-images.html"><![CDATA[<p>现在很多软件发行的 Docker 镜像都会支持多架构，Docker 官方也有教程教大家如何实现，并且提供了一个 buildx 插件方便大家实现。本文使用 Gitlab CI 试了一下此插件，主要命令是 <code class="language-plaintext highlighter-rouge">docker buildx build --platform...</code>。</p>

<h2 id="检查-docker-环境">检查 docker 环境</h2>

<p>检查官方的 docker 20 的镜像，运行 docker info 查看 Plugins：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker info
Client:
 Context:    default
 Debug Mode: <span class="nb">false
 </span>Plugins:
  buildx: Docker Buildx <span class="o">(</span>Docker Inc., v0.9.1<span class="o">)</span>
  compose: Docker Compose <span class="o">(</span>Docker Inc., v2.14.1<span class="o">)</span>
...
</code></pre></div></div>

<p>已经内置了 buildx 插件。</p>

<h2 id="gitlab-ci-脚本">Gitlab CI 脚本</h2>

<h3 id="构建到官方仓库-docker-hub">构建到官方仓库 docker hub</h3>

<p>下面的示例 build 了一个 arm64 + amd64 的裸 JDK。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dockerx</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker:20</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
    <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
    <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s">/certs</span>
    <span class="na">DOCKER_TLS_VERIFY</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">DOCKER_CERT_PATH</span><span class="pi">:</span> <span class="s">/certs/client</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:20-dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">until docker version &gt; /dev/null; do sleep 1; done</span>
    <span class="pi">-</span> <span class="s">echo "FROM amazoncorretto:11" &gt; Dockerfile</span>
    <span class="pi">-</span> <span class="s">docker context create xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx create --name xbuilder --use xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx use xbuilder</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">echo $DOCKER_PASS | docker login -u$DOCKER_USER --password-stdin</span>
    <span class="pi">-</span> <span class="s">docker buildx build --platform linux/arm64,linux/amd64 -t cloudbeer/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA --push .</span>

</code></pre></div></div>

<ul>
  <li>主要的命令为 <code class="language-plaintext highlighter-rouge">docker buildx build --platform linux/arm64,linux/amd64</code>，可以直接指定平台架构。</li>
  <li>在 19+ 版本的 docker 里，docker 生产的证书需要时间，为了安全起见，需要检测 docker 状态：<code class="language-plaintext highlighter-rouge">until docker version &gt; /dev/null; do sleep 1; done</code>，等他没问题再进行下一步操作，否则任务会中断。</li>
  <li><code class="language-plaintext highlighter-rouge">docker context, docker buildx create, docker buildx use</code> 这些解决了 “
ERROR: multiple platforms feature is currently not supported for docker driver.”, “Docker buildx - could not create a builder instance with TLS data loaded from environment” 这些个错误。</li>
  <li><code class="language-plaintext highlighter-rouge">docker buildx build... --push</code> 会直接把镜像构建结果推送到 docker hub。</li>
</ul>

<p>构建结果：<a href="https://hub.docker.com/r/cloudbeer/pure-ci/tags">https://hub.docker.com/r/cloudbeer/pure-ci/tags</a></p>

<p><img src="/assets/posts/devops/docker-hub-multi.png" alt="Buildx result" /></p>

<h3 id="推送到-aws-ecr">推送到 AWS ECR</h3>

<p>使用 AWS 的服务，一般离不开 aws cli，在本场景中，要么在 aws cli 镜像中安装 docker，要么在 docker 里安装 aws cli，下面是我的测试脚本，此脚本可以 run 到最后：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dockerx-ecr</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">amazon/aws-cli</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
    <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
    <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s">/certs</span>
    <span class="na">DOCKER_TLS_VERIFY</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">DOCKER_CERT_PATH</span><span class="pi">:</span> <span class="s">/certs/client</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">amazon-linux-extras install docker</span>
    <span class="pi">-</span> <span class="s">mkdir -p ~/.docker/cli-plugins/</span>
    <span class="pi">-</span> <span class="s">until docker version &gt; /dev/null; do sleep 1; done</span>
    <span class="pi">-</span> <span class="s">docker container create --name buildx docker/buildx-bin sh</span>
    <span class="pi">-</span> <span class="s">docker cp buildx:/buildx ~/.docker/cli-plugins/docker-buildx</span>
    <span class="pi">-</span> <span class="s">echo "FROM amazoncorretto:11" &gt; Dockerfile</span>
    <span class="pi">-</span> <span class="s">docker context create xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx create --name xbuilder --use xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx use xbuilder</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY</span>
    <span class="pi">-</span> <span class="s">docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA --push .</span>
</code></pre></div></div>

<p>上面的脚本成功运行。</p>

<p>下面是一些坑总结（吐槽模式开启）：</p>

<ul>
  <li>使用 官方 docker 镜像作为基础镜像构建，会发现 awscli v2 装不上， awscli v2 安装到 alpine 需要编译，不是简单加几个依赖包就行的，这个懒得折腾了。</li>
  <li>使用 pip 官方安装的 awscli v2 居然是在 docker 里运行的，这是在搞笑吗？我本来就是个 dind，套娃了啊。</li>
  <li>使用 aws-cli 镜像作为底包，<code class="language-plaintext highlighter-rouge">amazon-linux-extras install docker</code> 这个安装的 docker 居然把 plugins 都干掉了。干掉 compose 可以理解，为啥把 buildx 这么好的工具干掉了。</li>
  <li>安装 buildx 插件，可以直接从 buildx 镜像包中拷贝，命令是 <code class="language-plaintext highlighter-rouge">docker container create</code> 和 <code class="language-plaintext highlighter-rouge">docker cp</code>。</li>
  <li>使用 AWS ECR 别忘记要先建库。</li>
  <li>使用 AWS ECR 别忘记要先建库。</li>
  <li>使用 AWS ECR 别忘记要先建库。</li>
  <li><strong>我又忘记了。</strong></li>
</ul>

<p>最终的部分 log 贴在下面：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="nv">$ </span>aws ecr get-login-password <span class="nt">--region</span> us-east-1 | docker login <span class="nt">--username</span> AWS <span class="nt">--password-stdin</span> <span class="nv">$DOCKER_REGISTRY</span>
Login Succeeded
<span class="c">#3 transferring context: 2B done</span>
<span class="c">#3 DONE 0.1s</span>
<span class="c">#4 [linux/arm64 internal] load metadata for docker.io/library/amazoncorretto:11</span>
<span class="c">#4 DONE 2.6s</span>
<span class="c">#5 [linux/amd64 internal] load metadata for docker.io/library/amazoncorretto:11</span>
<span class="c">#5 DONE 2.6s</span>
...
<span class="c">#6 [linux/amd64 1/1] FROM docker.io/library/amazoncorretto:11@sha256:6962bc64de2b612c2a760299956853762cfcee538b1b6b55706661426546936c</span>
<span class="c">#6 DONE 0.1s</span>
<span class="c">#8 exporting to image</span>
<span class="c">#8 exporting layers done</span>
<span class="c">#8 exporting manifest sha256:3dd903be615ce4c36321b161806bc061a567079a2947ec658cdcd14d1c114235 0.0s done</span>
<span class="c">#8 exporting config sha256:8b9bb2aca3d28e14fa06412d152fd4ce6c7a55f1554bec3c71ce4a4410060af3</span>
<span class="c">#8 exporting config sha256:8b9bb2aca3d28e14fa06412d152fd4ce6c7a55f1554bec3c71ce4a4410060af3 0.0s done</span>
<span class="c">#8 exporting manifest sha256:4218135aa38e8522e988b60392190cd7bfc1715cedb3f301f82cec43fee383e2 0.0s done</span>
<span class="c">#8 exporting config sha256:de3379d966e1b03cf4c7f3c6db803f459cf1c3e887fbe2c10af9ce0c72a6f406 0.0s done</span>
<span class="c">#8 exporting manifest list sha256:dc0282c4166a58f7b8298e5061a00c02c6bce6e358000b479e49e6d73cf57b34 0.0s done</span>
<span class="c">#8 pushing layers</span>
<span class="c">#8 ...</span>
<span class="c">#9 [auth] sharing credentials for [MASKED].dkr.ecr.us-east-1.amazonaws.com</span>
<span class="c">#9 DONE 0.0s</span>
<span class="c">#8 exporting to image</span>
<span class="c">#8 ...</span>
<span class="c">#7 [linux/amd64 1/1] FROM docker.io/library/amazoncorretto:11@sha256:6962bc64de2b612c2a760299956853762cfcee538b1b6b55706661426546936c</span>
<span class="c">#7 sha256:74c4a50287c9345fabef12ad41b61e3450e3400fbe99f5d48281ceb781041ae3 147.75MB / 147.75MB 2.6s done</span>
<span class="c">#7 sha256:5b4a36b5b78f93a5f470cf722b313bb32cddb0f8e0fa0db348059b5c0881b04f 62.33MB / 62.33MB 1.0s done</span>
<span class="c">#7 DONE 2.9s</span>
<span class="c">#6 [linux/arm64 1/1] FROM docker.io/library/amazoncorretto:11@sha256:6962bc64de2b612c2a760299956853762cfcee538b1b6b55706661426546936c</span>
<span class="c">#6 sha256:c0aade9a94f7c23d8fc79b4c11ce14d37b8569a6fec3017a295169ff500ec8d8 144.91MB / 144.91MB 2.9s</span>
<span class="c">#6 sha256:6cbfee25f0741b3d3f4d2474d904a200cd8404a01aa17813bf3fc3d4ebb551a4 63.96MB / 63.96MB 1.8s done</span>
<span class="c">#6 sha256:c0aade9a94f7c23d8fc79b4c11ce14d37b8569a6fec3017a295169ff500ec8d8 144.91MB / 144.91MB 3.0s done</span>
<span class="c">#6 DONE 3.1s</span>
<span class="c">#8 exporting to image</span>
<span class="c">#8 pushing layers 17.6s done</span>
<span class="c">#8 pushing manifest for [MASKED].dkr.ecr.us-east-1.amazonaws.com/pure-ci:1ac460d1@sha256:dc0282c4166a58f7b8298e5061a00c02c6bce6e358000b479e49e6d73cf57b34</span>
<span class="c">#8 pushing manifest for [MASKED].dkr.ecr.us-east-1.amazonaws.com/pure-ci:1ac460d1@sha256:dc0282c4166a58f7b8298e5061a00c02c6bce6e358000b479e49e6d73cf57b34 2.2s done</span>
<span class="c">#8 DONE 19.8s</span>
Job succeeded
</code></pre></div></div>

<p>请忽略 ECR Web 控制台的显示方式。</p>

<h2 id="不是本文的总结">不是本文的总结</h2>

<ul>
  <li>使用 docker-buildx 会直接使用相应架构的底层依赖镜像，如果使用这种方法，您不能将一个有架构依赖的可执行文件直接拷贝构建镜像，否则会出现底层包和业务包对不上的问题。</li>
  <li>可以将构建过程放到 Dockerfile 里面去，Docker 有完整的多阶段构建的模式来生产您的镜像（如 go 语言）。</li>
  <li>对于脚本类型的语言，完全可以用这种方式构建，依赖包安装也应该在 Dockerfile 中进行。</li>
  <li>Java 的普通运行包可以使用直接拷贝的方式，X86 环境下构建的 jar 包可以直接运行在 ARM 的 jdk 中。</li>
  <li>Dockerfile 的底包也应该是多架构的，请不要强制指定具体的 digest 值。</li>
</ul>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container," /><category term="tucao," /><category term="gitlab" /><summary type="html"><![CDATA[现在很多软件发行的 Docker 镜像都会支持多架构，Docker 官方也有教程教大家如何实现，并且提供了一个 buildx 插件方便大家实现。本文使用 Gitlab CI 试了一下此插件，主要命令是 docker buildx build --platform...。]]></summary></entry><entry><title type="html">在 AWS 构建应用 (Gitlab CI) 最便宜的姿势</title><link href="https://youbug.cn/2022/12/the-cheapest-way-to-ci-cn.html" rel="alternate" type="text/html" title="在 AWS 构建应用 (Gitlab CI) 最便宜的姿势" /><published>2022-12-19T03:40:33+00:00</published><updated>2022-12-19T03:40:33+00:00</updated><id>https://youbug.cn/2022/12/the-cheapest-way-to-ci-cn</id><content type="html" xml:base="https://youbug.cn/2022/12/the-cheapest-way-to-ci-cn.html"><![CDATA[<p>Graviton 在 AWS 是性价比最高的（最高节约 40%），而 Spot 实例适合任务类型的负载，最高能有 90% 的节省。而 Gitlab Runner 可以轻松将构建任务调度到这种类型的节点上。</p>

<h2 id="安装-gitlab-runner">安装 Gitlab runner</h2>

<p>首先，我们需要为 Gitlab runner 打一个标签。这里我设置了标签为 arm。稍后我们会将任务调度到这个 runner。</p>

<p>下面是 CDK 代码:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cluster</span><span class="p">.</span><span class="nx">addHelmChart</span><span class="p">(</span><span class="dl">"</span><span class="s2">arm-runner</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">chart</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab-runner</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">repository</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://charts.gitlab.io/</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">version</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0.48.0</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">namespace</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">release</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arm-runner</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">createNamespace</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">values</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">runnerRegistrationToken</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;your-runner-token&gt;</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">gitlabUrl</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;your-gitlab-url&gt;</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">privileged</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">rbac</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">create</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">watch</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods/exec</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods/log</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods/attach</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">update</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">secrets</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">update</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">configmaps</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">update</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">runners</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arm-runner</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">tags</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arm, mass</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">runUntagged</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="na">helpers</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">image</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab/gitlab-runner-helper:arm64-v14.10.2</span><span class="dl">"</span>
      <span class="p">},</span>
      <span class="na">config</span><span class="p">:</span> <span class="s2">`
    [[runners]]
    name = "arm-runner"
    environment = ["FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=true"]
    executor = "kubernetes"
    [runners.kubernetes]
      image = "ubuntu:22.04"
      privileged = true
    [[runners.kubernetes.volumes.empty_dir]]
      name = "docker-certs"
      mount_path = "/certs/client"
      medium = "Memory"
    [[runners.kubernetes.volumes.empty_dir]]
      name = "dind-storage"
      mount_path = "/var/lib/docker"
    [[runners.kubernetes.volumes.host_path]]
      name = "hostpath-modules"
      mount_path = "/lib/modules"
      read_only = true
      host_path = "/lib/modules"
    [[runners.kubernetes.volumes.host_path]]
      name = "hostpath-hosts"
      mount_path = "/etc/hosts"
      read_only = true
      host_path = "/etc/hosts"
    [[runners.kubernetes.volumes.host_path]]
      name = "hostpath-cgroup"
      mount_path = "/sys/fs/cgroup"
      host_path = "/sys/fs/cgroup"
    [runners.kubernetes.node_selector]
      "karpenter-arch" = "arm64" 
    `</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>配置中需要着重关注以下:</p>

<ul>
  <li>在 ARM 环境下，需要指定 gitlab-runner-helper 的镜像，因为 这个镜像是单架构的，而默认的图样使的是 X86 的镜像。这个镜像会作为 构建任务的 sidecar 运行。</li>
  <li><code class="language-plaintext highlighter-rouge">FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY</code> 必须设置为 true 才能调度 pod 任务。</li>
  <li>配置中 <code class="language-plaintext highlighter-rouge">[runners.kubernetes.node_selector]</code> 是为 K8S 调度做准备的，此处表示后续的构建任务会调度到相应 tag 的 node 节点。</li>
</ul>

<h2 id="kapennter-节点池">Kapennter 节点池</h2>

<p><a href="https://karpenter.sh/">Karpenter</a>  是 AWS 最新的节点伸缩工具，非常好用。</p>

<p>Kapennter 的安装和入门就不做过多说明了。直接看代码：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.sh/v1alpha5</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Provisioner</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">arm-builder</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">karpenter.k8s.aws/instance-category"</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">m"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">r"</span><span class="pi">]</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">karpenter.sh/capacity-type</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">spot"</span><span class="pi">]</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">kubernetes.io/arch"</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">arm64"</span><span class="pi">]</span>
  <span class="na">limits</span><span class="pi">:</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">cpu</span><span class="pi">:</span> <span class="m">1000</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">karpenter-arch</span><span class="pi">:</span> <span class="s">arm64</span>
  <span class="na">providerRef</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">ttlSecondsAfterEmpty</span><span class="pi">:</span> <span class="m">30</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.k8s.aws/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">AWSNodeTemplate</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">amiFamily</span><span class="pi">:</span> <span class="s">Bottlerocket</span>
  <span class="na">subnetSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">aws:cloudformation:stack-name"</span><span class="err">:</span> <span class="s">gitlab</span>
    <span class="s">"aws-cdk:subnet-type": Private</span>
  <span class="na">securityGroupSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">kubernetes.io/cluster/gitlab"</span><span class="err">:</span> <span class="s">owned</span>

</code></pre></div></div>

<p>代码说明:</p>

<ul>
  <li>创建了节点池(Provisioner)，可以指定节点的机型范围，CPU 类型，付费类型等。指定 arm 就可以选择 Graviton 机型，指定 spot 可以只购买竞价实例。</li>
  <li>这里建议使用 Bottlerocket 作为 node 的操作系统，使用 Amazon Linux 会抛出一个无法解析 git 仓库的地址的错误。</li>
</ul>

<h2 id="gitlab-ci-配置">Gitlab CI 配置</h2>

<p>现在需要将构建任务调度到这个 runner 上。</p>

<p>下面是 .gitlab-ci.yml 的示例：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Build</span>

<span class="na">frontend-build</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">Build</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">node:16.16.0-alpine</span>
  <span class="na">tags</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">arm</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">npm install</span>
    <span class="pi">-</span> <span class="s">npm run build</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">build/</span>
</code></pre></div></div>

<p>上面的代码很简单，只需要给构建任务指定 tags 标签即可</p>

<h2 id="总结">总结</h2>

<p>通过以上的三段配置，整体的 CI 流程如下：</p>

<p>触发 Gitlab 构建 -&gt; 寻找有 arm 标记的 runner -&gt; 启动构建任务(pod) -&gt; 寻找 <code class="language-plaintext highlighter-rouge">karpenter-arch: arm64</code> 的节点 -&gt; 没有符合条件的节点，pod pending -&gt; Karpenter 购买 arm + spot 节点 -&gt; 构建任务开始调度成功 -&gt; 执行构建任务 -&gt; 任务结束，释放 node 节点。</p>

<p>如图：</p>

<p><img src="/assets/posts/devops/gitlab-ci-karpenter.png" alt="Gitlab CI with karpenter" /></p>

<p>Karpenter 会购买最便宜的机型，全新节点的购买时间约 1 分 30 秒。</p>]]></content><author><name>啤酒云</name></author><category term="aws," /><category term="gitlab," /><category term="devops," /><category term="container" /><summary type="html"><![CDATA[Graviton 在 AWS 是性价比最高的（最高节约 40%），而 Spot 实例适合任务类型的负载，最高能有 90% 的节省。而 Gitlab Runner 可以轻松将构建任务调度到这种类型的节点上。]]></summary></entry><entry><title type="html">The cheapest way to build applications (Gitlab CI) on AWS</title><link href="https://youbug.cn/2022/12/the-cheapest-way-to-ci-en.html" rel="alternate" type="text/html" title="The cheapest way to build applications (Gitlab CI) on AWS" /><published>2022-12-18T12:59:33+00:00</published><updated>2022-12-18T12:59:33+00:00</updated><id>https://youbug.cn/2022/12/the-cheapest-way-to-ci-en</id><content type="html" xml:base="https://youbug.cn/2022/12/the-cheapest-way-to-ci-en.html"><![CDATA[<p>Graviton (ARM) is the most cost-effective in AWS (up to 40% savings), while Spot instances are suitable for task-type workloads and can save up to 90%. Gitlab Runner can easily schedule build tasks to Graviton + Spot instances.</p>

<h2 id="config-gitlab-runner">Config Gitlab runner</h2>

<p>First, we need to tag the Gitlab runner. Here I set the tag to arm. Later we will schedule the task to the runner.</p>

<p>Here is the CDK code:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cluster</span><span class="p">.</span><span class="nx">addHelmChart</span><span class="p">(</span><span class="dl">"</span><span class="s2">arm-runner</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">chart</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab-runner</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">repository</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://charts.gitlab.io/</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">version</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0.48.0</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">namespace</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">release</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arm-runner</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">createNamespace</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">values</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">runnerRegistrationToken</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;your-runner-token&gt;</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">gitlabUrl</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;your-gitlab-url&gt;</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">privileged</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">rbac</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">create</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">watch</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods/exec</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods/log</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">pods/attach</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">update</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">secrets</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">update</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">apiGroups</span><span class="p">:</span> <span class="p">[</span><span class="dl">""</span><span class="p">],</span>
          <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">configmaps</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">verbs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">create</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">update</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">delete</span><span class="dl">"</span><span class="p">],</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">runners</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arm-runner</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">tags</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arm, mass</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">runUntagged</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="na">helpers</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">image</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab/gitlab-runner-helper:arm64-v14.10.2</span><span class="dl">"</span>
      <span class="p">},</span>
      <span class="na">config</span><span class="p">:</span> <span class="s2">`
    [[runners]]
    name = "arm-runner"
    environment = ["FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=true"]
    executor = "kubernetes"
    [runners.kubernetes]
      image = "ubuntu:22.04"
      privileged = true
    [[runners.kubernetes.volumes.empty_dir]]
      name = "docker-certs"
      mount_path = "/certs/client"
      medium = "Memory"
    [[runners.kubernetes.volumes.empty_dir]]
      name = "dind-storage"
      mount_path = "/var/lib/docker"
    [[runners.kubernetes.volumes.host_path]]
      name = "hostpath-modules"
      mount_path = "/lib/modules"
      read_only = true
      host_path = "/lib/modules"
    [[runners.kubernetes.volumes.host_path]]
      name = "hostpath-hosts"
      mount_path = "/etc/hosts"
      read_only = true
      host_path = "/etc/hosts"
    [[runners.kubernetes.volumes.host_path]]
      name = "hostpath-cgroup"
      mount_path = "/sys/fs/cgroup"
      host_path = "/sys/fs/cgroup"
    [runners.kubernetes.node_selector]
      "karpenter-arch" = "arm64" 
    `</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Some notices:</p>

<ul>
  <li>Under ARM env, we need to specify the gitlab-runner-helper image, because the helper image is single-arch, default pattern is X86. This image will run as a sidecar for the build task.</li>
  <li><code class="language-plaintext highlighter-rouge">FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY</code> must be sett to true to execute pod.</li>
  <li><code class="language-plaintext highlighter-rouge">[runners.kubernetes.node_selector]</code> is prepared for K8S pod scheduling, which means the build tasks will be scheduled to the node node of the corresponding tag.</li>
</ul>

<h2 id="karpenter-provisioner">Karpenter Provisioner</h2>

<p><a href="https://karpenter.sh/">Karpenter</a> is a K8S node auto scaler built by AWS.</p>

<p>Here is the Karpenter Provisioner code.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.sh/v1alpha5</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Provisioner</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">arm-builder</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">karpenter.k8s.aws/instance-category"</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">m"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">r"</span><span class="pi">]</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">karpenter.sh/capacity-type</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">spot"</span><span class="pi">]</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">kubernetes.io/arch"</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">arm64"</span><span class="pi">]</span>
  <span class="na">limits</span><span class="pi">:</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">cpu</span><span class="pi">:</span> <span class="m">1000</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">karpenter-arch</span><span class="pi">:</span> <span class="s">arm64</span>
  <span class="na">providerRef</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">ttlSecondsAfterEmpty</span><span class="pi">:</span> <span class="m">30</span>


<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.k8s.aws/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">AWSNodeTemplate</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">amiFamily</span><span class="pi">:</span> <span class="s">Bottlerocket</span>
  <span class="na">subnetSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">aws:cloudformation:stack-name"</span><span class="err">:</span> <span class="s">gitlab</span>
    <span class="s">"aws-cdk:subnet-type": Private</span>
  <span class="na">securityGroupSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">kubernetes.io/cluster/gitlab"</span><span class="err">:</span> <span class="s">owned</span>

</code></pre></div></div>

<p>Notices:</p>

<ul>
  <li>You can specify instance categories, CPU types, payment types, etc.</li>
  <li>We choose arm cpu and spot capacity type, this combination is the cheapest.</li>
  <li>It is recommended to use Bottlerocket as the os of node. Using Amazon Linux will throw an error that “Cannot resolve DNS address of the git repository”.</li>
</ul>

<h2 id="gitlab-ci-config">Gitlab CI config</h2>

<p>Now we need to schedule the build task to this runner.</p>

<p>Here is an example <code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code> code:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Build</span>

<span class="na">frontend-build</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">Build</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">node:16.16.0-alpine</span>
  <span class="na">tags</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">arm</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">npm install</span>
    <span class="pi">-</span> <span class="s">npm run build</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">build/</span>
</code></pre></div></div>

<p>You only need to specify the tags for the build task.</p>

<h2 id="summary">Summary</h2>

<p>Through the above three configurations, the overall CI process is as follows:</p>

<p>Trigger Gitlab build -&gt; Look for runner with arm tag -&gt; Start build task (pod) -&gt; Look for <code class="language-plaintext highlighter-rouge">karpenter-arch: arm64</code> node -&gt; No arm node, pod pending -&gt; Karpenter purchase arm + spot node -&gt; The build task starts -&gt; The task ends and the node is released.</p>

<p>As shown in the figure below:</p>

<p><img src="/assets/posts/devops/gitlab-ci-karpenter.png" alt="Gitlab CI with karpenter" /></p>

<p>A whole new node purchase time is about 1 min 30s, Karpenter will always look for the cheapest instance.</p>]]></content><author><name>啤酒云</name></author><category term="aws," /><category term="gitlab," /><category term="devops," /><category term="container" /><summary type="html"><![CDATA[Graviton (ARM) is the most cost-effective in AWS (up to 40% savings), while Spot instances are suitable for task-type workloads and can save up to 90%. Gitlab Runner can easily schedule build tasks to Graviton + Spot instances.]]></summary></entry><entry><title type="html">使用 Gitlab in K8S 构建 Maven 类库到 AWS CodeArtifact</title><link href="https://youbug.cn/2022/12/build-maven-artifact-to-codeartifact.html" rel="alternate" type="text/html" title="使用 Gitlab in K8S 构建 Maven 类库到 AWS CodeArtifact" /><published>2022-12-12T12:59:33+00:00</published><updated>2022-12-12T12:59:33+00:00</updated><id>https://youbug.cn/2022/12/build-maven-artifact-to-codeartifact</id><content type="html" xml:base="https://youbug.cn/2022/12/build-maven-artifact-to-codeartifact.html"><![CDATA[<p>在很多项目里，需要共享类库，所以需要一个构建物仓库，在 AWS 就是 CodeArtifact。本文记录了如何使用 Gitlab 自动化构建 Java 类库，并上传到 CodeArtifact。</p>

<h2 id="创建-codeartifact">创建 CodeArtifact</h2>

<p>打开控制台进行创建: <a href="https://console.aws.amazon.com/codesuite/codeartifact/getting-started">https://console.aws.amazon.com/codesuite/codeartifact/getting-started</a>，选择 maven-central-store。</p>

<p>记得选择合适的 region，与您 Gitlab 部署地点尽量靠近。</p>

<p><img src="/assets/posts/devops/code-artifact.png" alt="CodeArtifact Create" /></p>

<p>创建完成后，可以查看连接说明。</p>

<h2 id="配置-maven-的-settings">配置 Maven 的 settings</h2>

<p>官方文档是将 settings.xml 配置到了宿主机，但在 k8s 中，可以考虑动态配置此文件。</p>

<p>我们将 settings.xml 的内容先丢到 Gitlab 的变量中去。我存在 <code class="language-plaintext highlighter-rouge">M2_SETTINGS</code> 变量里了。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;settings&gt;</span>
  <span class="nt">&lt;profiles&gt;</span>
    <span class="nt">&lt;profile&gt;</span>
      <span class="nt">&lt;id&gt;</span>cloudbeer-mvn<span class="nt">&lt;/id&gt;</span>
      <span class="nt">&lt;activation&gt;</span>
        <span class="nt">&lt;activeByDefault&gt;</span>true<span class="nt">&lt;/activeByDefault&gt;</span>
      <span class="nt">&lt;/activation&gt;</span>
      <span class="nt">&lt;repositories&gt;</span>
        <span class="nt">&lt;repository&gt;</span>
          <span class="nt">&lt;id&gt;</span>cloudbeer-mvn<span class="nt">&lt;/id&gt;</span>
          <span class="nt">&lt;url&gt;</span>$${ARTIFACT_URL}<span class="nt">&lt;/url&gt;</span>
        <span class="nt">&lt;/repository&gt;</span>
      <span class="nt">&lt;/repositories&gt;</span>
    <span class="nt">&lt;/profile&gt;</span>
  <span class="nt">&lt;/profiles&gt;</span>
  <span class="nt">&lt;servers&gt;</span>
    <span class="nt">&lt;server&gt;</span>
      <span class="nt">&lt;id&gt;</span>cloudbeer-mvn<span class="nt">&lt;/id&gt;</span>
      <span class="nt">&lt;username&gt;</span>aws<span class="nt">&lt;/username&gt;</span>
      <span class="nt">&lt;password&gt;</span>$${CODEARTIFACT_AUTH_TOKEN}<span class="nt">&lt;/password&gt;</span>
    <span class="nt">&lt;/server&gt;</span>
  <span class="nt">&lt;/servers&gt;</span>
<span class="nt">&lt;/settings&gt;</span>
</code></pre></div></div>

<ul>
  <li>此变量会以环境变量 <code class="language-plaintext highlighter-rouge">M2_SETTINGS</code> 出现在 Pod 中。</li>
  <li>ARTIFACT_URL 会直接被 Gitlab 的替换，CODEARTIFACT_AUTH_TOKEN 会在 CI 过程中动态获取。</li>
  <li>这里不能用 <code class="language-plaintext highlighter-rouge">${CODEARTIFACT_AUTH_TOKEN}</code> 这样方式，会被 CI 过程替提前换掉，转义字符是 <strong>$$</strong>。</li>
</ul>

<h2 id="设置-gitlab-ci">设置 Gitlab CI</h2>

<p>添加如下的 <code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code> 文件：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">mvn-deploy</span>

<span class="na">build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">maven:latest</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">mvn-deploy</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">mkdir -p ~/.m2/repository</span>
    <span class="pi">-</span> <span class="s">apt update</span>
    <span class="pi">-</span> <span class="s">apt install unzip</span>
    <span class="pi">-</span> <span class="s">cd /tmp</span>
    <span class="pi">-</span> <span class="s">curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"</span>
    <span class="pi">-</span> <span class="s">unzip awscliv2.zip</span>
    <span class="pi">-</span> <span class="s">./aws/install</span>
    <span class="pi">-</span> <span class="s">export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain cloudbeer --domain-owner $AWS_ACCOUNT_ID --region $AWS_REGION --query authorizationToken --output text`</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cd $CI_PROJECT_DIR</span>
    <span class="pi">-</span> <span class="s">mvn deploy "-Daether.checksums.algorithms=MD5"</span>
</code></pre></div></div>

<ul>
  <li>使用了 maven 作为编译镜像，并安装了 aws cli 命令行工具。</li>
  <li>通过 shell 脚本将动态 CODEARTIFACT_AUTH_TOKEN 和仓库地址 ARTIFACT_URL 替换掉并写入 <code class="language-plaintext highlighter-rouge">.m2/settings.xml</code> 配置信息中。</li>
  <li><code class="language-plaintext highlighter-rouge">-Daether.checksums.algorithms=MD5</code> 这个解决上传过程的 checksum 警告信息。</li>
</ul>

<blockquote>
  <p>本文中，设置了如下的环境变量：</p>

  <ul>
    <li>ARTIFACT_URL: Maven / CodeArtifact 仓库地址</li>
    <li>M2_SETTINGS: Maven 的 .m2/settings.xml 配置</li>
    <li>AWS_ACCESS_KEY_ID</li>
    <li>AWS_SECRET_ACCESS_KEY</li>
    <li>AWS_REGION</li>
    <li>AWS_ACCOUNT_ID</li>
  </ul>
</blockquote>

<h2 id="build-by-tag">Build by Tag</h2>

<p>正式版本类库我们只想被 tag 触发。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag v1.0.0
git push origin v1.0.0
</code></pre></div></div>

<p>可以添加 <code class="language-plaintext highlighter-rouge">only: tags</code> 触发标记，整体如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">mvn-deploy</span>

<span class="na">build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">maven:latest</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">mvn-deploy</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">tags</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">mkdir -p ~/.m2/repository</span>
    <span class="pi">-</span> <span class="s">apt update</span>
    <span class="pi">-</span> <span class="s">apt install unzip</span>
    <span class="pi">-</span> <span class="s">cd /tmp</span>
    <span class="pi">-</span> <span class="s">curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"</span>
    <span class="pi">-</span> <span class="s">unzip awscliv2.zip</span>
    <span class="pi">-</span> <span class="s">./aws/install</span>
    <span class="pi">-</span> <span class="s">export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain cloudbeer --domain-owner $AWS_ACCOUNT_ID --region $AWS_REGION --query authorizationToken --output text`</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cd $CI_PROJECT_DIR</span>
    <span class="pi">-</span> <span class="s">mvn deploy "-Daether.checksums.algorithms=MD5"</span>
</code></pre></div></div>

<blockquote>
  <p>请注意，设置了 protected 的环境变量默认不能被传入 tags 触发的构建过程。</p>

  <p>这个可以修改，在项目的 Settings -&gt; Repository -&gt; Protected tags，可以将 tag 为 <code class="language-plaintext highlighter-rouge">v*</code> 或者 <code class="language-plaintext highlighter-rouge">*-release</code> 的保护起来。</p>

  <p>比如：您需要查询一下 <code class="language-plaintext highlighter-rouge">*-release</code>，然后选择最底下的 Create wildcard 才能创建匹配规则。</p>

  <p><img src="/assets/posts/devops/gitlab-protected-tags.png" alt="Protected tags" /></p>
</blockquote>

<p>同时 Java 项目的 pom.xml 可以写成这样：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>com.amazon.devax<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>eshop-commons<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>${version}<span class="nt">&lt;/version&gt;</span>

    <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
    <span class="nt">&lt;properties&gt;</span>
        <span class="nt">&lt;version</span> <span class="na">default-value=</span><span class="s">"1.0.0-SNAPSHOT"</span><span class="nt">&gt;</span>${env.CI_COMMIT_TAG}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>

    <span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
    <span class="nt">&lt;distributionManagement&gt;</span>
        <span class="nt">&lt;repository&gt;</span>
            <span class="nt">&lt;id&gt;</span>cloudbeer-mvn<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;url&gt;</span>${env.ARTIFACT_URL}<span class="nt">&lt;/url&gt;</span>
        <span class="nt">&lt;/repository&gt;</span>
    <span class="nt">&lt;/distributionManagement&gt;</span>
<span class="nt">&lt;/project&gt;</span>

</code></pre></div></div>

<ul>
  <li>version 这个属性取自环境变量 CI_COMMIT_TAG 这个值，这个环境变量就是 git commit 的 tag 名称。</li>
  <li>最后 deploy 的时候，会发现 release artifact 的版本号和 git 的 tag 保持一致。</li>
</ul>

<hr />

<p>参考文档：</p>

<ul>
  <li><a href="https://docs.gitlab.com/ee/user/packages/maven_repository/">Maven packages in the Package Repository</a></li>
  <li><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/getting-started-install.html">安装或更新最新版本的 AWS CLI</a></li>
  <li><a href="https://docs.aws.amazon.com/codeartifact/latest/ug/maven-mvn.html">Use CodeArtifact with mvn</a></li>
</ul>]]></content><author><name>啤酒云</name></author><category term="aws," /><category term="gitlab," /><category term="devops," /><category term="container" /><summary type="html"><![CDATA[在很多项目里，需要共享类库，所以需要一个构建物仓库，在 AWS 就是 CodeArtifact。本文记录了如何使用 Gitlab 自动化构建 Java 类库，并上传到 CodeArtifact。]]></summary></entry><entry><title type="html">在 AWS EKS 中部署 Gitlab</title><link href="https://youbug.cn/2022/12/gitlab-in-eks.html" rel="alternate" type="text/html" title="在 AWS EKS 中部署 Gitlab" /><published>2022-12-10T09:50:33+00:00</published><updated>2022-12-10T09:50:33+00:00</updated><id>https://youbug.cn/2022/12/gitlab-in-eks</id><content type="html" xml:base="https://youbug.cn/2022/12/gitlab-in-eks.html"><![CDATA[<p>本文记录了 Gitlab 在 Kubernetes 中的安装过程，目标是构建出生产可用的 Gitlab 系统。本文以 AWS EKS 为例。</p>

<h2 id="在-aws-部署-gitlab-的前提条件">在 AWS 部署 Gitlab 的前提条件</h2>

<p>首先需要创建出合适的集群，Gitlab 对 EKS 集群的需求基本需求如下：</p>

<ul>
  <li>Ingress: 需要安装 aws-load-balancer</li>
  <li>PV 卷: 需要安装 ebs-csi-driver</li>
  <li>HPA: 需要安装 metrics-server</li>
</ul>

<p>生产环境下：</p>

<ul>
  <li>PostgresSQL: 安装 RDS for Postgres。</li>
  <li>Redis: 安装 ElasticCache for Reids。</li>
</ul>

<p>高级特性(非必须，这部分内容稍后探讨)：</p>

<ul>
  <li>CI 过程的优化: 创建 Karpenter Provisinor</li>
  <li>CI 缓存: 创建 S3 存储桶</li>
  <li>数据存储的高可用</li>
</ul>

<p>因为 Gitlab 不会创建数据库本身，<strong>需要首先在 Postgres 里创建一个数据库</strong> <code class="language-plaintext highlighter-rouge">gitlab</code>，这个库名可以自定义，稍后指定到安装配置里。</p>

<h2 id="部署-gitlab">部署 Gitlab</h2>

<p>首先在 EKS 中 创建命名空间 gitlab：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create ns gitlab
</code></pre></div></div>

<p>创建数据库和 SMTP Server 的密码 Secret:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> - <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-password
  namespace: gitlab
type: Opaque  
stringData:
  psql-password: &lt;your-psql-secret&gt;
  smtp-password: &lt;your-smtp-password&gt;
</span><span class="no">EOF
</span></code></pre></div></div>

<ul>
  <li>这里的 name 和 key 可以自定义，稍后需要定义到 HelmChart 的配置中。</li>
  <li>用户名是直接明文写在 Gitlab 的配置中的。</li>
  <li>Secret 需要配置到 Gitlab 的安装 namespace。</li>
</ul>

<p>下面是完整的 HelmChart 的配置，这里的格式是 CDK，如果您使用 Helm 直接安装，试着转换成 Values.yaml:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ClusterInfo</span><span class="p">,</span> <span class="nx">ClusterAddOn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@aws-quickstart/eks-blueprints</span><span class="dl">'</span><span class="p">;</span>


<span class="kd">const</span> <span class="nx">smtpEmail</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">cloudeer@gmail.com</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">psqlAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;postgres-address&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">redisAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;redis-address&gt;</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">GitlabAddon</span> <span class="k">implements</span> <span class="nx">ClusterAddOn</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="nx">deploy</span><span class="p">(</span><span class="nx">clusterInfo</span><span class="p">:</span> <span class="nx">ClusterInfo</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">vpc</span> <span class="o">=</span> <span class="nx">clusterInfo</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">vpc</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">clusterInfo</span><span class="p">.</span><span class="nx">getResourceContext</span><span class="p">().</span><span class="nx">scope</span><span class="p">;</span>

    <span class="nx">clusterInfo</span><span class="p">.</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">addHelmChart</span><span class="p">(</span><span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">chart</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">repository</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://charts.gitlab.io/</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">version</span><span class="p">:</span> <span class="dl">"</span><span class="s2">6.6.2</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">namespace</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">release</span><span class="p">:</span> <span class="dl">"</span><span class="s2">abigfun</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">createNamespace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">values</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">global</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">hosts</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">domain</span><span class="p">:</span> <span class="dl">"</span><span class="s2">abig.fun</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">https</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
          <span class="p">},</span>
          <span class="na">shell</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">tcp</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">proxyProtocol</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">},</span>
          <span class="na">email</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">display_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GitLab</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">from</span><span class="p">:</span> <span class="nx">smtpEmail</span><span class="p">,</span>
            <span class="na">reply_to</span><span class="p">:</span> <span class="nx">smtpEmail</span>
          <span class="p">},</span>
          <span class="na">smtp</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">enabled</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">smtp.gmail.com</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">tls</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">587</span><span class="p">,</span>
            <span class="na">authentication</span><span class="p">:</span> <span class="dl">'</span><span class="s1">login</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">user_name</span><span class="p">:</span> <span class="nx">smtpEmail</span><span class="p">,</span>
            <span class="na">starttls_auto</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">openssl_verify_mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">peer</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">secret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">gitlab-password</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">smtp-password</span><span class="dl">'</span>
            <span class="p">}</span>

          <span class="p">},</span>
          <span class="na">ingress</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">tls</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">enabled</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="na">configureCertmanager</span><span class="p">:</span> <span class="kc">false</span>
          <span class="p">},</span>
          <span class="na">psql</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="nx">psqlAddress</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">5432</span><span class="p">,</span>
            <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">secret</span><span class="p">:</span> <span class="dl">"</span><span class="s2">gitlab-password</span><span class="dl">"</span><span class="p">,</span>
              <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">psql-password</span><span class="dl">"</span>
            <span class="p">},</span>
          <span class="p">},</span>
          <span class="na">redis</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="nx">redisAddress</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">6379</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">enabled</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">},</span>
        <span class="na">redis</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">install</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">},</span>
        <span class="na">postgresql</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">install</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="dl">"</span><span class="s2">nginx-ingress</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">controller</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">service</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">annotations</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">service.beta.kubernetes.io/aws-load-balancer-backend-protocol</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">tcp</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">service.beta.kubernetes.io/aws-load-balancer-proxy-protocol</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span>
              <span class="p">}</span>
            <span class="p">},</span>
            <span class="na">config</span><span class="p">:</span> <span class="p">{</span>
              <span class="dl">"</span><span class="s2">use-proxy-protocol</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">},</span>
        <span class="dl">"</span><span class="s2">gitlab-runner</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">runners</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">privileged</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">config</span><span class="p">:</span> <span class="s2">`
[[runners]]
  [runners.kubernetes]
    image = "ubuntu:20.04"
    privileged = true
  [[runners.kubernetes.volumes.empty_dir]]
    name = "docker-certs"
    mount_path = "/certs/client"
    medium = "Memory"
  [[runners.kubernetes.volumes.empty_dir]]
    name = "dind-storage"
    mount_path = "/var/lib/docker"
  [[runners.kubernetes.volumes.host_path]]
    name = "hostpath-modules"
    mount_path = "/lib/modules"
    read_only = true
    host_path = "/lib/modules"
  [[runners.kubernetes.volumes.host_path]]
    name = "hostpath-cgroup"
    mount_path = "/sys/fs/cgroup"
    host_path = "/sys/fs/cgroup"
            `</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>代码解读：</p>

<ul>
  <li>需要配置一个域名，最好这个域名是真实的。本例中使用的是: abig.fun</li>
  <li>Gitlab 安装了一个 NginxIngress Controller，所以 AWS 的 LB 只需要使用 TCP 即可。</li>
  <li>在 K8S 里构建 docker 镜像，需要给 runner 提权，并配置一些 volumes 绑定，如上面的 gitlab-runner.runners.config 配置节点</li>
</ul>

<p>Gitlab 安装完成后，查看安装结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ kubectl get po <span class="nt">-n</span> gitlab
NAME                                                READY   STATUS      RESTARTS       AGE
abigfun-certmanager-7c98d5576b-64q2l                1/1     Running     0              139m
abigfun-certmanager-cainjector-c74d89b67-w8gwj      1/1     Running     0              139m
abigfun-certmanager-webhook-6c4fbb8c86-rkfl6        1/1     Running     0              139m
abigfun-gitaly-0                                    1/1     Running     0              139m
abigfun-gitlab-exporter-fb9dc9776-f5llm             1/1     Running     0              139m
abigfun-gitlab-runner-6f75dd5f8f-snlx5              1/1     Running     8 <span class="o">(</span>109m ago<span class="o">)</span>   139m
abigfun-gitlab-shell-77b9f4fcf9-2lxw8               1/1     Running     0              139m
abigfun-gitlab-shell-77b9f4fcf9-h99gf               1/1     Running     0              139m
abigfun-kas-6b4c6b9b7c-snjt5                        1/1     Running     0              140m
abigfun-kas-6b4c6b9b7c-vrqmv                        1/1     Running     0              139m
abigfun-migrations-2-2pxlh                          0/1     Completed   0              44m
abigfun-minio-596cb868fd-g87wj                      1/1     Running     0              140m
abigfun-minio-create-buckets-2-r4l75                0/1     Completed   0              44m
abigfun-nginx-ingress-controller-59dc9b7959-7xlv2   1/1     Running     0              139m
abigfun-nginx-ingress-controller-59dc9b7959-q96mn   1/1     Running     0              139m
abigfun-prometheus-server-76944cc9cf-srptg          2/2     Running     0              139m
abigfun-registry-864b87ccd8-hgcv6                   1/1     Running     0              139m
abigfun-registry-864b87ccd8-qvvgl                   1/1     Running     0              139m
abigfun-sidekiq-all-in-1-v2-7c98fb88fd-vkk9w        1/1     Running     0              44m
abigfun-toolbox-89cd5c577-twctl                     1/1     Running     0              43m
abigfun-webservice-default-849d958f64-nqfhr         2/2     Running     0              44m
abigfun-webservice-default-849d958f64-rr9q7         2/2     Running     0              43m
</code></pre></div></div>

<h2 id="第一次运行-gitlab">第一次运行 Gitlab</h2>

<p>运行前，需要进行域名解析：</p>

<p>显示 ingress：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get ing <span class="nt">-n</span> gitlab
</code></pre></div></div>

<p>会看到所有的 ingress 都绑定到了一个经典 LB。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                         CLASS           HOSTS               ADDRESS                                                                        PORTS   AGE
abigfun-kas                  abigfun-nginx   kas.abig.fun        xxxxxxxxxx.elb.amazonaws.com   80      58m
abigfun-minio                abigfun-nginx   minio.abig.fun      xxxxxxxxxx.elb.amazonaws.com   80      58m
abigfun-registry             abigfun-nginx   registry.abig.fun   xxxxxxxxxx.elb.amazonaws.com   80      58m
abigfun-webservice-default   abigfun-nginx   gitlab.abig.fun     xxxxxxxxxx.elb.amazonaws.com   80      58m
</code></pre></div></div>

<p>现在去添加解析。分别将上述 HOSTS 中的域名 CNAME 到 <code class="language-plaintext highlighter-rouge">xxxxxxxxxx.elb.amazonaws.com</code>。</p>

<p>等域名生效。访问 <a href="http://gitlab.abig.fun">http://gitlab.abig.fun</a></p>

<p>首先注册一个用户。</p>

<p>管理员账号：root</p>

<p>初始密码：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get secret <span class="nt">--namespace</span> <span class="s2">"gitlab"</span> abigfun-gitlab-initial-root-password <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.data.password}"</span> | <span class="nb">base64</span> <span class="nt">-d</span>
</code></pre></div></div>

<p>使用管理账号进入之后，审批一下 刚刚注册的账号。</p>

<h2 id="功能测试">功能测试</h2>

<p>使用刚刚自己注册的账号登录，创建一个项目，并添加一个文件: <code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code>。 这部分可以测试 git 源代码管理功能。</p>

<p>.gitlab-ci.yml 的内容如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
  <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
  <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/certs"</span>
  <span class="na">DOCKER_TLS_VERIFY</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">DOCKER_CERT_PATH</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/certs/client"</span>

<span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">package</span>

<span class="na">docker-build</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker:20</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">package</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">sleep </span><span class="m">5</span>
    <span class="pi">-</span> <span class="s">docker info</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">echo "Hehe"</span>

</code></pre></div></div>

<ul>
  <li>上面的示例可以测试 docker dind 是否正常</li>
  <li>sleep 5 是为了…我也说不清，新版本的 docker 加一下这个就正常了，我觉得是个坑，搞了很久才发现是这个原因。</li>
</ul>

<p>水一段文字记录一下成功结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running with gitlab-runner 15.6.0 <span class="o">(</span>44a1c2be<span class="o">)</span>
  on abigfun-gitlab-runner-8567dfbd8-bcg84 xJfSsxKi
Preparing the <span class="s2">"kubernetes"</span> executor
00:00
Using Kubernetes namespace: gitlab
Using Kubernetes executor with image docker:20 ...
Using attach strategy to execute scripts...
Preparing environment
00:03
Waiting <span class="k">for </span>pod gitlab/runner-xjfssxki-project-2-concurrent-0wrtsq to be running, status is Pending
Running on runner-xjfssxki-project-2-concurrent-0wrtsq via abigfun-gitlab-runner-8567dfbd8-bcg84...
Getting <span class="nb">source </span>from Git repository
00:01
Fetching changes with git depth <span class="nb">set </span>to 20...
Initialized empty Git repository <span class="k">in</span> /builds/[MASKED]/gateway/.git/
Created fresh repository.
Checking out 7fb43706 as main...
Skipping Git submodules setup
Executing <span class="s2">"step_script"</span> stage of the job script
00:06
<span class="nv">$ </span><span class="nb">sleep </span>5
<span class="nv">$ </span>docker info
Client:
 Context:    default
 Debug Mode: <span class="nb">false
 </span>Plugins:
  buildx: Docker Buildx <span class="o">(</span>Docker Inc., v0.9.1<span class="o">)</span>
  compose: Docker Compose <span class="o">(</span>Docker Inc., v2.14.0<span class="o">)</span>
Server:
 Containers: 0
  Running: 0
  Paused: 0
  Stopped: 0
 Images: 0
 Server Version: 20.10.21
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: <span class="nb">true
  </span>Native Overlay Diff: <span class="nb">true
  </span>userxattr: <span class="nb">false
 </span>Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: 1
 Plugins:
  Volume: <span class="nb">local
  </span>Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file <span class="nb">local </span>logentries splunk syslog
 Swarm: inactive
 Runtimes: io.containerd.runtime.v1.linux runc io.containerd.runc.v2
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: 1c90a442489720eec95342e1789ee8a5e1b9536f
 runc version: v1.1.4-0-g5fd4c4d1
 init version: de40ad0
 Security Options:
  seccomp
   Profile: default
 Kernel Version: 5.10.135
 Operating System: Alpine Linux v3.17 <span class="o">(</span>containerized<span class="o">)</span>
 OSType: linux
 Architecture: x86_64
 CPUs: 2
 Total Memory: 7.655GiB
 Name: runner-xjfssxki-project-2-concurrent-0wrtsq
 ID: MS4S:WD6L:NYMX:Q2EK:AASW:ICI5:2PSL:DARY:5EZ5:FYNP:IPCK:3WVF
 Docker Root Dir: /var/lib/docker
 Debug Mode: <span class="nb">false
 </span>Registry: https://index.docker.io/v1/
 Labels:
 Experimental: <span class="nb">false
 </span>Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: <span class="nb">false
 </span>Product License: Community Engine
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"Hehe"</span>
Hehe
Job succeeded
</code></pre></div></div>

<h2 id="其他">其他</h2>

<h3 id="创建内网-postgres-数据库">创建内网 Postgres 数据库</h3>

<p>数据库没有公网，没有跳板机，我使用了如下方法：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run psql-client <span class="nt">-ndefault</span> <span class="nt">--env</span><span class="o">=</span><span class="s2">"POSTGRES_PASSWORD=pAssw0rd"</span> <span class="nt">--image</span><span class="o">=</span>postgres 
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">exec</span> <span class="nt">-ndefault</span> <span class="nt">-it</span> psql-client <span class="nt">--</span> sh
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="nt">-h</span> &lt;postgres-host&gt; <span class="nt">-U</span> postgres <span class="nt">-W</span> 
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">gitlab</span><span class="p">;</span>
</code></pre></div></div>

<p>感觉好傻！</p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="iac," /><category term="aws" /><category term="gitlab," /><category term="cdk," /><category term="eks" /><summary type="html"><![CDATA[本文记录了 Gitlab 在 Kubernetes 中的安装过程，目标是构建出生产可用的 Gitlab 系统。本文以 AWS EKS 为例。]]></summary></entry><entry><title type="html">使用 terraform 增加 EKS 组件</title><link href="https://youbug.cn/2022/12/modify-eks-by-terraform.html" rel="alternate" type="text/html" title="使用 terraform 增加 EKS 组件" /><published>2022-12-07T12:54:44+00:00</published><updated>2022-12-07T12:54:44+00:00</updated><id>https://youbug.cn/2022/12/modify-eks-by-terraform</id><content type="html" xml:base="https://youbug.cn/2022/12/modify-eks-by-terraform.html"><![CDATA[<p>在已经开通了 EKS 的情况下，使用 terraform 给 EKS 集群安装组件。</p>

<h2 id="常用-sdk">常用 SDK</h2>

<p>操作 EKS 的常用 SDK 如下：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 4.40.0"</span>
    <span class="p">}</span>
    <span class="nx">kubernetes</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/kubernetes"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 2.15.0"</span>
    <span class="p">}</span>
    <span class="nx">helm</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/helm"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 2.7.1"</span>
    <span class="p">}</span>
    <span class="nx">kubectl</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"gavinbunney/kubectl"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 1.14.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>hashicorp/aws: 操作 aws 资源</li>
  <li>hashicorp/kubernetes: 操作 k8s 资源</li>
  <li>hashicorp/helm: 操作 helm 图样</li>
  <li>gavinbunney/kubectl: 被广泛采用的个人工具，可以支持单资源 kubectl 操作</li>
</ul>

<h2 id="先决条件">先决条件</h2>

<p>对于已经创建资源，在 terraform 中，通常使用 data 去查询，如下代码，只需要指定 集群的 名字就可以查询到集群的信息：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">data</span> <span class="s2">"aws_eks_cluster"</span> <span class="s2">"main"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
<span class="p">}</span>
</code></pre></div></div>

<p>对于 helm 和 kubectl 工具，我们需要为其配置相应的权限：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"helm"</span> <span class="p">{</span>
  <span class="nx">kubernetes</span> <span class="p">{</span>
    <span class="nx">host</span>                   <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">endpoint</span>
    <span class="nx">cluster_ca_certificate</span> <span class="p">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">certificate_authority</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="k">data</span><span class="p">)</span>
    <span class="nx">exec</span> <span class="p">{</span>
      <span class="nx">api_version</span> <span class="p">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
      <span class="nx">args</span>        <span class="p">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="p">,</span> <span class="s2">"--region"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">region</span><span class="p">]</span>
      <span class="nx">command</span>     <span class="p">=</span> <span class="s2">"aws"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">provider</span> <span class="s2">"kubectl"</span> <span class="p">{</span>
  <span class="nx">host</span>                   <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">endpoint</span>
  <span class="nx">cluster_ca_certificate</span> <span class="p">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">certificate_authority</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="k">data</span><span class="p">)</span>
  <span class="nx">exec</span> <span class="p">{</span>
    <span class="nx">api_version</span> <span class="p">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
    <span class="nx">args</span>        <span class="p">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="p">,</span> <span class="s2">"--region"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">region</span><span class="p">]</span>
    <span class="nx">command</span>     <span class="p">=</span> <span class="s2">"aws"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="使用-helm-安装组件">使用 helm 安装组件</h2>

<p>使用 helm 安装非常简单，参照 helm 图样的说明即可，传入相应的参数.</p>

<p>下面的代码是在集群内安装 Gitlab 的示例：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"namespace"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"gitlab"</span>
<span class="p">}</span>

<span class="k">variable</span> <span class="s2">"name"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"gitlab"</span>
<span class="p">}</span>

<span class="k">variable</span> <span class="s2">"domain"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"helm_release"</span> <span class="s2">"gitlab"</span> <span class="p">{</span>
  <span class="nx">namespace</span>        <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">namespace</span>
  <span class="nx">create_namespace</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">name</span>             <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">name</span>
  <span class="nx">repository</span>       <span class="p">=</span> <span class="s2">"https://charts.gitlab.io/"</span>
  <span class="nx">chart</span>            <span class="p">=</span> <span class="s2">"gitlab"</span>
  <span class="nx">version</span>          <span class="p">=</span> <span class="s2">"6.5.5"</span>

  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"global.ingress.enabled"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"global.ingress.configureCertmanager"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab.certmanager.install"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab.prometheus.install"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab.grafana.install"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"nginx-ingress.enabled"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"gitlab-runner.enabled"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="nx">set</span> <span class="p">{</span>
    <span class="nx">name</span>  <span class="p">=</span> <span class="s2">"global.hosts.domain"</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">domain</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="使用-kubectl-安装组件">使用 kubectl 安装组件</h2>

<p>下面的示例安装了 argocd，使用了官网的默认安装方法，使用 kubectl 直接执行 yaml 文件。</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"namespace"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"argocd"</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"kubectl_manifest"</span> <span class="s2">"argocd_namepsace"</span> <span class="p">{</span>
  <span class="nx">yaml_body</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">YAML</span><span class="sh">
apiVersion: v1
kind: Namespace
metadata:
  name: ${var.namespace}
</span><span class="no">YAML
</span><span class="p">}</span>
</code></pre></div></div>

<p>在集群内创建了一个 namespace。</p>

<p>由于 kubectl_manifest 只能执行单资源，象 argocd 给出的 yaml 文件里，包含了很多的资源，此时需要使用 <code class="language-plaintext highlighter-rouge">kubectl_file_documents</code> 将一大段资源解构成单个资源数组。</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">data</span> <span class="s2">"http"</span> <span class="s2">"argocd_yaml"</span> <span class="p">{</span>
  <span class="nx">url</span> <span class="p">=</span> <span class="s2">"https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"</span>
<span class="p">}</span>

<span class="k">data</span> <span class="s2">"kubectl_file_documents"</span> <span class="s2">"argocd_docs"</span> <span class="p">{</span>
  <span class="nx">content</span> <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="nx">argocd_yaml</span><span class="p">.</span><span class="nx">response_body</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后循环执行即可：</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"kubectl_manifest"</span> <span class="s2">"argocd"</span> <span class="p">{</span>
  <span class="nx">for_each</span>           <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">kubectl_file_documents</span><span class="p">.</span><span class="nx">argocd_docs</span><span class="p">.</span><span class="nx">manifests</span>
  <span class="nx">yaml_body</span>          <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">override_namespace</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">namespace</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>啤酒云</name></author><category term="iac," /><category term="aws," /><category term="container" /><category term="iac," /><category term="container," /><category term="aws," /><category term="terraform" /><summary type="html"><![CDATA[在已经开通了 EKS 的情况下，使用 terraform 给 EKS 集群安装组件。]]></summary></entry></feed>