<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://youbug.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://youbug.cn/" rel="alternate" type="text/html" /><updated>2023-03-29T17:25:02+00:00</updated><id>https://youbug.cn/feed.xml</id><title type="html">YouBug</title><subtitle>分享，记录而已</subtitle><entry><title type="html">AI/ML Bookmarks</title><link href="https://youbug.cn/2023/03/aiml-awsome-projects.html" rel="alternate" type="text/html" title="AI/ML Bookmarks" /><published>2023-03-29T02:10:49+00:00</published><updated>2023-03-29T02:10:49+00:00</updated><id>https://youbug.cn/2023/03/aiml-awsome-projects</id><content type="html" xml:base="https://youbug.cn/2023/03/aiml-awsome-projects.html"><![CDATA[<p>本文就是 Bookmarks，是我体验过的(🦋)，正在体验的或准备体验的一些现成的库和链接。本文近期可能随时更新。</p>

<h2 id="-中文语言大模型">🐝 中文语言大模型</h2>

<h3 id="chatglm-">ChatGLM 🦋</h3>

<p>清华大学的大语言模型。</p>

<p>ChatGLM-6B 是一个开源的、支持中英双语的对话语言模型。</p>

<p><a href="https://github.com/THUDM/ChatGLM-6B">https://github.com/THUDM/ChatGLM-6B</a></p>

<p><a href="https://huggingface.co/THUDM">https://huggingface.co/THUDM</a></p>

<h3 id="chatyuan-">ChatYuan 🦋</h3>

<p>Large Language Model for Dialogue in Chinese and English，是一个支持中英双语的功能型对话语言大模型。</p>

<p><a href="https://github.com/clue-ai/ChatYuan">https://github.com/clue-ai/ChatYuan</a></p>

<p><a href="https://www.clueai.cn/">https://www.clueai.cn/</a></p>

<p><a href="https://huggingface.co/ClueAI">https://huggingface.co/ClueAI</a></p>

<h2 id="--虚拟主播">🐝  虚拟主播</h2>

<h3 id="sadtalker-">SadTalker 🦋</h3>

<p>Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation</p>

<p>输入图片文件，声音文件，生成符合口型的播音视频。</p>

<p><a href="https://github.com/Winfredy/SadTalker">https://github.com/Winfredy/SadTalker</a></p>

<blockquote>
  <p>当前特性：</p>

  <ul>
    <li>3D 效果</li>
    <li>可以眨眼睛</li>
    <li>
      <p>镜头，眼神转移</p>
    </li>
    <li>输入图片会被截取脸部放大 (2023-03-28)</li>
    <li>生成的视频偏小  (2023-03-28)</li>
    <li>程序运行环境较为苛刻，需要 N 卡， cudnn 等 (2023-03-28)</li>
  </ul>
</blockquote>

<h3 id="wav2lip">Wav2Lip</h3>

<p>Accurately Lip-syncing Videos In The Wild.</p>

<p><a href="https://github.com/Rudrabha/Wav2Lip">https://github.com/Rudrabha/Wav2Lip</a></p>

<p><a href="https://www.youtube.com/watch?v=Ic0TBhfuOrA">https://www.youtube.com/watch?v=Ic0TBhfuOrA</a></p>

<h2 id="-声音">🐝 声音</h2>

<h3 id="audioldm-">audioldm 🦋</h3>

<p>Generate speech, sound effects, music and beyond.</p>

<p>This repo currently support:</p>

<ul>
  <li>Text-to-Audio Generation: Generate audio given text input.</li>
  <li>Audio-to-Audio Generation: Given an audio, generate another audio that contain the same type of sound.</li>
  <li>Text-guided Audio-to-Audio Style Transfer: Transfer the sound of an audio into another one using the text description.</li>
</ul>

<p><a href="https://github.com/haoheliu/AudioLDM">https://github.com/haoheliu/AudioLDM</a></p>

<p><a href="https://audioldm.github.io/">https://audioldm.github.io/</a></p>

<blockquote>
  <ul>
    <li>通过文本生产声音</li>
    <li>也可以生成音乐</li>
    <li>当前默认的 model 效果一般，不知道自己练会怎样 (2023-03-29)</li>
  </ul>
</blockquote>

<h2 id="--试穿try-on">🐝  试穿(Try-On)</h2>

<h3 id="dressing-in-order-dior">Dressing in Order (DiOr)</h3>

<p>Dressing in Order: Recurrent Person Image Generation for Pose Transfer, Virtual Try-on and Outfit Editing.</p>

<p>可以多件衣服。</p>

<p><a href="https://github.com/cuiaiyu/dressing-in-order">https://github.com/cuiaiyu/dressing-in-order</a></p>

<h3 id="hr-viton">HR-VITON</h3>

<p><a href="https://github.com/sangyun884/HR-VITON">https://github.com/sangyun884/HR-VITON</a></p>

<p><a href="https://github.com/shadow2496/VITON-HD">https://github.com/shadow2496/VITON-HD</a></p>

<h3 id="pidm">PIDM</h3>

<p>Person Image Synthesis via Denoising Diffusion Model Open</p>

<p>可以控制姿态。提供 ipynb 文件。</p>

<p><a href="https://github.com/ankanbhunia/PIDM">https://github.com/ankanbhunia/PIDM</a></p>

<h2 id="--开源-ui">🐝  开源 UI</h2>

<h3 id="stable-diffusion-web-ui-">Stable Diffusion web UI 🦋</h3>

<p>Diffussion 生图 and More，无需多言。</p>

<p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a></p>

<h3 id="invokeai-">InvokeAI 🦋</h3>

<p>Diffussion 生图，界面精美。</p>

<p><a href="https://github.com/invoke-ai/InvokeAI">https://github.com/invoke-ai/InvokeAI</a></p>

<p><a href="https://invoke-ai.github.io/InvokeAI/">https://invoke-ai.github.io/InvokeAI/</a></p>

<h2 id="--商业在线应用">🐝  商业/在线应用</h2>

<h3 id="openai">OpenAI</h3>

<p>ChatGPT</p>

<p>DALL.E</p>

<p>…</p>

<h3 id="midjourney-">midjourney 🦋</h3>

<p>Diffussion 生图，在 Discord 内使用。</p>

<p><a href="https://www.midjourney.com/">https://www.midjourney.com/</a></p>

<h3 id="leonardoai">Leonardo.ai</h3>

<p>Diffussion 生图，在 Discord 内使用。</p>

<p><a href="https://leonardo.ai/">https://leonardo.ai/</a></p>

<h3 id="playground-ai-">Playground AI 🦋</h3>

<p>每天免费 1000 张，限定模型为 SD 1.5, SD 2.1。Prompt 参考。</p>

<p><a href="https://playgroundai.com/">https://playgroundai.com/</a></p>

<h3 id="prompthero">PromptHero</h3>

<p>Prompt 参考，Pro 版本提供 SD 模型生产。</p>

<p><a href="https://prompthero.com/">https://prompthero.com/</a></p>

<h3 id="runaway-ml">runaway ml</h3>

<p>在线视频工具 <a href="https://app.runwayml.com/">https://app.runwayml.com/</a></p>

<p>开源：<a href="https://github.com/runwayml">https://github.com/runwayml</a></p>

<h3 id="d-id-">D-ID 🦋</h3>

<p>数字人合成。</p>

<p><a href="https://www.d-id.com/">https://www.d-id.com/</a></p>

<h3 id="百度文心">百度文心</h3>

<p>文心大模型</p>

<p><a href="https://wenxin.baidu.com/">https://wenxin.baidu.com/</a></p>

<p>文心一言</p>

<p><a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/</a></p>

<p>文心一格 🦋</p>

<p><a href="https://yige.baidu.com/">https://yige.baidu.com/</a></p>

<h3 id="网易">网易</h3>

<p>天音 - 音乐创作平台</p>

<p><a href="https://tianyin.163.com/">https://tianyin.163.com/</a></p>

<h2 id="--其他">🐝  其他</h2>

<h3 id="film">FILM</h3>

<p>Frame Interpolation for Large Motion，视频插帧。</p>

<p><a href="https://github.com/google-research/frame-interpolation">https://github.com/google-research/frame-interpolation</a></p>

<h3 id="rife">RIFE</h3>

<p>Real-Time Intermediate Flow Estimation for Video Frame Interpolation.</p>

<p>ECCV 2022 - 视频插帧中的实时中间流估计，旷世科技。</p>

<p><a href="https://github.com/megvii-research/ECCV2022-RIFE">https://github.com/megvii-research/ECCV2022-RIFE</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/568553080">https://zhuanlan.zhihu.com/p/568553080</a></p>

<h3 id="humannerf">HumanNeRF</h3>

<p>Free-viewpoint Rendering of Moving People from Monocular Video (CVPR 2022)</p>

<p><a href="https://github.com/chungyiweng/humannerf">https://github.com/chungyiweng/humannerf</a></p>

<p><a href="https://github.com/zhaofuq/HumanNeRF">https://github.com/zhaofuq/HumanNeRF</a></p>

<p><a href="https://github.com/Chen-Lehan/HumanNeRF">https://github.com/Chen-Lehan/HumanNeRF</a></p>

<h3 id="sysmocap">SysMocap</h3>

<p>A cross-platform real-time video-driven motion capture and 3D virtual character rendering system for VTuber/Live/AR/VR.</p>

<p>跨平台的实时视频驱动动作捕捉及3D虚拟形象生成系统 for VTuber/Live/AR/VR.</p>

<p><a href="https://github.com/xianfei/SysMocap">https://github.com/xianfei/SysMocap</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml" /><summary type="html"><![CDATA[本文就是 Bookmarks，是我体验过的(🦋)，正在体验的或准备体验的一些现成的库和链接。本文近期可能随时更新。]]></summary></entry><entry><title type="html">使用 Java 组装 Amazon Textract 解析出来的键值对</title><link href="https://youbug.cn/2023/03/textract-form-data.html" rel="alternate" type="text/html" title="使用 Java 组装 Amazon Textract 解析出来的键值对" /><published>2023-03-04T05:10:49+00:00</published><updated>2023-03-04T05:10:49+00:00</updated><id>https://youbug.cn/2023/03/textract-form-data</id><content type="html" xml:base="https://youbug.cn/2023/03/textract-form-data.html"><![CDATA[<p>Amazon Textract 就是 OCR, 针对国际单据啥的识别有奇效，看控制台的 Demo 觉得很受惊，居然有 KV 键值对的显示。但用 Java 代码咋获取键值对呢？他的 KEY_VALUE_SET 类型的 Block 使用方法 .text() 啥都没有哇。</p>

<h2 id="java-的-block-输出">Java 的 Block 输出</h2>

<p>先打印一下看看:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="nc">Block</span> <span class="n">block</span> <span class="o">:</span> <span class="n">blocks</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The block type is "</span> <span class="o">+</span> <span class="n">block</span><span class="o">.</span><span class="na">blockType</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">block</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----------\n"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下面是打印的原始 Block 部分信息（实际上有一大坨，这里一个类型留了一个）：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
The block type is PAGE
Block(BlockType=PAGE, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.8405368, Height=1.0, Left=0.09841533, Top=0.0), Polygon=[Point(X=0.09841533, Y=0.0), Point(X=0.9389521, Y=0.0), Point(X=0.9229099, Y=1.0), Point(X=0.11533637, Y=1.0)]), Id=bbede76c-e163-45ee-81d4-82afc8bad5ad, Relationships=[Relationship(Type=CHILD, Ids=[e694910a-dc8c-4bd4-9b4e-d6262b549705, c959f258-1e33-4591-8394-dce960cc7e55, 82c3e843-c149-4f8b-b3bc-0e3299f6d551, 4932758c-12a7-4bc3-90a4-87a135c54d6e, 01aa9893-ccb2-4b0a-b2a0-ea954b35fe4b, 2975d587-f5de-4436-92f3-480f1c9aa656, 951fca1a-7f9d-475b-8aff-e9e0ef9000d5, ....])])
----------

The block type is LINE
Block(BlockType=LINE, Confidence=70.37652, Text=xxxxxxxxxxx - mail@frankonia.de, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.2087112, Height=0.023847194, Left=0.58435017, Top=0.03585644), Polygon=[Point(X=0.58439976, Y=0.03585644), Point(X=0.7930614, Y=0.036802612), Point(X=0.7928248, Y=0.059703637), Point(X=0.58435017, Y=0.058780655)]), Id=e694910a-dc8c-4bd4-9b4e-d6262b549705, Relationships=[Relationship(Type=CHILD, Ids=[3d1c10aa-9ee9-4efa-8f24-eb4487fcc927, 7e653065-ecf4-47a5-9518-aa4b70fcd7ea, d103f1ac-25ab-48cf-9824-0ff6277e59e2])])
----------

The block type is WORD
Block(BlockType=WORD, Confidence=98.42162, Text=Fax, TextType=PRINTED, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.018412054, Height=0.01635857, Left=0.6832591, Top=0.061593868), Polygon=[Point(X=0.68335754, Y=0.061593868), Point(X=0.7016712, Y=0.061674744), Point(X=0.70156115, Y=0.07795244), Point(X=0.6832591, Y=0.07787301)]), Id=66db8d1e-a1b6-40c4-8a77-afc4fc250870)
----------

The block type is WORD
Block(BlockType=WORD, Confidence=98.718414, Text=€, TextType=PRINTED, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.0076815123, Height=0.018535566, Left=0.8544621, Top=0.87233585), Polygon=[Point(X=0.8547062, Y=0.87233585), Point(X=0.8621436, Y=0.8723405), Point(X=0.86189395, Y=0.8908714), Point(X=0.8544621, Y=0.8908674)]), Id=db9dcabb-8aa6-4bb7-b924-5f91add0530b)
----------


The block type is KEY_VALUE_SET
Block(BlockType=KEY_VALUE_SET, Confidence=86.59171, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.08317889, Height=0.024558436, Left=0.6154753, Top=0.7993664), Polygon=[Point(X=0.6155607, Y=0.7993664), Point(X=0.6986542, Y=0.79944664), Point(X=0.69848675, Y=0.8239249), Point(X=0.6154753, Y=0.82385427)]), Id=89664d58-b1eb-4ad3-912f-705500e4b08b, Relationships=[Relationship(Type=VALUE, Ids=[0df283e1-7079-46ef-baea-fafedc580ee4]), Relationship(Type=CHILD, Ids=[11a76d29-860a-43f4-bf8a-816b5993ae9c, 47f62df8-6fb1-4b09-b4ff-ac8901f230a3])], EntityTypes=[KEY])
----------

The block type is KEY_VALUE_SET
Block(BlockType=KEY_VALUE_SET, Confidence=86.59171, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.056614958, Height=0.023218233, Left=0.81078696, Top=0.7957822), Polygon=[Point(X=0.8110504, Y=0.7957822), Point(X=0.8674019, Y=0.7958376), Point(X=0.8670859, Y=0.8190004), Point(X=0.81078696, Y=0.8189512)]), Id=0df283e1-7079-46ef-baea-fafedc580ee4, Relationships=[Relationship(Type=CHILD, Ids=[2f71d668-e883-40dc-9d73-0a50d5954e84, 904205cd-0eeb-4bd6-a4e1-05c1dd168182])], EntityTypes=[VALUE])
----------

</code></pre></div></div>

<h2 id="数据结构分析">数据结构分析</h2>

<p>这真是个费眼睛的活儿，对比 python 的代码，分析出 KEY_VALUE_SET 部分的结构为：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">KEY_VALUE_SET</code> 分类 <code class="language-plaintext highlighter-rouge">KEY</code> 和 <code class="language-plaintext highlighter-rouge">VALUE</code>, 这个记录在 <code class="language-plaintext highlighter-rouge">blockType()</code> 为 <code class="language-plaintext highlighter-rouge">KEY_VALUE_SET</code> 的 <code class="language-plaintext highlighter-rouge">EntityTypes</code> 字段里了。</li>
  <li>通过 <code class="language-plaintext highlighter-rouge">KEY</code> 的 block 的 <code class="language-plaintext highlighter-rouge">Relationships</code> 中的 <code class="language-plaintext highlighter-rouge">CHILD</code> 的 <code class="language-plaintext highlighter-rouge">Ids</code> 去找到对应的 <code class="language-plaintext highlighter-rouge">WORD</code>，<code class="language-plaintext highlighter-rouge">text()</code> 就是 <code class="language-plaintext highlighter-rouge">KEY</code> 的值了。</li>
  <li><code class="language-plaintext highlighter-rouge">KEY</code> block 的 <code class="language-plaintext highlighter-rouge">Relationships</code> 里有一个 <code class="language-plaintext highlighter-rouge">VALUE</code> 的关系，value block 的 <code class="language-plaintext highlighter-rouge">Ids</code> 就存在这里。</li>
  <li>通过上面的 id 匹配 block 的 <code class="language-plaintext highlighter-rouge">Id</code> 字段得到对应的 value block。</li>
  <li>然后通过 value block <code class="language-plaintext highlighter-rouge">Relationships</code> 的 <code class="language-plaintext highlighter-rouge">CHILD</code> 再寻找为 <code class="language-plaintext highlighter-rouge">WORD</code> 类型的 block 的值。</li>
  <li><code class="language-plaintext highlighter-rouge">LINE</code> 类型暂时没用上。</li>
</ul>

<h2 id="完整代码">完整代码</h2>

<p>然后就可以写出 java 对应的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">aws.cloudbeer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.regions.Region</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.services.textract.TextractClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.services.textract.model.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Region</span> <span class="n">region</span> <span class="o">=</span> <span class="nc">Region</span><span class="o">.</span><span class="na">US_EAST_1</span><span class="o">;</span>
        <span class="nc">TextractClient</span> <span class="n">textractClient</span> <span class="o">=</span> <span class="nc">TextractClient</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">region</span><span class="o">(</span><span class="n">region</span><span class="o">)</span>
                <span class="o">.</span><span class="na">credentialsProvider</span><span class="o">(</span><span class="nc">ProfileCredentialsProvider</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="n">analyzeDocS3</span><span class="o">(</span><span class="n">textractClient</span><span class="o">,</span> <span class="s">"cloudbeer-textract"</span><span class="o">,</span> <span class="s">"1.jpg"</span><span class="o">);</span>
        <span class="n">textractClient</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">analyzeDocS3</span><span class="o">(</span><span class="nc">TextractClient</span> <span class="n">textractClient</span><span class="o">,</span> <span class="nc">String</span> <span class="n">bucketName</span><span class="o">,</span> <span class="nc">String</span> <span class="n">docName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">S3Object</span> <span class="n">s3Object</span> <span class="o">=</span> <span class="nc">S3Object</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">bucket</span><span class="o">(</span><span class="n">bucketName</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">docName</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

            <span class="nc">Document</span> <span class="n">myDoc</span> <span class="o">=</span> <span class="nc">Document</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">s3Object</span><span class="o">(</span><span class="n">s3Object</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>


            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FeatureType</span><span class="o">&gt;</span> <span class="n">featureTypes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">FeatureType</span><span class="o">&gt;();</span>
            <span class="n">featureTypes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">FeatureType</span><span class="o">.</span><span class="na">FORMS</span><span class="o">);</span>
<span class="c1">//            featureTypes.add(FeatureType.TABLES);</span>
<span class="c1">//            featureTypes.add(FeatureType.QUERIES);</span>
<span class="c1">//            featureTypes.add(FeatureType.SIGNATURES);</span>


            <span class="nc">AnalyzeDocumentRequest</span> <span class="n">analyzeDocumentRequest</span> <span class="o">=</span> <span class="nc">AnalyzeDocumentRequest</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">featureTypes</span><span class="o">(</span><span class="n">featureTypes</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">document</span><span class="o">(</span><span class="n">myDoc</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

            <span class="nc">AnalyzeDocumentResponse</span> <span class="n">analyzeDocument</span> <span class="o">=</span> <span class="n">textractClient</span><span class="o">.</span><span class="na">analyzeDocument</span><span class="o">(</span><span class="n">analyzeDocumentRequest</span><span class="o">);</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">docInfo</span> <span class="o">=</span> <span class="n">analyzeDocument</span><span class="o">.</span><span class="na">blocks</span><span class="o">();</span>

            <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">kvSets</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>


            <span class="k">for</span> <span class="o">(</span><span class="nc">Block</span> <span class="n">block</span> <span class="o">:</span> <span class="n">docInfo</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">block</span><span class="o">.</span><span class="na">blockType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">BlockType</span><span class="o">.</span><span class="na">KEY_VALUE_SET</span> <span class="o">&amp;&amp;</span> <span class="n">block</span><span class="o">.</span><span class="na">entityTypes</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="nc">EntityType</span><span class="o">.</span><span class="na">KEY</span><span class="o">))</span> <span class="o">{</span>

                    <span class="nc">StringBuilder</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
                    <span class="nc">StringBuilder</span> <span class="n">val</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

                    <span class="k">for</span> <span class="o">(</span><span class="nc">Relationship</span> <span class="n">relationship</span> <span class="o">:</span> <span class="n">block</span><span class="o">.</span><span class="na">relationships</span><span class="o">())</span> <span class="o">{</span>
                        <span class="c1">// 通过 KeySet  的关系中的 CHILD 去找Key的的值</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">relationship</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="nc">RelationshipType</span><span class="o">.</span><span class="na">CHILD</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">relationship</span><span class="o">.</span><span class="na">ids</span><span class="o">();</span>
                            <span class="n">key</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">findKeyWord</span><span class="o">(</span><span class="n">docInfo</span><span class="o">,</span> <span class="n">ids</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="c1">// 通过 KeySet 的关系中的 VALUE 去找 VALUE 的 block，在通过 VALUE 的 CHILD 去找值</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">relationship</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="nc">RelationshipType</span><span class="o">.</span><span class="na">VALUE</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">relationship</span><span class="o">.</span><span class="na">ids</span><span class="o">();</span>
                            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">val</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">findValueWord</span><span class="o">(</span><span class="n">docInfo</span><span class="o">,</span> <span class="n">ids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">))).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
                            <span class="o">}</span>

                        <span class="o">}</span>
                    <span class="o">}</span>
                    <span class="n">kvSets</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">val</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">kvSets</span><span class="o">);</span>


        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">TextractException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">findValueWord</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">blocks</span><span class="o">,</span> <span class="nc">String</span> <span class="n">keyId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">rtn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">valBlock</span> <span class="o">=</span> <span class="n">blocks</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">blockType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">BlockType</span><span class="o">.</span><span class="na">KEY_VALUE_SET</span> <span class="o">&amp;&amp;</span> <span class="n">keyId</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">id</span><span class="o">())).</span><span class="na">findFirst</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">valBlock</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
             <span class="nc">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="n">valBlock</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Relationship</span> <span class="n">relationship</span> <span class="o">:</span> <span class="n">block</span><span class="o">.</span><span class="na">relationships</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// 通过 KeySet  的关系 儿子去找Key的的值</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">relationship</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="nc">RelationshipType</span><span class="o">.</span><span class="na">CHILD</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">relationship</span><span class="o">.</span><span class="na">ids</span><span class="o">();</span>
                    <span class="n">rtn</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">findKeyWord</span><span class="o">(</span><span class="n">blocks</span><span class="o">,</span> <span class="n">ids</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rtn</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">findKeyWord</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">blocks</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">StringBuilder</span> <span class="n">rtn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">vBlocks</span> <span class="o">=</span> <span class="n">blocks</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">blockType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">BlockType</span><span class="o">.</span><span class="na">WORD</span> <span class="o">&amp;&amp;</span> <span class="n">id</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">id</span><span class="o">())).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">vBlocks</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">rtn</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">vBlocks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">text</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rtn</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<hr />
<p>参考：</p>

<p>Textract JAVA Demo <a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/javav2/example_code/textract">https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/javav2/example_code/textract</a></p>

<p>Python Extract KV Pairs <a href="https://docs.aws.amazon.com/textract/latest/dg/examples-extract-kvp.html">https://docs.aws.amazon.com/textract/latest/dg/examples-extract-kvp.html</a></p>]]></content><author><name>啤酒云</name></author><category term="aws," /><category term="tucao" /><summary type="html"><![CDATA[Amazon Textract 就是 OCR, 针对国际单据啥的识别有奇效，看控制台的 Demo 觉得很受惊，居然有 KV 键值对的显示。但用 Java 代码咋获取键值对呢？他的 KEY_VALUE_SET 类型的 Block 使用方法 .text() 啥都没有哇。]]></summary></entry><entry><title type="html">在 AWS 里，使用 Jenkins 跨账号执行任务</title><link href="https://youbug.cn/2023/03/jenkins-assume-role.html" rel="alternate" type="text/html" title="在 AWS 里，使用 Jenkins 跨账号执行任务" /><published>2023-03-02T07:02:33+00:00</published><updated>2023-03-02T07:02:33+00:00</updated><id>https://youbug.cn/2023/03/jenkins-assume-role</id><content type="html" xml:base="https://youbug.cn/2023/03/jenkins-assume-role.html"><![CDATA[<p>在 AWS 中，企业的 Jenkins 通常安装在开发测试环境，如果需要操作生产环境中的资源，如何设置权限呢？本文介绍了方法。</p>

<h2 id="jenkins-configuration-jenkins-设置">Jenkins Configuration （Jenkins 设置）</h2>

<p>As a Jenkins administator, Menu: Manage Jenkins -&gt; Manage Plugins, Search “Pipeline: AWS Steps”, ensure this Jenkins plugin is installed.</p>

<p>以 Jenkins 的管理员身份登录，进入菜单： Manage Jenkins -&gt; Manage Plugins，搜索 “Pipeline: AWS Steps”，安装这个插件。</p>

<p>From “Manage Jenkins  -&gt; Configure System” to enable ‘Retrieve credentials from node’.</p>

<p>在菜单 “系统管理 -&gt; 系统配置” 中，启用 “Pipeline: AWS Steps” 的 “Retrieve credentials from node”。</p>

<h2 id="node-settings-节点设置jenkins-运行节点">Node settings 节点设置（Jenkins 运行节点）</h2>

<p>My Jenkins is installed in an EC2 instace and the workers in EC2 also.</p>

<p>Firstly, Bind a role to the EC2. Choose the Jenkins EC2, then choose Actions -&gt; Security -&gt; Modify IAM role.</p>

<p>现在设置 Jenkins 所在的 EC2 的角色。</p>

<p>选择目标 EC2，并选择如图的菜单：</p>

<p><img src="/assets/posts/devops/jenkins-assume-01.png" alt="Set EC2 Role" /></p>

<p>Next, you can choose a role, or create a new one.</p>

<p>When you update the IAM role of EC2, your Jenkins will be granted the role.</p>

<p>现在请选择一个 role，或者创建一个新的。</p>

<p>选择好之后，更新 EC2 的 Role。</p>

<h2 id="create-an-iam-role-in-another-account-在另一个账号中创建角色">Create an IAM Role in another account （在另一个账号中创建角色）</h2>

<p>Now, We can login to the production account.</p>

<p>Create a new role:</p>

<p>现在登录到生产账号。并创建一个角色。</p>

<ul>
  <li>Trusted entity type: Amazon Web Services account</li>
  <li>An Amazon Web Services account: Another Amazon Web Services account of the account id of Jenkins installed (number, such as 12345679012).</li>
  <li>Next choose some permissions policy.</li>
  <li>Give the role a name, such as ‘for-Jenkins’.</li>
</ul>

<h2 id="modify-the-jenkins-ec2-role">Modify the Jenkins EC2 role</h2>

<p>Now back to the Jenkins account. Modify the ec2 role.</p>

<p>In the “Permisions” tab, choose “Add permissions -&gt; Create inline policy”:</p>

<p>现在返回 Jenkins 所在的账号，给刚刚 EC2 的角色进行角色扮演。</p>

<p>在角色设置面板设置一个内联策略，进入 “Permisions” tab, 选择 “Add permissions -&gt; Create inline policy”:</p>

<p>The policy is like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws-cn:iam::&lt;your-prod-account-id&gt;:role/for-Jenkins"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sts:AssumeRole"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="jenkinsfile">Jenkinsfile</h2>

<p>Now the Jenkinsfile maybe as:</p>

<p>Jenkinsfile 这么写就行:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipeline</span> <span class="o">{</span>
  <span class="n">agent</span> <span class="n">any</span>
  <span class="n">stages</span> <span class="o">{</span>
    <span class="n">stage</span><span class="o">(</span><span class="s1">'build'</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">steps</span> <span class="o">{</span>
        <span class="n">script</span> <span class="o">{</span>
          <span class="n">withAWS</span><span class="o">(</span><span class="nl">role:</span><span class="s1">'for-Jenkins'</span><span class="o">,</span> <span class="nl">roleAccount:</span><span class="s1">'&lt;your-prod-account-id&gt;'</span><span class="o">,</span> <span class="nl">region:</span> <span class="s1">'cn-northwest-1'</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">def</span> <span class="n">res</span> <span class="o">=</span> <span class="n">s3Upload</span><span class="o">(</span><span class="nl">file:</span><span class="s1">'readme.md'</span><span class="o">,</span> <span class="nl">bucket:</span><span class="s1">'xxxx'</span><span class="o">,</span> <span class="nl">path:</span><span class="s1">'readme.md'</span><span class="o">)</span>
            <span class="n">println</span><span class="o">(</span><span class="n">res</span><span class="o">)</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>You will see the file uploaded to the target s3 bucket if the permissions are right.</p>

<p>如果权限设置合理，就可以看到 Jenkins 成功上传文件到另一个账号了。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Setting AWS region cn-northwest-1 
 Retrieving credentials from node.
Requesting assume role
Assuming role ARN is arn:aws-cn:iam::123456789012:role/ role arn:aws-cn:sts::123456789012:assumed-role/for-Jenkins/Jenkins-Jenkins-withAWS-gitee-16 with <span class="nb">id </span>AROATUJBXHIVWAC6AZW3X:Jenkins-Jenkins-withAWS-gitee-16 
 <span class="o">[</span>Pipeline] <span class="o">{</span>
<span class="o">[</span>Pipeline] s3Upload
Uploading file:/var/Jenkins_home/workspace/Jenkins-withAWS_gitee/readme.md to s3://xxxxx/readme.md 
Finished: Uploading to xxxxx/readme.md
Upload <span class="nb">complete</span>
<span class="o">[</span>Pipeline] <span class="nb">echo
</span>s3://xxxxx/readme.md
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // withAWS
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // stage
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // withEnv
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // node
<span class="o">[</span>Pipeline] End of Pipeline
Finished: SUCCESS
...
</code></pre></div></div>

<h2 id="more">More</h2>

<p>Mybe your Jenkins worker runs in a pod. In this situation, you can use <a href="https://docs.aws.amazon.com/zh_cn/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-enable-IAM.html">IRSA style</a> to assume role between accounts.</p>

<p>If you use AKSK in Jenkins, you can assume the role to the IAM user of AKSK.</p>

<p>如果 Jenkins 安装在 EKS 的 Pod 里，那么可以利用 <a href="https://docs.aws.amazon.com/zh_cn/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-enable-IAM.html">IRSA 方式</a> 进行角色扮演。</p>

<p>另外一点，如果在 Jenkins 里使用的是 AKSK，那么就把角色扮演到 AKSK 对应的 IAM User 即可。</p>

<hr />

<p>References：</p>

<p><a href="https://plugins.Jenkins.io/pipeline-aws/">Jenkins plugin: Pipeline: AWS Steps</a></p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="aws" /><summary type="html"><![CDATA[在 AWS 中，企业的 Jenkins 通常安装在开发测试环境，如果需要操作生产环境中的资源，如何设置权限呢？本文介绍了方法。]]></summary></entry><entry><title type="html">使用 Lambda 配合 GuardDuty 事件封禁攻击源</title><link href="https://youbug.cn/2023/02/guardduty-lambda-block.html" rel="alternate" type="text/html" title="使用 Lambda 配合 GuardDuty 事件封禁攻击源" /><published>2023-02-23T05:10:49+00:00</published><updated>2023-02-23T05:10:49+00:00</updated><id>https://youbug.cn/2023/02/guardduty-lambda-block</id><content type="html" xml:base="https://youbug.cn/2023/02/guardduty-lambda-block.html"><![CDATA[<p>在针对 AWS 的网络攻击过程中，有一类攻击是暴力破解 root 账号，此类攻击会被 GuardDuty 监控并记录到。当发生此类暴力破解事件的时候，可以通过 Lambda 来对攻击源进行及时封禁。</p>

<h2 id="lambda-函数">Lambda 函数</h2>

<p>下面的 Lambda 函数是基于 GuardDuty 对一个 RDP 暴力破解事件进行的 响应，使用 nodejs 编写。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">aws-sdk</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">innerCidrs</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">172.31.0.0/16</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">172.33.0.0/16</span><span class="dl">"</span><span class="p">];</span> <span class="c1">//内网 IP cidr。</span>
<span class="kd">const</span> <span class="nx">protectedVpcIds</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">vpc-xxxxxxxx</span><span class="dl">'</span><span class="p">];</span> <span class="c1">//当外部攻击时候，需要保护的 VPC。</span>
<span class="kd">const</span> <span class="nx">forbiddenSgId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">sg-xxxxxxxxxxxx</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//预定义的隔离安全组 ID，此安全组规则是全部封禁。</span>
<span class="kd">const</span> <span class="nx">region</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">cn-northwest-1</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">region</span><span class="p">});</span>
<span class="kd">const</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">EC2</span><span class="p">();</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sourceIp</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">network</span><span class="p">.</span><span class="nx">sourceIpV4</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">attackType</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">isInnerIp</span> <span class="o">=</span> <span class="nx">checkInnerIp</span><span class="p">(</span><span class="nx">sourceIp</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isInnerIp</span> <span class="o">&amp;&amp;</span> <span class="nx">attackType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">RDPBruteForce</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">这是内部 IP，直接修改目标主机安全组进行隔离。</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">findEC2</span><span class="p">(</span><span class="nx">sourceIp</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">ec2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">await</span> <span class="nx">banInnerEc2</span><span class="p">(</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">InstanceId</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">ex</span><span class="p">){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">ex</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">这是外部 IP，建议调用 网络防火墙 API（如 fortnet）进行网络阻断。</span><span class="dl">"</span><span class="p">);</span>
    
    <span class="c1">// await banExternalIp(sourceIp);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 判断是否是内部 IP</span>
<span class="kd">function</span> <span class="nx">checkInnerIp</span><span class="p">(</span><span class="nx">ipAddress</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">cidrLen</span> <span class="o">=</span> <span class="nx">innerCidrs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">cidrLen</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">checkIpInCidr</span><span class="p">(</span><span class="nx">innerCidrs</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">ipAddress</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">checkIpInCidr</span><span class="p">(</span><span class="nx">cidr</span><span class="p">,</span> <span class="nx">ipAddress</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">ipInt</span> <span class="o">=</span> <span class="nx">ipToInt</span><span class="p">(</span><span class="nx">ipAddress</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">parseCIDR</span><span class="p">(</span><span class="nx">cidr</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">ipInt</span> <span class="o">&gt;=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">start</span> <span class="o">&amp;&amp;</span> <span class="nx">ipInt</span><span class="o">&lt;=</span><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">){</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">ipToInt</span><span class="p">(</span><span class="nx">ip</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">subnet</span> <span class="o">=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">subnet</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">subnet</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">subnet</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">subnet</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">parseCIDR</span><span class="p">(</span><span class="nx">cidr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">subnetAddress</span><span class="p">,</span> <span class="nx">mask</span><span class="p">]</span> <span class="o">=</span> <span class="nx">cidr</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">maskBits</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">mask</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">subnetInt</span> <span class="o">=</span> <span class="nx">ipToInt</span><span class="p">(</span><span class="nx">subnetAddress</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">subnetMaskInt</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="nx">maskBits</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="nx">maskBits</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">subnetInt</span> <span class="o">&amp;</span> <span class="nx">subnetMaskInt</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">start</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="nx">maskBits</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">//通过 ip 寻找 EC2 实例</span>
<span class="kd">function</span> <span class="nx">findEC2</span><span class="p">(</span><span class="nx">privateIpAddress</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">EC2</span><span class="p">({</span> <span class="nx">region</span><span class="p">,</span> <span class="na">apiVersion</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2016-11-15</span><span class="dl">'</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">Filters</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">Name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">private-ip-address</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">Values</span><span class="p">:</span> <span class="p">[</span><span class="nx">privateIpAddress</span><span class="p">],</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">ec2</span><span class="p">.</span><span class="nx">describeInstances</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span> 
        <span class="kd">const</span> <span class="nx">instances</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Reservations</span><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">reservation</span> <span class="o">=&gt;</span> <span class="nx">reservation</span><span class="p">.</span><span class="nx">Instances</span><span class="p">);</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">instances</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
           <span class="nx">resolve</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">instance</span> <span class="o">=</span> <span class="nx">instances</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">instance</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> 
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 封禁 VPC 内 EC2</span>
<span class="kd">function</span> <span class="nx">banInnerEc2</span><span class="p">(</span><span class="nx">instanceId</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">InstanceId</span><span class="p">:</span> <span class="nx">instanceId</span><span class="p">,</span>
    <span class="na">Groups</span><span class="p">:</span> <span class="p">[</span><span class="nx">forbiddenSgId</span><span class="p">]</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">modifyInstanceAttribute</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">}</span>


<span class="k">async</span> <span class="kd">function</span> <span class="nx">banExternalIp</span><span class="p">(</span><span class="nx">ip</span><span class="p">){</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">vpcId</span> <span class="k">of</span> <span class="nx">protectedVpcIds</span><span class="p">){</span>
    <span class="k">await</span> <span class="nx">banExternalIpInVpc</span><span class="p">(</span><span class="nx">vpcId</span><span class="p">,</span> <span class="nx">ip</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// TODO: 绑定子网。</span>
<span class="c1">// 需要注意：多 NACL 策略需要确认其优先顺序，通常修改 NACL 会有网络风险，实际环境中建议通过外部防火墙进行封禁。</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">banExternalIpInVpc</span><span class="p">(</span><span class="nx">vpcId</span><span class="p">,</span> <span class="nx">ip</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">aclParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">VpcId</span><span class="p">:</span> <span class="nx">vpcId</span>
  <span class="p">};</span>
  
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAcl</span><span class="p">(</span><span class="nx">aclParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">aclId</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">NetworkAcl</span><span class="p">.</span><span class="nx">NetworkAclId</span><span class="p">;</span>
  
  <span class="kd">const</span> <span class="nx">allowAllInRuleParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">NetworkAclId</span><span class="p">:</span> <span class="nx">aclId</span><span class="p">,</span>
    <span class="na">RuleNumber</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">Protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">RuleAction</span><span class="p">:</span> <span class="dl">'</span><span class="s1">allow</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">Egress</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">CidrBlock</span><span class="p">:</span> <span class="s2">`0.0.0.0/0`</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">allowAllOutRuleParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">NetworkAclId</span><span class="p">:</span> <span class="nx">aclId</span><span class="p">,</span>
    <span class="na">RuleNumber</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">Protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">RuleAction</span><span class="p">:</span> <span class="dl">'</span><span class="s1">allow</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">Egress</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">CidrBlock</span><span class="p">:</span> <span class="s2">`0.0.0.0/0`</span>
  <span class="p">};</span>
  
  <span class="kd">const</span> <span class="nx">denyRuleParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">NetworkAclId</span><span class="p">:</span> <span class="nx">aclId</span><span class="p">,</span>
    <span class="na">RuleNumber</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">Protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">RuleAction</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">Egress</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">CidrBlock</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">ip</span><span class="p">}</span><span class="s2">/32`</span>
  <span class="p">};</span>
  
  <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAclEntry</span><span class="p">(</span><span class="nx">allowAllInRuleParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAclEntry</span><span class="p">(</span><span class="nx">allowAllOutRuleParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAclEntry</span><span class="p">(</span><span class="nx">denyRuleParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  
<span class="p">}</span>

</code></pre></div></div>

<p>程序思路：</p>

<ul>
  <li>从攻击事件中得到攻击源的 IP，判断 IP 是否是内网IP。</li>
  <li>如果是 内网 IP，那么则找到当前 IP 对应的主机，并把此主机加入一个特殊的安全组。</li>
  <li>如果是外网 IP，则调用网络防火墙进行封禁（或者通过设置 NACL 进行封禁）。</li>
  <li>此例子仅适用 IPv4。</li>
</ul>

<p>假设以上函数命名为 <code class="language-plaintext highlighter-rouge">LockTarget</code>。</p>

<p>现在模拟一个 GuardDuty 的攻击事件，我测试的 GuardDuty 的事件格式如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"12345678-1234-1234-1234-123456789012"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"detail-type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"GuardDuty Finding"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aws.guardduty"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"account"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456789012"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"time"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T17:01:23Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"region"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"resources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AwsEc2Instance"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"i-01234567890abcdef"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"detail"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"schemaVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"accountId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456789012"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"partition"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aws"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"region"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cn-northwest-1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EXAMPLE-GUARDDUTY-FINDING-ID"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"arn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:guardduty:us-west-2:123456789012:detector/EXAMPLE_DETECTOR_ID/finding/EXAMPLE-GUARDDUTY-FINDING-ID"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UnauthorizedAccess:EC2/RDPBruteForce"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:59:33.185Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:59:33.185Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"severity"</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mi">90</span><span class="p">,</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EC2 Instance 123.45.67.89 is involved in RDP brute force attack"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"...."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resource"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"resourceType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Instance"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"instanceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"instanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"i-01234567890abcdef"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"instanceType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"t2.micro"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"launchTime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"platform"</span><span class="p">:</span><span class="w"> </span><span class="s2">"windows"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"networkInterfaces"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="p">{</span><span class="w">
            </span><span class="nl">"ipv4Addresses"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
              </span><span class="s2">"123.45.67.89"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"networkInterfaceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eni-01234567890abcdef"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"subnetId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"subnet-01234567890abcdef"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"vpcId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vpc-01234567890abcdef"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"service"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"serviceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"guardduty"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"detectorId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EXAMPLE_DETECTOR_ID"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"eventFirstSeen"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"eventLastSeen"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"archived"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"additionalInfo"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ThreatListName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Example Threat List"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DetectTime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DetectContentType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"application/octet-stream"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"AttackType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RDP brute force"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"network"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"direction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IN"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"protocol"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RDP"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sourceIpV4"</span><span class="p">:</span><span class="w"> </span><span class="s2">"192.31.8.115"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>上述代码出自于 ChatGPT，和实际的 GuardDuty 事件可能会稍有出入，请使用真实的 JSON 结构获取攻击源 IP。</li>
</ul>

<h2 id="配置">配置</h2>

<p>现在在 EventBridge 中创建一个规则:</p>

<ul>
  <li>选择具有事件模式的规则</li>
  <li>事件模式选择 GuardDuty, GuardDuty Findings</li>
  <li>目标选择：Lambda 函数, LockTarget</li>
</ul>

<p>通过以上的代码和设置，我们即可将攻击源直接隔离。</p>]]></content><author><name>啤酒云</name></author><category term="aws" /><summary type="html"><![CDATA[在针对 AWS 的网络攻击过程中，有一类攻击是暴力破解 root 账号，此类攻击会被 GuardDuty 监控并记录到。当发生此类暴力破解事件的时候，可以通过 Lambda 来对攻击源进行及时封禁。]]></summary></entry><entry><title type="html">SharingSphere-Proxy 入门</title><link href="https://youbug.cn/2023/02/shardingsphere-proxy-start.html" rel="alternate" type="text/html" title="SharingSphere-Proxy 入门" /><published>2023-02-17T03:27:44+00:00</published><updated>2023-02-17T03:27:44+00:00</updated><id>https://youbug.cn/2023/02/shardingsphere-proxy-start</id><content type="html" xml:base="https://youbug.cn/2023/02/shardingsphere-proxy-start.html"><![CDATA[<p>云厂商提供的数据库读写分离，通常会提供多个 url/endpoint 供开发者使用，一般需要应用自己去区分读写场景进行程序改造。现在有了这种数据访问的分布式中间件，自动对 SQL 语句进行检测和路由。本文体验了一下 SharingSphere-Proxy，并记录了一下配置和验证过程。</p>

<h2 id="配置">配置</h2>

<p>首先把 SharingSphere-Proxy 的配置拷贝出来，用官方文档提供的命令即可：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span> tmp <span class="nt">--entrypoint</span><span class="o">=</span>bash apache/shardingsphere-proxy
docker <span class="nb">cp </span>tmp:/opt/shardingsphere-proxy/conf /host/path/to/conf
docker <span class="nb">rm </span>tmp
</code></pre></div></div>

<ul>
  <li>/host/path/to/conf 修改成你自己的目录。</li>
</ul>

<p>对于简单的读写分离，需要 2 个配置文件，内容分别如下：</p>

<p>server.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">authority</span><span class="pi">:</span>
  <span class="na">users</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">user</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">YourPassword</span>
  <span class="na">privilege</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">ALL_PERMITTED</span>

<span class="na">transaction</span><span class="pi">:</span>
  <span class="na">defaultType</span><span class="pi">:</span> <span class="s">XA</span>
  <span class="na">providerType</span><span class="pi">:</span> <span class="s">Atomikos</span>

<span class="na">sqlParser</span><span class="pi">:</span>
  <span class="na">sqlCommentParseEnabled</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">sqlStatementCache</span><span class="pi">:</span>
    <span class="na">initialCapacity</span><span class="pi">:</span> <span class="m">2000</span>
    <span class="na">maximumSize</span><span class="pi">:</span> <span class="m">65535</span>
  <span class="na">parseTreeCache</span><span class="pi">:</span>
    <span class="na">initialCapacity</span><span class="pi">:</span> <span class="m">128</span>
    <span class="na">maximumSize</span><span class="pi">:</span> <span class="m">1024</span>

<span class="na">props</span><span class="pi">:</span>
  <span class="na">max-connections-size-per-query</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">sql-show</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<ul>
  <li>这里的用户配置即是 SharingSphere-Proxy 模拟的 MySQL 引擎账号</li>
</ul>

<p>config-readwrite-splitting.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">databaseName</span><span class="pi">:</span> <span class="s">dbname</span>

<span class="na">dataSources</span><span class="pi">:</span>
  <span class="na">write_ds</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://xxxxxxxxx.rds.cn-northwest-1.amazonaws.com.cn:3306/dbname</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">thisDBPwd</span>
    <span class="na">connectionTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">30000</span>
    <span class="na">idleTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">60000</span>
    <span class="na">maxLifetimeMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span>
    <span class="na">maxPoolSize</span><span class="pi">:</span> <span class="m">50</span>
    <span class="na">minPoolSize</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">read_ds_0</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://xxxxxxxxxt.cluster-ro-xxxx.rds.cn-northwest-1.amazonaws.com.cn:3306/dbname</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">thisDBPwd</span>
    <span class="na">connectionTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">30000</span>
    <span class="na">idleTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">60000</span>
    <span class="na">maxLifetimeMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span>
    <span class="na">maxPoolSize</span><span class="pi">:</span> <span class="m">50</span>
    <span class="na">minPoolSize</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="kt">!READWRITE_SPLITTING</span>
    <span class="na">dataSources</span><span class="pi">:</span>
      <span class="na">readwrite_ds</span><span class="pi">:</span>
        <span class="na">staticStrategy</span><span class="pi">:</span>
          <span class="na">writeDataSourceName</span><span class="pi">:</span> <span class="s">write_ds</span>
          <span class="na">readDataSourceNames</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">read_ds_0</span>
        <span class="na">loadBalancerName</span><span class="pi">:</span> <span class="s">random</span>
    <span class="na">loadBalancers</span><span class="pi">:</span>
      <span class="na">random</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">RANDOM</span>

</code></pre></div></div>

<ul>
  <li>dbname url 密码这些需要修改成你自己的。</li>
</ul>

<p>上述配置的具体意思参考官方文档。</p>

<h2 id="启动并验证">启动并验证</h2>

<p>如果源数据使用 MySQL 引擎，需要下载 MySQL 的 JDBC 的驱动包到 ext-lib 中，如：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar
</code></pre></div></div>

<p>使用 docker 命令启动：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="nv">$PWD</span>/conf:/opt/shardingsphere-proxy/conf <span class="se">\</span>
    <span class="nt">-v</span> <span class="nv">$PWD</span>/ext-lib:/opt/shardingsphere-proxy/ext-lib <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">PORT</span><span class="o">=</span>3308 <span class="nt">-p</span> 3306:3308 apache/shardingsphere-proxy
</code></pre></div></div>

<ul>
  <li>上述命令启动了 SharingSphere-Proxy，并把端口映射到了主机的 3306 端口。</li>
</ul>

<p>启动之后，则可以在客户端透明访问 SharingSphere-Proxy 了。</p>

<p>下面使用 MySQL 的标准客户端进行测试，如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-h</span> 172.31.14.22 <span class="nt">-uadmin</span> <span class="nt">-p</span>
</code></pre></div></div>

<p>输入密码后，可以直达 MySQL:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-172-31-8-115:~<span class="nv">$ </span>mysql <span class="nt">-h</span> 172.31.14.22 <span class="nt">-uadmin</span> <span class="nt">-p</span>
Enter password:
Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span><span class="nb">.</span>
Your MySQL connection <span class="nb">id </span>is 2
Server version: 5.7.22-ShardingSphere-Proxy 5.3.1 MySQL Community Server <span class="o">(</span>GPL<span class="o">)</span>

Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type <span class="s1">'help;'</span> or <span class="s1">'\h'</span> <span class="k">for </span>help. Type <span class="s1">'\c'</span> to clear the current input statement.

mysql&gt;
</code></pre></div></div>

<p>创建数据库，use 一下，创建一个表。</p>

<pre><code class="language-SQL">CREATE TABLE student 
( 
  id int NOT NULL AUTO_INCREMENT, 
  t varchar(50) NULL, 
  PRIMARY KEY (id) 
);
</code></pre>

<p>测试一下如下的 SQL</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">student</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">'1'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'2'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'3'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'4'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'5'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'6'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'7'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'8'</span><span class="p">);</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">student</span><span class="p">;</span>
</code></pre></div></div>

<p>期望的结果是，他能正确路由。SharingSphere-Proxy 的 log 显示如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.643 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Logic SQL: INSERT INTO student <span class="o">(</span>t<span class="o">)</span> values <span class="o">(</span><span class="s1">'1'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'2'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'3'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'4'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'5'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'6'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'7'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'8'</span><span class="o">)</span>
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.644 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Actual SQL: write_ds ::: INSERT INTO student <span class="o">(</span>t<span class="o">)</span> values <span class="o">(</span><span class="s1">'1'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'2'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'3'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'4'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'5'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'6'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'7'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'8'</span><span class="o">)</span>
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.685 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Logic SQL: SELECT <span class="k">*</span> from student
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.685 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Actual SQL: read_ds_0 ::: SELECT <span class="k">*</span> from student
...
</code></pre></div></div>

<p>由于同步数据需要一些时间，所以上述测试的 SQL 把 INSERT 和 SELECT 操作写在了一句话里。
可以看到，插入成功之后，并不总是能直接拿到刚刚插入的结果，这个也证实了查询操作的确路由到了 ro 的 endpoint 上了。</p>

<p>写完收工！</p>

<hr />

<p>参考：</p>

<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/startup/docker/">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/startup/docker/</a></p>

<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/</a></p>

<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/</a></p>]]></content><author><name>啤酒云</name></author><category term="data" /><category term="SharingSphere" /><summary type="html"><![CDATA[云厂商提供的数据库读写分离，通常会提供多个 url/endpoint 供开发者使用，一般需要应用自己去区分读写场景进行程序改造。现在有了这种数据访问的分布式中间件，自动对 SQL 语句进行检测和路由。本文体验了一下 SharingSphere-Proxy，并记录了一下配置和验证过程。]]></summary></entry><entry><title type="html">企业微信集成 ChatGPT 开发笔记</title><link href="https://youbug.cn/2023/02/wecom-chatgpt.html" rel="alternate" type="text/html" title="企业微信集成 ChatGPT 开发笔记" /><published>2023-02-12T10:09:44+00:00</published><updated>2023-02-12T10:09:44+00:00</updated><id>https://youbug.cn/2023/02/wecom-chatgpt</id><content type="html" xml:base="https://youbug.cn/2023/02/wecom-chatgpt.html"><![CDATA[<p>原来是想使用企业微信的机器人来集成 ChatGPT，但… 这玩意不支持收消息，只能推送消息，所以只能另寻他法。</p>

<h2 id="思路">思路</h2>

<p>可以收消息的途径：企业应用。</p>

<p>可以发消息的：企业应用的推送，群机器人。</p>

<h2 id="过程及重点代码">过程及重点代码</h2>

<p>步骤如下：</p>

<h3 id="新建企业应用">新建企业应用</h3>

<p>限制条件：必须是认证的企业，有认证过的相关域名。</p>

<p>新建一个企业微信的企业内部应用，并启用接收消息的 API 功能。</p>

<p>第一步必须有一个认证的过程，需要验证有效性，你必须把他的结果解密出来发给他。这个过程是他发送 GET 请求到你预定的 URL 的。</p>

<p>相关的验证代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">//计算签名，如果计算结果和他给的结果一致就是有效的</span>
  <span class="na">computeSign</span><span class="p">:</span> <span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">msg_encrypt</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">tmpArr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">token</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">msg_encrypt</span><span class="p">];</span>
    <span class="k">return</span> <span class="nx">sha1</span><span class="p">(</span><span class="nx">tmpArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
  <span class="p">},</span>
  <span class="na">decode</span><span class="p">:</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encodingAESKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">aesKey</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">encodingAESKey</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">=</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">aesCipher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipheriv</span><span class="p">(</span><span class="dl">"</span><span class="s2">aes-256-cbc</span><span class="dl">"</span><span class="p">,</span> <span class="nx">aesKey</span><span class="p">,</span> <span class="nx">aesKey</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">));</span>
    <span class="nx">aesCipher</span><span class="p">.</span><span class="nx">setAutoPadding</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">decipheredBuff</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">aesCipher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">),</span> <span class="nx">aesCipher</span><span class="p">.</span><span class="nx">final</span><span class="p">()]);</span>
    <span class="nx">decipheredBuff</span> <span class="o">=</span> <span class="nx">PKCS7Decoder</span><span class="p">(</span><span class="nx">decipheredBuff</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">len_netOrder_corpid</span> <span class="o">=</span> <span class="nx">decipheredBuff</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">msg_len</span> <span class="o">=</span> <span class="nx">len_netOrder_corpid</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nx">readUInt32BE</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">len_netOrder_corpid</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">msg_len</span> <span class="o">+</span> <span class="mi">4</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span> 
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">sha1</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">md5sum</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="dl">'</span><span class="s1">sha1</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">md5sum</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">ciphertext</span> <span class="o">=</span> <span class="nx">md5sum</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="dl">'</span><span class="s1">hex</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">ciphertext</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">PKCS7Decoder</span><span class="p">(</span><span class="nx">buff</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">pad</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">[</span><span class="nx">buff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pad</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">pad</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pad</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">buff</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">buff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">pad</span><span class="p">);</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">QiWeiController</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">async</span> <span class="nx">verifySignature</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">app</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">msg_signature</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">echostr</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">mySign</span> <span class="o">=</span> <span class="nx">computeSign</span><span class="p">(</span><span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">echostr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">mySign</span> <span class="o">!=</span> <span class="nx">msg_signature</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Invalid signature.</span><span class="dl">"</span><span class="p">;</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">echostr</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span><span class="p">);</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>请注意，上述代码有可能并不在一个文件中。</li>
</ul>

<h3 id="接收消息">接收消息</h3>

<p>这个应用创建了之后，在客户端的工作台能看到这个应用，你可以和这个应用聊天，发给这个应用的消息都会被接受。发送的信息会被 Post 到你定义的 URL。</p>

<p>接收信息代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">decodeIncomingMsg</span><span class="p">:</span> <span class="p">(</span><span class="nx">encMsg</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ptToUserName</span> <span class="o">=</span> <span class="sr">/&lt;ToUserName&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">ToUserName&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptFromUserName</span> <span class="o">=</span> <span class="sr">/&lt;FromUserName&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">FromUserName&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptContent</span> <span class="o">=</span> <span class="sr">/&lt;Content&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">Content&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">realMsg</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">encMsg</span><span class="p">,</span> <span class="nx">key</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">resMsg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">ToUserName</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptToUserName</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
      <span class="na">FromUserName</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptFromUserName</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
      <span class="na">Content</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptContent</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">};</span>
    <span class="c1">//这里可以修改到 MQ 中，并最终落盘</span>
    <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">resMsg</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">resMsg</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">QiWeiController</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">async</span> <span class="nx">incoming</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">app</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">msg_signature</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptEncMsg</span> <span class="o">=</span> <span class="sr">/&lt;Encrypt&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">Encrypt&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">found</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptEncMsg</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">found</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">mySign</span> <span class="o">=</span> <span class="nx">computeSign</span><span class="p">(</span><span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">mySign</span> <span class="o">==</span> <span class="nx">msg_signature</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">decodeIncomingMsg</span><span class="p">(</span><span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>接收到信息之后，将信息解码出来，放到一个数组(队列) 中，供其他 deamon 方法调用。</li>
</ul>

<h3 id="请求-chatgpt">请求 ChatGPT</h3>

<p>使用了 chatpgt 这个 npm 包，调用非常简单。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">qiwei</span><span class="o">=</span><span class="p">{</span>

  <span class="na">chatdeamon</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">paimon</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">tarMsg</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="c1">// tarMsg &amp;&amp; console.log(tarMsg);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">tarMsg</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">conversationId</span> <span class="o">=</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">ToUserName</span><span class="p">;</span>
        <span class="kd">let</span> <span class="nx">chatOpts</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">timeoutMs</span><span class="p">:</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
          <span class="nx">conversationId</span>
        <span class="p">};</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">qiwei</span><span class="p">.</span><span class="nx">parentMessageId</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">chatOpts</span><span class="p">.</span><span class="nx">parentMessageId</span> <span class="o">=</span> <span class="nx">parentMessageId</span><span class="p">;</span>
        <span class="p">};</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">输入:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="dl">"</span><span class="s2">堆积量:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">paimon</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="nx">chatOpts</span><span class="p">);</span>
        <span class="nx">parentMessageId</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">投送结果：</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
        <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">sendToPerson</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">);</span>
        <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">paimonSendToRoom</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>写了死循环处理消息，这里 的 app 是 eggjs 的上下文的，用于取配置。</li>
  <li>ChatGPT 的 API 经常限流，这里处理成了同步调用，一条一条往下进行。</li>
  <li>代码中 paimon 是一个 ChatGPT 实例。</li>
</ul>

<h3 id="分发消息">分发消息</h3>

<p>上面的代码可以看到拿到结果后分别分发到了个人和机器人。</p>

<p>发送到个人可以在直接在单聊对话中看到结果，同时可以让企业微信机器人分发到群里。</p>

<p>分发到个人的代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">getAccessToken</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">access_token</span><span class="dl">"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">expire_time</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">expire_time</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">expire_time</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">current</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">isExpire</span> <span class="o">=</span> <span class="nx">expire_time</span> <span class="o">&lt;</span> <span class="nx">current</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isExpire</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">access_response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="s2">`https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_CORP_ID</span><span class="p">}</span><span class="s2">&amp;corpsecret=</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_APP_SECRET</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span>
    <span class="p">});</span>
    <span class="kd">let</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">access_token</span><span class="p">,</span> <span class="nx">expires_in</span>
    <span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">access_response</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">access_token</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">access_token</span><span class="p">,</span>
        <span class="na">expire_time</span><span class="p">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="nx">expires_in</span>
      <span class="p">};</span>
      <span class="k">return</span> <span class="nx">access_token</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`获取 access_token 失败`</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">access_response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">sendToPerson</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">access_token</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">getAccessToken</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=</span><span class="p">${</span><span class="nx">access_token</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">touser</span><span class="p">:</span> <span class="nx">to</span><span class="p">,</span>
      <span class="na">msgtype</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">agentid</span><span class="p">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_APP_AGENT_ID</span><span class="p">,</span>
      <span class="na">text</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">content</span><span class="p">:</span> <span class="nx">a</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">msg</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">个人投送完成！</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>直接调用 信息发送 API 完成。</li>
</ul>

<p>使用群机器人完成发送</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>

  <span class="na">paimonSendToRoom</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">q</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">msgtype</span><span class="p">:</span> <span class="dl">"</span><span class="s2">markdown</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">markdown</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">content</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">to</span><span class="p">}</span><span class="s2">: **</span><span class="p">${</span><span class="nx">q</span><span class="p">}</span><span class="s2">**
---
&lt;font color="warning"&gt;</span><span class="p">${</span><span class="nx">a</span><span class="p">}</span><span class="s2">&lt;/font&gt;`</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_BOT_WEBHOOK</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">msg</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">机器人投送完成！</span><span class="dl">"</span><span class="p">);</span>

  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>这个 API 很简单，直接把消息组装好丢给 webhook 就行了。表扬一下这个 API。</li>
</ul>

<h2 id="总结一下">总结一下</h2>

<p>就不画时序图了。</p>

<p>整体的过程是：</p>

<ul>
  <li>用户给企业微信 APP 发信息。</li>
  <li>APP 收到信息丢入队列中，包含了文本，发送人等信息。</li>
  <li>另一个进程获取从队列中获取一个记录，调用 openai API 得到结果。</li>
  <li>使用企业微信的消息发送 API 将结果发给问问题的人。</li>
  <li>使用群机器人的 WebHook 将结果发送给相应的群。</li>
</ul>

<p>效果图如下：左侧是和 APP 聊天，右侧是一个群聊机器人。</p>

<p><img src="/assets/posts/tucao/wecom-chatgpt.jpg" alt="企业微信效果图" /></p>

<h2 id="吐槽">吐槽</h2>

<p>1 隔壁的钉钉和飞书的机器人都能直接收发消息，为啥你不行。</p>

<p>2 企业微信的 API 设计，有 XML 的，有 Json 的，API 调用方式也是千奇百怪。收消息的那个签名验证搞那么复杂，示例和 SDK 还不全。</p>

<p>3 文档真乱，要到处去找。</p>

<p>4 哈哈，我的机器人名字叫 派萌/pimon。</p>

<hr />

<p>参考链接：</p>

<p><a href="https://developer.work.weixin.qq.com/document/path/91770">https://developer.work.weixin.qq.com/document/path/91770</a></p>

<p><a href="https://developer.work.weixin.qq.com/document/10514">https://developer.work.weixin.qq.com/document/10514</a></p>

<p><a href="https://www.npmjs.com/package/chatgpt">https://www.npmjs.com/package/chatgpt</a></p>

<p><a href="https://developer.work.weixin.qq.com/document/path/90236">https://developer.work.weixin.qq.com/document/path/90236</a></p>

<p><a href="https://github.com/WecomTeam/InnerAppCodeSample/tree/main/server">https://github.com/WecomTeam/InnerAppCodeSample/tree/main/server</a></p>]]></content><author><name>啤酒云</name></author><category term="tucao" /><summary type="html"><![CDATA[原来是想使用企业微信的机器人来集成 ChatGPT，但… 这玩意不支持收消息，只能推送消息，所以只能另寻他法。]]></summary></entry><entry><title type="html">一个现成的 ChatGPT 微信机器人</title><link href="https://youbug.cn/2023/02/chatgpt-wechat-bot.html" rel="alternate" type="text/html" title="一个现成的 ChatGPT 微信机器人" /><published>2023-02-09T11:09:00+00:00</published><updated>2023-02-09T11:09:00+00:00</updated><id>https://youbug.cn/2023/02/chatgpt-wechat-bot</id><content type="html" xml:base="https://youbug.cn/2023/02/chatgpt-wechat-bot.html"><![CDATA[<p>本文是一个集成了 ChatGPT 的简单微信机器人的部署文档，使用了现有的 github 仓库，并进行适当修改，并发布成公共镜像包。当前文档说明为 2.0 镜像包。</p>

<h2 id="说明">说明</h2>

<p>在这个项目（<a href="https://github.com/wangrongding/wechat-bot">https://github.com/wangrongding/wechat-bot</a>）的基础上进行的修改：</p>

<ul>
  <li>从 openai 改回了 chatgpt 的调用。</li>
  <li>修改了 chatgpt 的对话模型，现在有两种机器人: 群机器人和私人机器人。</li>
  <li>在群里，用群机器人开头的文字会训练群机器人，用私人机器人名字开头的可以训练私有机器人。</li>
  <li>与机器人私聊也要以机器人的名字开头，私聊的时候用两种机器人名字开头都会训练私有机器人。</li>
  <li>增加了错误处理，当出错的时候，现在机器人能做出响应了。</li>
</ul>

<p>镜像地址：</p>

<p><a href="https://hub.docker.com/r/cloudbeer/wx-chatbot/tags">https://hub.docker.com/r/cloudbeer/wx-chatbot/tags</a></p>

<h2 id="部署">部署</h2>

<h3 id="在-k8s-中部署">在 K8S 中部署</h3>

<p>部署 YAML 参考如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">wx-chatbot</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">cloudbeer/wx-chatbot:2.0</span>
          <span class="na">env</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">OPENAI_API_KEY</span>
              <span class="na">value</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">your-api-key</span><span class="pi">]</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">BOT_NAME</span>
              <span class="na">value</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">your-bot-name</span><span class="pi">]</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ROOM_BOT_NAME</span>
              <span class="na">value</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">your-room-bot-name</span><span class="pi">]</span>
          <span class="na">command</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">node</span>
            <span class="pi">-</span> <span class="s">index.js</span>
</code></pre></div></div>

<p>修改上面代码中的环境变量 <code class="language-plaintext highlighter-rouge">[your-api-key]</code>, <code class="language-plaintext highlighter-rouge">[your-bot-name]</code>，<code class="language-plaintext highlighter-rouge">[your-room-bot-name]</code>：</p>

<ul>
  <li>
    <p>OPENAI_API_KEY: 在 openai 网站申请的 API_KEY，当前申请地址是： <a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p>
  </li>
  <li>
    <p>BOT_NAME: 私人机器人的名字，当发送以这个名字开头的文字的时候，会调用 chatgpt，如 BOT_NAME 为 <code class="language-plaintext highlighter-rouge">hisiri</code> 的时候，发送：<code class="language-plaintext highlighter-rouge">hisiri 你好</code> 会得到 ChatGPT 的响应。</p>
  </li>
  <li>
    <p>ROOM_BOT_NAME: 群机器人名字，这个机器人的会话是基于群的，群内的所有人都可以训练同一个机器人。</p>
  </li>
  <li>
    <p>你可以在群里分别和两个机器人对话。</p>
  </li>
</ul>

<p>部署完成之后，使用 logs 命令查看二维码，相关的命令如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs wx-chatbot-xxxxxxx <span class="nt">-f</span>
</code></pre></div></div>

<ul>
  <li>-f 可以持续打印日志，查看控制台信息。</li>
  <li>使用微信扫码之后，当前扫码的微信会成为 ChatGPT 机器人。你可以和他私聊或者拉到群里。</li>
  <li>聊天的时候需要分别以 2 个机器人的名字开头才能做出响应。</li>
</ul>

<h2 id="docker-启动">Docker 启动</h2>

<p>Docker 启动不再赘述，使用如下命令即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">--name</span> wx-chatgpt-bot <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">OPENAI_API_KEY</span><span class="o">=</span>abc <span class="nt">-e</span> <span class="nv">BOT_NAME</span><span class="o">=</span>小米 <span class="nt">-e</span> <span class="nv">ROOM_BOT_NAME</span><span class="o">=</span>大米 <span class="se">\</span>
  cloudbeer/wx-chatbot:2.0 node index.js
</code></pre></div></div>

<ul>
  <li>记得修改三个环境变量：<code class="language-plaintext highlighter-rouge">-e OPENAI_API_KEY=abc -e BOT_NAME=@siri</code>。</li>
  <li>注意：此命令在 MAC 启动有bug。用 linux 系统无虞。</li>
</ul>

<h2 id="问题和改进点">问题和改进点</h2>

<ul>
  <li>免费账号 ChatGPT 测会经常报 429 Too Many Requests 的错误。</li>
  <li>微信可能会被封，建议使用新注册的微信小号作为机器人。（暂且不清楚微信侧触发机制）</li>
  <li>重启应用会重新加载微信的会话，导致重复调用 ChatGPT API，并由可能导致微信被封，重启应用的时候多等一会儿，让会话过期，或者修改两个bot 的名字后重启。</li>
</ul>]]></content><author><name>啤酒云</name></author><category term="container" /><category term="容器" /><summary type="html"><![CDATA[本文是一个集成了 ChatGPT 的简单微信机器人的部署文档，使用了现有的 github 仓库，并进行适当修改，并发布成公共镜像包。当前文档说明为 2.0 镜像包。]]></summary></entry><entry><title type="html">调度 Jenkins 任务到 Karpenter 节点池</title><link href="https://youbug.cn/2023/01/jenkins-job-with-karpenter.html" rel="alternate" type="text/html" title="调度 Jenkins 任务到 Karpenter 节点池" /><published>2023-01-02T07:12:33+00:00</published><updated>2023-01-02T07:12:33+00:00</updated><id>https://youbug.cn/2023/01/jenkins-job-with-karpenter</id><content type="html" xml:base="https://youbug.cn/2023/01/jenkins-job-with-karpenter.html"><![CDATA[<p>本文介绍了如何调度 Jenkins 任务到 EKS 集群的 Karpenter 虚拟节点。Karpenter 强大的 Node 组织能力，可以最大程度节约任务运行的成本。</p>

<h2 id="插件配置">插件配置</h2>

<p>首先确认 Jenkins 的 Kubernetes 插件已经安装:</p>

<p>以管理员身份进入 Manage Jenkins -&gt; Manage Plugins, 搜索 Kubernetes，确认插件已经安装。</p>

<p>然后，进行 Node 配置:</p>

<p>进入 Manage Jenkins -&gt; Manage Nodes and Clouds -&gt; Config Clouds, 展开 Kubernetes Cloud details…</p>

<p>如果您的 Jenkins 安装在 EKS 集群里，并且工作任务也要调度到这个集群，可以按照如下配置：</p>

<ul>
  <li>Kubernetes 地址: <a href="https://kubernetes.default">https://kubernetes.default</a></li>
  <li>Kubernetes 命名空间: jenkins</li>
  <li>Jenkins 地址: <a href="http://jenkins.jenkins.svc.cluster.local:8080">http://jenkins.jenkins.svc.cluster.local:8080</a></li>
  <li>Jenkins 通道: jenkins-agent.jenkins.svc.cluster.local:50000</li>
</ul>

<p>如果是非本地集群，还需要配置合适的地址和权限。</p>

<h2 id="任务配置">任务配置</h2>

<p>现在在项目（业务）根目录编写如下的一个 Jenkinsfile：</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">podTemplate</span><span class="o">(</span><span class="nl">yaml:</span> <span class="s1">'''
    apiVersion: v1
    kind: Pod
    spec:
      nodeSelector:
        karpenter-arch: arm64
      containers:
      - name: maven
        image: maven
        command:
        - sleep
        args:
        - 99d
      - name: golang
        image: golang
        command:
        - sleep
        args:
        - 99d
'''</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">node</span><span class="o">(</span><span class="n">POD_LABEL</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">stage</span><span class="o">(</span><span class="s1">'Get a Maven project'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">container</span><span class="o">(</span><span class="s1">'maven'</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">stage</span><span class="o">(</span><span class="s1">'Build a Maven project'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sh</span> <span class="s1">'mvn --version'</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>

      <span class="n">stage</span><span class="o">(</span><span class="s1">'Get a Golang project'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">git</span> <span class="nl">url:</span> <span class="s1">'https://github.com/aws-code-sample/demo-jenkins.git'</span><span class="o">,</span> <span class="nl">branch:</span> <span class="s1">'main'</span>
        <span class="n">container</span><span class="o">(</span><span class="s1">'golang'</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">stage</span><span class="o">(</span><span class="s1">'Build a Go project'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sh</span> <span class="s1">'''
            go version
            ls
          '''</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上面的代码中 Pod 的描述中，有一个 <code class="language-plaintext highlighter-rouge">nodeSelector: {karpenter-arch: 'arm64'}</code> 的选择器，表示这个 Pod 要部署到有 karpenter-arch: ‘arm64’ 标签的节点。这个节点是通过 Karpenter 来定义的，具体如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.sh/v1alpha5</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Provisioner</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">arm-builder</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">karpenter.sh/capacity-type</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">spot"</span><span class="pi">]</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">kubernetes.io/arch"</span>
      <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
      <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">arm64"</span><span class="pi">]</span>
  <span class="na">limits</span><span class="pi">:</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">cpu</span><span class="pi">:</span> <span class="m">1000</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">karpenter-arch</span><span class="pi">:</span> <span class="s">arm64</span>
  <span class="na">providerRef</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">ttlSecondsAfterEmpty</span><span class="pi">:</span> <span class="m">90</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.k8s.aws/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">AWSNodeTemplate</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">amiFamily</span><span class="pi">:</span> <span class="s">Bottlerocket</span>
  <span class="na">subnetSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">aws:cloudformation:stack-name"</span><span class="err">:</span> <span class="s">CdkEksPocStack</span>
    <span class="s">"aws-cdk:subnet-type": Private</span>
  <span class="na">securityGroupSelector</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">kubernetes.io/cluster/poc-eks"</span><span class="err">:</span> <span class="s">owned</span>
</code></pre></div></div>

<p>通过 Karpenter，我们可以动态去购买 ARM + Spot 的实例。</p>

<p>现在在 Jenkins 的 Web UI 上新建一个 Jenkins 任务。</p>

<p>选择 “多分支流水线”，我的 demo 中主要字段配置如下：</p>

<p>分支源</p>

<ul>
  <li>项目仓库地址：<a href="https://github.com/aws-code-sample/demo-jenkins">https://github.com/aws-code-sample/demo-jenkins</a></li>
</ul>

<p>Build Configuration</p>

<ul>
  <li>
    <p>Mode: By Jenkinsfile</p>
  </li>
  <li>
    <p>脚本路径: Jenkinsfile</p>
  </li>
</ul>

<h2 id="运行结果">运行结果</h2>

<p>点击 “立即构建” 后，可以看到如下日志（部分）：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Started by user Jenkins Admin
 &gt; git rev-parse --resolve-git-dir /var/jenkins_home/caches/git-cfff1181f69195f8b158693b85c23bf9/.git # timeout=10
Setting origin to https://github.com/aws-code-sample/demo-jenkins
...
Seen branch in repository origin/main
Seen 1 remote branch
Obtained Jenkinsfile from b7f6d7cb4db0b89577a60faf5023d710798311e9
[Pipeline] Start of Pipeline
[Pipeline] podTemplate
[Pipeline] {
[Pipeline] node
Created Pod: kubernetes jenkins/demo-jenkins-main-10-1kw6t-mzbkc-6r4qk
Still waiting to schedule task
‘demo-jenkins-main-10-1kw6t-mzbkc-6r4qk’ is offline

Running on demo-jenkins-main-10-1kw6t-mzbkc-6r4qk in /home/jenkins/agent/workspace/demo-jenkins_main
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Get a Maven project)
[Pipeline] container
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build a Maven project)
[Pipeline] sh
+ mvn --version
Apache Maven 3.8.7 (b89d5959fcde851dcb1c8946a785a163f14e1e29)
Maven home: /usr/share/maven
Java version: 17.0.6, vendor: Eclipse Adoptium, runtime: /opt/java/openjdk
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "5.15.79", arch: "aarch64", family: "unix"
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Get a Golang project)
[Pipeline] git
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/aws-code-sample/demo-jenkins.git
 &gt; git init /home/jenkins/agent/workspace/demo-jenkins_main # timeout=10
Fetching upstream changes from https://github.com/aws-code-sample/demo-jenkins.git
 &gt; git --version # timeout=10
 &gt; git --version # 'git version 2.30.2'
 &gt; git fetch --tags --force --progress -- https://github.com/aws-code-sample/demo-jenkins.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Checking out Revision b7f6d7cb4db0b89577a60faf5023d710798311e9 (refs/remotes/origin/main)
 &gt; git config remote.origin.url https://github.com/aws-code-sample/demo-jenkins.git # timeout=10
 &gt; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git rev-parse refs/remotes/origin/main^{commit} # timeout=10
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f b7f6d7cb4db0b89577a60faf5023d710798311e9 # timeout=10
 &gt; git branch -a -v --no-abbrev # timeout=10
 &gt; git checkout -b main b7f6d7cb4db0b89577a60faf5023d710798311e9 # timeout=10
Commit message: "sh"
 &gt; git rev-list --no-walk b7f6d7cb4db0b89577a60faf5023d710798311e9 # timeout=10
[Pipeline] container
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build a Go project)
[Pipeline] sh
+ go version
go version go1.19.5 linux/arm64
+ ls
Jenkinsfile
readme.md
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] }
[Pipeline] // podTemplate
[Pipeline] End of Pipeline
Finished: SUCCESS
</code></pre></div></div>

<p>从上述 log 中，可以看到运行过程如下：</p>

<ul>
  <li>任务启动后，由于没有合适的 Node 可以选择，pod offline。</li>
  <li>此时 Karpenter 购买 EC2 并安装 OS 和必要 pod，此过程大约 90 秒左右。</li>
  <li>然后启动任务，从输出结果中可以看到 使用了 arm 架构（aarch64 或 arm64）</li>
  <li>描述 node（或在 AWS 控制台）可显示相应的 EC2 为 Spot 实例。</li>
</ul>

<hr />

<p>相关阅读：</p>

<p><a href="https://plugins.jenkins.io/kubernetes/">Jenkins 的 Kubernetes 插件</a></p>

<p><a href="https://karpenter.sh/">Karpenter 官网</a></p>

<p><a href="https://youbug.cn/2022/12/the-cheapest-way-to-ci-cn.html">在 AWS 构建应用 (Gitlab CI) 最便宜的姿势</a></p>

<p><a href="https://youbug.cn/2022/11/cdk-install-karpenter-1.9.2.html">使用 CDK 安装 Karpenter 新版</a></p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container" /><summary type="html"><![CDATA[本文介绍了如何调度 Jenkins 任务到 EKS 集群的 Karpenter 虚拟节点。Karpenter 强大的 Node 组织能力，可以最大程度节约任务运行的成本。]]></summary></entry><entry><title type="html">编写 Argo CD 人工部署 API</title><link href="https://youbug.cn/2022/12/argocd-manual-sync-api.html" rel="alternate" type="text/html" title="编写 Argo CD 人工部署 API" /><published>2022-12-23T09:53:33+00:00</published><updated>2022-12-23T09:53:33+00:00</updated><id>https://youbug.cn/2022/12/argocd-manual-sync-api</id><content type="html" xml:base="https://youbug.cn/2022/12/argocd-manual-sync-api.html"><![CDATA[<p>使用 ArgoCD 可以有效解耦 CI 和 CD。
想象这个场景：当 CI 流程将构建物打包完成，并更新了 Git 部署仓库，此时 CI 流程发通知给相关有审批人员，审批者通过点击链接就可以完成部署。
虽然可以通过登录 Argo CD 的 UI 界面可以完成此操作，但感觉还不够丝滑。</p>

<h2 id="想法">想法</h2>

<p>我的想法是：</p>

<p>编写 2 个 API 暴露出来：</p>

<ul>
  <li>发邮件(或者发微信，slack 啥的) 的 API</li>
  <li>封装 argocd sync 的 API</li>
</ul>

<p>过程是：</p>

<p>CI 结束后 -&gt; 调用 API 发邮件，邮件的内容，是一个带有时间戳签名的 Url -&gt; 收到邮件的人，直接在邮件里点击此链接触发 argocd sync。
下面我来分解这一过程，并最后给出整体的代码。</p>

<p>本文的代码使用 C# 编写，为啥用 C#？因为好久没用过了。这个语言我不想忘记，他是最好的面对对象语言。</p>

<h2 id="先看看-argo-cd-api">先看看 Argo CD API</h2>

<p>通过这个地址阅读 Argo CD API 文档：<code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;/swagger-ui</code></p>

<p>我们找到了我们需要的 API 有两个：</p>

<ul>
  <li>SessionService_Create: <code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;/api/v1/session</code>，获取 Authorization token。</li>
  <li>ApplicationService_Sync: <code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;/api/v1/applications/{name}/sync</code>，同步应用。</li>
</ul>

<p>请将 <code class="language-plaintext highlighter-rouge">&lt;argocd_server_url&gt;</code> 更换为您的 Argo CD 对外发布地址 (在 K8S 集群内对应的服务为：argocd-server)。</p>

<p>调用方法大约为：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /api/v1/session

{
  "username": "admin",
  "password": "argocd-secret"
}
</code></pre></div></div>

<ul>
  <li>这里需要传入您的 Argo CD 的用户名和密码。</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /api/v1/applications/{name}/sync
Authorization: Bearer ${token}

{
  "appNamespace": "argocd"
}
</code></pre></div></div>

<ul>
  <li>其中必须的参数 url 中间的 name，这个就是创建的 ArgoCD 应用的名字。</li>
  <li>注意 appNamespace 是 ArgoCD 应用的命名空间，不是你的业务应用的命名空间。</li>
</ul>

<p>有了这 2 个 API，下面的操作就简单了。</p>

<h2 id="发送更新邮件">发送更新邮件</h2>

<p>下面这个方法映射了一个 URL 用于发送邮件：</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">public</span> <span class="kt">string</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appName</span><span class="p">){</span>

    <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MimeMessage</span><span class="p">();</span>

    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span> <span class="p">=</span> <span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"CD Bot"</span><span class="p">;</span>

    <span class="n">email</span><span class="p">.</span><span class="n">From</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">To</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">emails</span><span class="p">));</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Subject</span> <span class="p">=</span> <span class="s">$"Application </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s"> is ready for deployment."</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">sign</span> <span class="p">=</span> <span class="nf">signApi</span><span class="p">(</span><span class="n">appName</span><span class="p">,</span> <span class="m">7200</span><span class="p">);</span> 
    <span class="n">email</span><span class="p">.</span><span class="n">Body</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextPart</span><span class="p">(</span><span class="n">TextFormat</span><span class="p">.</span><span class="n">Html</span><span class="p">)</span> <span class="p">{</span> 
      <span class="n">Text</span> <span class="p">=</span>  <span class="s">$@"</span><span class="err">
</span><span class="s">        Application Name: </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        Updated Date: </span><span class="p">{</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br&gt;</span><span class="err">
</span><span class="s">        Click this link to approve the deployment in 2 hours.&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;a href='http://localhost:9999/argo/deploy?name=</span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&amp;sign=</span><span class="p">{</span><span class="n">sign</span><span class="p">}</span><span class="s">' </span><span class="err">
</span><span class="s">          style='padding:10px 30px;border:1px solid #ccc;border-radius:5px;'&gt;</span><span class="err">
</span><span class="s">        Deploy Now</span><span class="err">
</span><span class="s">        &lt;/a&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;请注意：上述链接 2 小时候有效。"</span>
    <span class="p">};</span>

    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">smtp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SmtpClient</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="s">"smtp.gmail.com"</span><span class="p">,</span> <span class="m">465</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Authenticate</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">,</span> <span class="n">gmailPassword</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Disconnect</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="s">"OK"</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>使用了 MailKit 发送邮件。</li>
  <li>此 API 接受参数: email 和 appName</li>
  <li>计算包含时间戳(2小时过期时间)的签名， 将部署链接 (http://localhost:9999/argo/deploy?name=?) 和签名作为邮件正文发送到目标邮箱。</li>
  <li>此 api 应该由 CI 来调用。</li>
  <li>点击邮件里面的链接，则会触发部署操作。</li>
</ul>

<h2 id="触发部署操作">触发部署操作</h2>

<p>先看代码：</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">deploy</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sign</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="nf">verifyApi</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">sign</span><span class="p">)){</span>
      <span class="k">return</span> <span class="s">"签名验证失败，或者链接过期了"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"username"</span><span class="p">,</span> <span class="n">argoUsername</span><span class="p">);</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"password"</span><span class="p">,</span> <span class="n">argoPassword</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">pContent</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>


    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">argoUrl</span> <span class="p">+</span> <span class="s">"/api/v1/session"</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Accept</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">MediaTypeWithQualityHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">));</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">pContent</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MediaTypeHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">);</span>
    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">httpClientHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClientHandler</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">httpClientHandler</span><span class="p">.</span><span class="n">ServerCertificateCustomValidationCallback</span> <span class="p">=</span> <span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">cert</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="p">};</span>
      <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">httpClientHandler</span><span class="p">))</span>
      <span class="p">{</span>
        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
        <span class="kt">string</span> <span class="n">responseBody</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">responseBody</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nf">syncApp</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="s">"token"</span><span class="p">],</span> <span class="s">"gateway"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>首先验证签名。</li>
  <li>通过调用 ArgoCD 的 <code class="language-plaintext highlighter-rouge">/api/v1/session</code> 去获取 Argo CD 的 临时 Authorization token。</li>
  <li>调用应用同步 API。</li>
  <li>调用成功则完成触发应用同步。</li>
</ul>

<h2 id="测试过程">测试过程</h2>

<p>1 邮件发送</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:9999/argo/sendemail?email<span class="o">=</span>cloudbeer@gmail.com&amp;appName<span class="o">=</span>product
</code></pre></div></div>

<p>2 gmail 邮箱收邮件，点击 Deploy Now 链接。这个链接类似这样：</p>

<p><a href="http://localhost:9999/argo/deploy?name=product&amp;sign=eyJl...1In0=">http://localhost:9999/argo/deploy?name=product&amp;sign=eyJl...1In0=</a></p>

<p>3 点击上面的链接完成应用部署。</p>

<h2 id="完整的代码">完整的代码</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http.Headers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MailKit.Net.Smtp</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MimeKit</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MimeKit.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ArgoTrigger.Controllers</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ArgoController</span> <span class="p">:</span> <span class="n">Controller</span>
<span class="p">{</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">argoUrl</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ARGO_URL"</span><span class="p">)</span> <span class="p">??</span> <span class="s">"http://host.docker.internal:8080"</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">argoUsername</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ARGO_USERNAME"</span><span class="p">)??</span> <span class="s">"admin"</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">argoPassword</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ARGO_PASSWORD"</span><span class="p">)??</span><span class="s">"uBGroHnh9TjSa7ud"</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">string</span> <span class="n">gmailPassword</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"GMAIL_PASSWORD"</span><span class="p">);</span>
  
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">deploy</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sign</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="nf">verifyApi</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">sign</span><span class="p">)){</span>
      <span class="k">return</span> <span class="s">"签名验证失败，或者链接过期了"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"username"</span><span class="p">,</span> <span class="n">argoUsername</span><span class="p">);</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"password"</span><span class="p">,</span> <span class="n">argoPassword</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">pContent</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>


    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">argoUrl</span> <span class="p">+</span> <span class="s">"/api/v1/session"</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Accept</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">MediaTypeWithQualityHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">));</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">pContent</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MediaTypeHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">);</span>
    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">httpClientHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClientHandler</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">httpClientHandler</span><span class="p">.</span><span class="n">ServerCertificateCustomValidationCallback</span> <span class="p">=</span> <span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">cert</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="p">};</span>
      <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">httpClientHandler</span><span class="p">))</span>
      <span class="p">{</span>
        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
        <span class="kt">string</span> <span class="n">responseBody</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">responseBody</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nf">syncApp</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="s">"token"</span><span class="p">],</span> <span class="s">"gateway"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">syncApp</span><span class="p">(</span><span class="n">HttpClient</span> <span class="n">client</span><span class="p">,</span> <span class="kt">string</span> <span class="n">token</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appName</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">map</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"appNamespace"</span><span class="p">,</span> <span class="s">"argocd"</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">pContent</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">argoUrl</span> <span class="p">+</span> <span class="s">"/api/v1/applications/"</span> <span class="p">+</span> <span class="n">appName</span> <span class="p">+</span> <span class="s">"/sync"</span><span class="p">);</span>


    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Accept</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">MediaTypeWithQualityHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">));</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Authorization</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">AuthenticationHeaderValue</span><span class="p">(</span><span class="s">"Bearer"</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">pContent</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MediaTypeHeaderValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
    <span class="kt">string</span> <span class="n">responseBody</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

    <span class="k">return</span> <span class="n">responseBody</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="kt">string</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">emails</span><span class="p">,</span> <span class="kt">string</span> <span class="n">appName</span><span class="p">){</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">emails</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">gmailPassword</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MimeMessage</span><span class="p">();</span>

    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span> <span class="p">=</span> <span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"CD Bot"</span><span class="p">;</span>

    <span class="n">email</span><span class="p">.</span><span class="n">From</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">email</span><span class="p">.</span><span class="n">Sender</span><span class="p">);</span>
    <span class="n">email</span><span class="p">.</span><span class="n">To</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">MailboxAddress</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">emails</span><span class="p">));</span>
    <span class="n">email</span><span class="p">.</span><span class="n">Subject</span> <span class="p">=</span> <span class="s">$"Application </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s"> is ready for deployment."</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">sign</span> <span class="p">=</span> <span class="nf">signApi</span><span class="p">(</span><span class="n">appName</span><span class="p">,</span> <span class="m">7200</span><span class="p">);</span> 
    <span class="n">email</span><span class="p">.</span><span class="n">Body</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextPart</span><span class="p">(</span><span class="n">TextFormat</span><span class="p">.</span><span class="n">Html</span><span class="p">)</span> <span class="p">{</span> 
      <span class="n">Text</span> <span class="p">=</span>  <span class="s">$@"</span><span class="err">
</span><span class="s">        Application Name: </span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        Updated Date: </span><span class="p">{</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">}</span><span class="s">&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br&gt;</span><span class="err">
</span><span class="s">        Click this link to approve the deployment in 2 hours.&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;a href='http://localhost:9999/argo/deploy?name=</span><span class="p">{</span><span class="n">appName</span><span class="p">}</span><span class="s">&amp;sign=</span><span class="p">{</span><span class="n">sign</span><span class="p">}</span><span class="s">' </span><span class="err">
</span><span class="s">          style='padding:10px 30px;border:1px solid #ccc;border-radius:5px;'&gt;</span><span class="err">
</span><span class="s">        Deploy Now</span><span class="err">
</span><span class="s">        &lt;/a&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;&lt;br&gt;&lt;br&gt;</span><span class="err">
</span><span class="s">        &lt;br /&gt;请注意：上述链接 2 小时候有效。"</span>
    <span class="p">};</span>

    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">smtp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SmtpClient</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="s">"smtp.gmail.com"</span><span class="p">,</span> <span class="m">465</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Authenticate</span><span class="p">(</span><span class="s">"cloudbeer@gmail.com"</span><span class="p">,</span> <span class="n">gmailPassword</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="n">smtp</span><span class="p">.</span><span class="nf">Disconnect</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="s">"OK"</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="kt">string</span> <span class="nf">signApi</span><span class="p">(</span><span class="kt">string</span> <span class="n">appName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">expireSecond</span><span class="p">){</span>
    <span class="kt">string</span> <span class="n">cachedKey</span> <span class="p">=</span> <span class="s">"abcdefghijklmnop"</span><span class="p">;</span>
    <span class="n">DateTime</span> <span class="n">expireAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddSeconds</span><span class="p">(</span><span class="n">expireSecond</span><span class="p">);</span>
    <span class="kt">string</span> <span class="n">sign</span> <span class="p">=</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">cachedKey</span> <span class="p">+</span> <span class="n">appName</span> <span class="p">+</span> <span class="n">expireAt</span><span class="p">.</span><span class="n">Ticks</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">signJson</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="n">signJson</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"expireAt"</span><span class="p">,</span> <span class="n">expireAt</span><span class="p">.</span><span class="n">Ticks</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
    <span class="n">signJson</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"sign"</span><span class="p">,</span> <span class="n">sign</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">jStrSign</span> <span class="p">=</span>  <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">signJson</span><span class="p">);</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">jStrSign</span><span class="p">);</span>

    <span class="k">return</span> <span class="nf">base64Encode</span><span class="p">(</span><span class="n">jStrSign</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">private</span> <span class="kt">bool</span> <span class="nf">verifyApi</span><span class="p">(</span><span class="kt">string</span> <span class="n">appName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sign</span><span class="p">){</span>
    <span class="kt">string</span> <span class="n">cachedKey</span> <span class="p">=</span> <span class="s">"abcdefghijklmnop"</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">jStrSign</span> <span class="p">=</span> <span class="nf">base64Decode</span><span class="p">(</span><span class="n">sign</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">signJson</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">jStrSign</span><span class="p">);</span>
    <span class="kt">long</span> <span class="n">expireAt</span> <span class="p">=</span> <span class="kt">long</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">signJson</span><span class="p">[</span><span class="s">"expireAt"</span><span class="p">]);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span> <span class="p">&gt;</span> <span class="n">expireAt</span><span class="p">){</span>
      <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">string</span> <span class="n">signFromApi</span> <span class="p">=</span> <span class="n">signJson</span><span class="p">[</span><span class="s">"sign"</span><span class="p">];</span>
    <span class="kt">string</span> <span class="n">signFromCache</span> <span class="p">=</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">cachedKey</span> <span class="p">+</span> <span class="n">appName</span> <span class="p">+</span> <span class="n">signJson</span><span class="p">[</span><span class="s">"expireAt"</span><span class="p">]);</span>
    <span class="k">return</span> <span class="n">signFromCache</span> <span class="p">==</span> <span class="n">signFromApi</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">string</span> <span class="nf">sha256</span><span class="p">(</span><span class="kt">string</span> <span class="n">randomString</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">SHA256</span> <span class="n">mySHA256</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="kt">byte</span><span class="p">[]</span> <span class="n">crypto</span> <span class="p">=</span> <span class="n">mySHA256</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">randomString</span><span class="p">));</span>
      <span class="kt">string</span> <span class="n">hash</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
      <span class="k">foreach</span> <span class="p">(</span><span class="kt">byte</span> <span class="n">theByte</span> <span class="k">in</span> <span class="n">crypto</span><span class="p">)</span>
      <span class="p">{</span>
          <span class="n">hash</span> <span class="p">+=</span> <span class="n">theByte</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="s">"x2"</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kt">string</span> <span class="nf">base64Encode</span><span class="p">(</span><span class="kt">string</span> <span class="n">plainText</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">plainTextBytes</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="nf">ToBase64String</span><span class="p">(</span><span class="n">plainTextBytes</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kt">string</span> <span class="nf">base64Decode</span><span class="p">(</span><span class="kt">string</span> <span class="n">base64EncodedData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">base64EncodedBytes</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="nf">FromBase64String</span><span class="p">(</span><span class="n">base64EncodedData</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">base64EncodedBytes</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="附net-core-项目入门">附：.NET Core 项目入门</h2>

<p>下面记录了代码开始之前的工作，包括 .NET 运行环境配置，创建项目，开发配置等工作。我开始写这个文章的时候电脑还没有 .NET 环境。</p>

<p>我准备使用 .NET 镜像作为我的开发环境，先拉一下镜像：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull mcr.microsoft.com/dotnet/sdk:7.0
</code></pre></div></div>

<h3 id="创建一个项目">创建一个项目</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  dotnet new webapp <span class="nt">-o</span> /app/ArgoTrigger <span class="nt">--no-https</span> <span class="nt">-f</span> net7.0
</code></pre></div></div>

<p>这个命令含义如下：</p>

<ul>
  <li>家目录的 /projects/cloudbeer 映射到容器的 /app</li>
  <li>通过 dotnet 命令在子目录 ArgoTrigger 里生产一个 asp.net core 项目。</li>
</ul>

<h3 id="安装依赖包">安装依赖包</h3>

<p>安装 2 个依赖包，MailKit 和 MimeKit，用来发送通知邮件。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  sh <span class="nt">-c</span> <span class="s2">"cd /app/ArgoTrigger &amp;&amp; dotnet add package MailKit"</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  sh <span class="nt">-c</span> <span class="s2">"cd /app/ArgoTrigger &amp;&amp; dotnet add package MimeKit"</span>
</code></pre></div></div>

<h3 id="启动项目">启动项目</h3>

<p>现在项目已经产生，可以打开 vscode 进行编辑了。</p>

<p>默认的 Web 开发 Url 是 localhost + 随机端口，但我们需要将 容器的 端口映射出来，需要一个 0.0.0.0 的固定端口，修改配置文件 appsettings.json，加入：<code class="language-plaintext highlighter-rouge">"Urls": "http://0.0.0.0:9999"</code></p>

<p>appsettings.json 这个文件现在看起来应该是这样：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Urls"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://0.0.0.0:9999"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>然后启动项目的开发模式：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-p</span> 9999:9999 <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">DOTNET_WATCH_RESTART_ON_RUDE_EDIT</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">GMAIL_PASSWORD</span><span class="o">=</span><span class="nv">$GMAIL_PASSWORD</span> <span class="se">\</span>
  <span class="nt">-v</span> ~/projects/cloudbeer:/app <span class="se">\</span>
  mcr.microsoft.com/dotnet/sdk:7.0 <span class="se">\</span>
  sh <span class="nt">-c</span> <span class="s2">"cd /app/ArgoTrigger &amp;&amp; dotnet watch -v"</span>
</code></pre></div></div>

<ul>
  <li>GMAIL_PASSWORD 是一个环境变量，是 Gmail 的临时登录 token，这个变量通过本机到容器，最终传入发送邮件的代码中。</li>
</ul>

<p>现在可以打开 <a href="http://localhost:9999/">http://localhost:9999/</a> 了。</p>

<blockquote>
  <p>没有 IDE 的代码提示，比较痛苦。不过，老夫是一把梭，一谷歌，一剪刀搞定一切。</p>
</blockquote>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container," /><category term="argocd" /><summary type="html"><![CDATA[使用 ArgoCD 可以有效解耦 CI 和 CD。 想象这个场景：当 CI 流程将构建物打包完成，并更新了 Git 部署仓库，此时 CI 流程发通知给相关有审批人员，审批者通过点击链接就可以完成部署。 虽然可以通过登录 Argo CD 的 UI 界面可以完成此操作，但感觉还不够丝滑。]]></summary></entry><entry><title type="html">自动化构建多架构(amd, arm)镜像</title><link href="https://youbug.cn/2022/12/buildx-multi-arch-images.html" rel="alternate" type="text/html" title="自动化构建多架构(amd, arm)镜像" /><published>2022-12-20T09:40:33+00:00</published><updated>2022-12-20T09:40:33+00:00</updated><id>https://youbug.cn/2022/12/buildx-multi-arch-images</id><content type="html" xml:base="https://youbug.cn/2022/12/buildx-multi-arch-images.html"><![CDATA[<p>现在很多软件发行的 Docker 镜像都会支持多架构，Docker 官方也有教程教大家如何实现，并且提供了一个 buildx 插件方便大家实现。本文使用 Gitlab CI 试了一下此插件，主要命令是 <code class="language-plaintext highlighter-rouge">docker buildx build --platform...</code>。</p>

<h2 id="检查-docker-环境">检查 docker 环境</h2>

<p>检查官方的 docker 20 的镜像，运行 docker info 查看 Plugins：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker info
Client:
 Context:    default
 Debug Mode: <span class="nb">false
 </span>Plugins:
  buildx: Docker Buildx <span class="o">(</span>Docker Inc., v0.9.1<span class="o">)</span>
  compose: Docker Compose <span class="o">(</span>Docker Inc., v2.14.1<span class="o">)</span>
...
</code></pre></div></div>

<p>已经内置了 buildx 插件。</p>

<h2 id="gitlab-ci-脚本">Gitlab CI 脚本</h2>

<h3 id="构建到官方仓库-docker-hub">构建到官方仓库 docker hub</h3>

<p>下面的示例 build 了一个 arm64 + amd64 的裸 JDK。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dockerx</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker:20</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
    <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
    <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s">/certs</span>
    <span class="na">DOCKER_TLS_VERIFY</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">DOCKER_CERT_PATH</span><span class="pi">:</span> <span class="s">/certs/client</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:20-dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">until docker version &gt; /dev/null; do sleep 1; done</span>
    <span class="pi">-</span> <span class="s">echo "FROM amazoncorretto:11" &gt; Dockerfile</span>
    <span class="pi">-</span> <span class="s">docker context create xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx create --name xbuilder --use xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx use xbuilder</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">echo $DOCKER_PASS | docker login -u$DOCKER_USER --password-stdin</span>
    <span class="pi">-</span> <span class="s">docker buildx build --platform linux/arm64,linux/amd64 -t cloudbeer/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA --push .</span>

</code></pre></div></div>

<ul>
  <li>主要的命令为 <code class="language-plaintext highlighter-rouge">docker buildx build --platform linux/arm64,linux/amd64</code>，可以直接指定平台架构。</li>
  <li>在 19+ 版本的 docker 里，docker 生产的证书需要时间，为了安全起见，需要检测 docker 状态：<code class="language-plaintext highlighter-rouge">until docker version &gt; /dev/null; do sleep 1; done</code>，等他没问题再进行下一步操作，否则任务会中断。</li>
  <li><code class="language-plaintext highlighter-rouge">docker context, docker buildx create, docker buildx use</code> 这些解决了 “
ERROR: multiple platforms feature is currently not supported for docker driver.”, “Docker buildx - could not create a builder instance with TLS data loaded from environment” 这些个错误。</li>
  <li><code class="language-plaintext highlighter-rouge">docker buildx build... --push</code> 会直接把镜像构建结果推送到 docker hub。</li>
</ul>

<p>构建结果：<a href="https://hub.docker.com/r/cloudbeer/pure-ci/tags">https://hub.docker.com/r/cloudbeer/pure-ci/tags</a></p>

<p><img src="/assets/posts/devops/docker-hub-multi.png" alt="Buildx result" /></p>

<h3 id="推送到-aws-ecr">推送到 AWS ECR</h3>

<p>使用 AWS 的服务，一般离不开 aws cli，在本场景中，要么在 aws cli 镜像中安装 docker，要么在 docker 里安装 aws cli，下面是我的测试脚本，此脚本可以 run 到最后：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dockerx-ecr</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">amazon/aws-cli</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">DOCKER_DRIVER</span><span class="pi">:</span> <span class="s">overlay2</span>
    <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2376</span>
    <span class="na">DOCKER_TLS_CERTDIR</span><span class="pi">:</span> <span class="s">/certs</span>
    <span class="na">DOCKER_TLS_VERIFY</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">DOCKER_CERT_PATH</span><span class="pi">:</span> <span class="s">/certs/client</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">amazon-linux-extras install docker</span>
    <span class="pi">-</span> <span class="s">mkdir -p ~/.docker/cli-plugins/</span>
    <span class="pi">-</span> <span class="s">until docker version &gt; /dev/null; do sleep 1; done</span>
    <span class="pi">-</span> <span class="s">docker container create --name buildx docker/buildx-bin sh</span>
    <span class="pi">-</span> <span class="s">docker cp buildx:/buildx ~/.docker/cli-plugins/docker-buildx</span>
    <span class="pi">-</span> <span class="s">echo "FROM amazoncorretto:11" &gt; Dockerfile</span>
    <span class="pi">-</span> <span class="s">docker context create xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx create --name xbuilder --use xbuilder-ctx</span>
    <span class="pi">-</span> <span class="s">docker buildx use xbuilder</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY</span>
    <span class="pi">-</span> <span class="s">docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA --push .</span>
</code></pre></div></div>

<p>上面的脚本成功运行。</p>

<p>下面是一些坑总结（吐槽模式开启）：</p>

<ul>
  <li>使用 官方 docker 镜像作为基础镜像构建，会发现 awscli v2 装不上， awscli v2 安装到 alpine 需要编译，不是简单加几个依赖包就行的，这个懒得折腾了。</li>
  <li>使用 pip 官方安装的 awscli v2 居然是在 docker 里运行的，这是在搞笑吗？我本来就是个 dind，套娃了啊。</li>
  <li>使用 aws-cli 镜像作为底包，<code class="language-plaintext highlighter-rouge">amazon-linux-extras install docker</code> 这个安装的 docker 居然把 plugins 都干掉了。干掉 compose 可以理解，为啥把 buildx 这么好的工具干掉了。</li>
  <li>安装 buildx 插件，可以直接从 buildx 镜像包中拷贝，命令是 <code class="language-plaintext highlighter-rouge">docker container create</code> 和 <code class="language-plaintext highlighter-rouge">docker cp</code>。</li>
  <li>使用 AWS ECR 别忘记要先建库。</li>
  <li>使用 AWS ECR 别忘记要先建库。</li>
  <li>使用 AWS ECR 别忘记要先建库。</li>
  <li><strong>我又忘记了。</strong></li>
</ul>

<p>最终的部分 log 贴在下面：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="nv">$ </span>aws ecr get-login-password <span class="nt">--region</span> us-east-1 | docker login <span class="nt">--username</span> AWS <span class="nt">--password-stdin</span> <span class="nv">$DOCKER_REGISTRY</span>
Login Succeeded
<span class="c">#3 transferring context: 2B done</span>
<span class="c">#3 DONE 0.1s</span>
<span class="c">#4 [linux/arm64 internal] load metadata for docker.io/library/amazoncorretto:11</span>
<span class="c">#4 DONE 2.6s</span>
<span class="c">#5 [linux/amd64 internal] load metadata for docker.io/library/amazoncorretto:11</span>
<span class="c">#5 DONE 2.6s</span>
...
<span class="c">#6 [linux/amd64 1/1] FROM docker.io/library/amazoncorretto:11@sha256:6962bc64de2b612c2a760299956853762cfcee538b1b6b55706661426546936c</span>
<span class="c">#6 DONE 0.1s</span>
<span class="c">#8 exporting to image</span>
<span class="c">#8 exporting layers done</span>
<span class="c">#8 exporting manifest sha256:3dd903be615ce4c36321b161806bc061a567079a2947ec658cdcd14d1c114235 0.0s done</span>
<span class="c">#8 exporting config sha256:8b9bb2aca3d28e14fa06412d152fd4ce6c7a55f1554bec3c71ce4a4410060af3</span>
<span class="c">#8 exporting config sha256:8b9bb2aca3d28e14fa06412d152fd4ce6c7a55f1554bec3c71ce4a4410060af3 0.0s done</span>
<span class="c">#8 exporting manifest sha256:4218135aa38e8522e988b60392190cd7bfc1715cedb3f301f82cec43fee383e2 0.0s done</span>
<span class="c">#8 exporting config sha256:de3379d966e1b03cf4c7f3c6db803f459cf1c3e887fbe2c10af9ce0c72a6f406 0.0s done</span>
<span class="c">#8 exporting manifest list sha256:dc0282c4166a58f7b8298e5061a00c02c6bce6e358000b479e49e6d73cf57b34 0.0s done</span>
<span class="c">#8 pushing layers</span>
<span class="c">#8 ...</span>
<span class="c">#9 [auth] sharing credentials for [MASKED].dkr.ecr.us-east-1.amazonaws.com</span>
<span class="c">#9 DONE 0.0s</span>
<span class="c">#8 exporting to image</span>
<span class="c">#8 ...</span>
<span class="c">#7 [linux/amd64 1/1] FROM docker.io/library/amazoncorretto:11@sha256:6962bc64de2b612c2a760299956853762cfcee538b1b6b55706661426546936c</span>
<span class="c">#7 sha256:74c4a50287c9345fabef12ad41b61e3450e3400fbe99f5d48281ceb781041ae3 147.75MB / 147.75MB 2.6s done</span>
<span class="c">#7 sha256:5b4a36b5b78f93a5f470cf722b313bb32cddb0f8e0fa0db348059b5c0881b04f 62.33MB / 62.33MB 1.0s done</span>
<span class="c">#7 DONE 2.9s</span>
<span class="c">#6 [linux/arm64 1/1] FROM docker.io/library/amazoncorretto:11@sha256:6962bc64de2b612c2a760299956853762cfcee538b1b6b55706661426546936c</span>
<span class="c">#6 sha256:c0aade9a94f7c23d8fc79b4c11ce14d37b8569a6fec3017a295169ff500ec8d8 144.91MB / 144.91MB 2.9s</span>
<span class="c">#6 sha256:6cbfee25f0741b3d3f4d2474d904a200cd8404a01aa17813bf3fc3d4ebb551a4 63.96MB / 63.96MB 1.8s done</span>
<span class="c">#6 sha256:c0aade9a94f7c23d8fc79b4c11ce14d37b8569a6fec3017a295169ff500ec8d8 144.91MB / 144.91MB 3.0s done</span>
<span class="c">#6 DONE 3.1s</span>
<span class="c">#8 exporting to image</span>
<span class="c">#8 pushing layers 17.6s done</span>
<span class="c">#8 pushing manifest for [MASKED].dkr.ecr.us-east-1.amazonaws.com/pure-ci:1ac460d1@sha256:dc0282c4166a58f7b8298e5061a00c02c6bce6e358000b479e49e6d73cf57b34</span>
<span class="c">#8 pushing manifest for [MASKED].dkr.ecr.us-east-1.amazonaws.com/pure-ci:1ac460d1@sha256:dc0282c4166a58f7b8298e5061a00c02c6bce6e358000b479e49e6d73cf57b34 2.2s done</span>
<span class="c">#8 DONE 19.8s</span>
Job succeeded
</code></pre></div></div>

<p>请忽略 ECR Web 控制台的显示方式。</p>

<h2 id="不是本文的总结">不是本文的总结</h2>

<ul>
  <li>使用 docker-buildx 会直接使用相应架构的底层依赖镜像，如果使用这种方法，您不能将一个有架构依赖的可执行文件直接拷贝构建镜像，否则会出现底层包和业务包对不上的问题。</li>
  <li>可以将构建过程放到 Dockerfile 里面去，Docker 有完整的多阶段构建的模式来生产您的镜像（如 go 语言）。</li>
  <li>对于脚本类型的语言，完全可以用这种方式构建，依赖包安装也应该在 Dockerfile 中进行。</li>
  <li>Java 的普通运行包可以使用直接拷贝的方式，X86 环境下构建的 jar 包可以直接运行在 ARM 的 jdk 中。</li>
  <li>Dockerfile 的底包也应该是多架构的，请不要强制指定具体的 digest 值。</li>
</ul>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="container," /><category term="tucao," /><category term="gitlab" /><summary type="html"><![CDATA[现在很多软件发行的 Docker 镜像都会支持多架构，Docker 官方也有教程教大家如何实现，并且提供了一个 buildx 插件方便大家实现。本文使用 Gitlab CI 试了一下此插件，主要命令是 docker buildx build --platform...。]]></summary></entry></feed>