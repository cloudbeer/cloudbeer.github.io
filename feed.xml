<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://youbug.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://youbug.cn/" rel="alternate" type="text/html" /><updated>2023-04-24T08:50:03+00:00</updated><id>https://youbug.cn/feed.xml</id><title type="html">YouBug</title><subtitle>分享，记录而已</subtitle><entry><title type="html">使用 LLM embeddings 进行数据存储和检索的新姿势</title><link href="https://youbug.cn/2023/04/llm-embeddings-search.html" rel="alternate" type="text/html" title="使用 LLM embeddings 进行数据存储和检索的新姿势" /><published>2023-04-24T04:13:33+00:00</published><updated>2023-04-24T04:13:33+00:00</updated><id>https://youbug.cn/2023/04/llm-embeddings-search</id><content type="html" xml:base="https://youbug.cn/2023/04/llm-embeddings-search.html"><![CDATA[<p>大语言模型可以将文字转化为 embeddings, embeddings 是一个向量(浮点数) 数组。把向量数组存到数据库，然后我们通过搜索最接近的向量就可以得到搜索结果了。本文试验了这一方式。</p>

<h2 id="概述">概述</h2>

<p>本文的过程大概如下：</p>

<p><img src="/assets/posts/aiml/llm-vector.png" alt="LLM Vecotor Search" /></p>

<p>本文将代码片段分解在了各小节，你如果要运行此文章的代码，可能需要一点 nodejs 的知识。你也可以直接转跳到最后一小节看效果。</p>

<p>调用本文章的代码需要设置如下这些环境变量：</p>

<ul>
  <li>OPENAI_API_KEY</li>
  <li>AWS_ACCESS_KEY_ID</li>
  <li>AWS_SECRET_ACCESS_KEY</li>
</ul>

<h2 id="向量计算">向量计算</h2>

<p>首先你要有一个大语言模型，需要将文本计算出向量，你可以部署一个私有的，也可以调用 API。</p>

<p>下面的函数 使用了 OpenAI 的 API 来获取向量值。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">OpenAIEmbeddings</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">langchain/embeddings/openai</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">embeddings</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OpenAIEmbeddings</span><span class="p">({</span> <span class="na">temperature</span><span class="p">:</span> <span class="mf">0.9</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">toVec</span> <span class="o">=</span>  <span class="k">async</span> <span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">embeddings</span><span class="p">.</span><span class="nx">embedQuery</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="向量数据库">向量数据库</h2>

<p>我们需要一个数据库能支持向量的存储和查询，可以使用专门的向量数据库，也可以使用 OpenSearch（Elastic Search），他的 knn 插件即可用来干这个。</p>

<p>我们先去 AWS 开通一个 OpenSearch，验证方式先使用 IAM User，稍后我们通过该 User 的 AKSK 来访问 OpenSearch。</p>

<p>请注意：需要使用 OpenSearch 而不是 OpenSearch Serverless。（OpenSearch Serverless 还不支持 knn 插件，2023-4-24）</p>

<h2 id="建索引">建索引</h2>

<p>首先创建索引，如下面的代码：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">defaultProvider</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@aws-sdk/credential-provider-node</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// V3 SDK.</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@opensearch-project/opensearch</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">AwsSigv4Signer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@opensearch-project/opensearch/aws</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
  <span class="p">...</span><span class="nx">AwsSigv4Signer</span><span class="p">({</span>
    <span class="na">region</span><span class="p">:</span> <span class="dl">'</span><span class="s1">us-east-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">service</span><span class="p">:</span> <span class="dl">'</span><span class="s1">es</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">getCredentials</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">credentialsProvider</span> <span class="o">=</span> <span class="nx">defaultProvider</span><span class="p">();</span>
      <span class="k">return</span> <span class="nx">credentialsProvider</span><span class="p">();</span>
    <span class="p">},</span>
  <span class="p">}),</span>
  <span class="na">node</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://xxxxxx.us-east-1.es.amazonaws.com</span><span class="dl">"</span>
<span class="p">});</span>


<span class="kd">var</span> <span class="nx">index_name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">doc_embeddings</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">createIndex</span><span class="p">:</span> <span class="k">async</span> <span class="nx">_</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">indices</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="na">index</span><span class="p">:</span> <span class="nx">index_name</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">settings</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">index.knn</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">mappings</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">properties</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
          <span class="dl">"</span><span class="s2">content_vec</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">knn_vector</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">dimension</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1536</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">method</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
              <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hnsw</span><span class="dl">"</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">space_type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">l2</span><span class="dl">"</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">engine</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">nmslib</span><span class="dl">"</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">parameters</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">ef_construction</span><span class="dl">"</span><span class="p">:</span> <span class="mi">128</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">m</span><span class="dl">"</span><span class="p">:</span> <span class="mi">24</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">},</span>
  <span class="p">});</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Creating index:</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
<span class="p">},</span>

</code></pre></div></div>

<h2 id="插入数据">插入数据</h2>

<p>参考下面的方法：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateData</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">index</span><span class="p">({</span>
      <span class="nx">id</span><span class="p">,</span>
      <span class="na">index</span><span class="p">:</span> <span class="nx">index_name</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
      <span class="na">refresh</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Adding document:</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
  <span class="p">},</span>
</code></pre></div></div>

<p>现在我想通过 url 直接让 OpenAI 对网址进行概括，并计算出向量值，存入数据库中。</p>

<p>这个是我要抓的 Url：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">datasets</span> <span class="o">=</span> <span class="p">[</span>
  <span class="dl">"</span><span class="s2">https://www.pinecone.io/learn/vector-database/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://www.infoq.com/news/2023/04/logic-apps-new-data-mapper/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://aws.amazon.com/cn/blogs/china/large-scale-dynamodb-table-data-cross-account-migration-guide/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://aws.amazon.com/blogs/startups/8-highlights-from-aws-startup-day-miami-you-want-to-experience/</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://www.baeldung.com/java-serialization</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">https://www.baeldung.com/mockito-lazy-verification</span><span class="dl">"</span>
<span class="p">];</span>
</code></pre></div></div>

<p>调用 OpenAI，让他去帮我们总结文章内容。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span>  <span class="nx">briefUrl</span> <span class="o">=</span> <span class="k">async</span> <span class="nx">url</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">model</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">`Summarize this url in English: </span><span class="p">${</span><span class="nx">url</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">};</span>
</code></pre></div></div>

<p>连起来调用：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateDataByUrl</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="nx">brief</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">briefUrl</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">content_vec</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">toVec</span><span class="p">(</span><span class="nx">brief</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">updateData</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">id</span><span class="p">,</span>
        <span class="nx">content_vec</span><span class="p">,</span>
        <span class="nx">url</span><span class="p">,</span>
        <span class="nx">brief</span>
    <span class="p">})</span>
<span class="p">};</span>


<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">index</span> <span class="k">in</span> <span class="nx">datasets</span><span class="p">){</span>
    <span class="nx">updateDataByUrl</span><span class="p">(</span>
        <span class="nx">index</span><span class="p">,</span> 
        <span class="nx">datasets</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="查询">查询</h2>

<p>到此为止，我们已经灌进去了几篇文章，这几篇文章大概是：</p>

<pre><code class="language-plain">0: 介绍向量数据库的
1: 微软 VS 的一个 Data Mapper 新功能
2: AWS DynamoDB 的迁移
3: AWS Miami 创业日的亮点
4: Java 序列化的方法
5: Mockito 的懒验证方式
</code></pre>

<p>现在我们试试查询，查询函数为，返回了 2 条相关结果：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 通过向量查询</span>
<span class="kd">const</span>  <span class="nx">searchVec</span> <span class="o">=</span> <span class="k">async</span> <span class="nx">vq</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">size</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">query</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">knn</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">content_vec</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">vector</span><span class="dl">"</span><span class="p">:</span> <span class="nx">vq</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">k</span><span class="dl">"</span><span class="p">:</span> <span class="mi">2</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">search</span><span class="p">({</span>
      <span class="na">index</span><span class="p">:</span> <span class="nx">index_name</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">query</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">hits</span><span class="p">;</span>
  <span class="p">};</span>

<span class="c1">// 封装成关键字，这里又问了 OpenAI 一下。</span>
<span class="kd">const</span>  <span class="nx">search</span> <span class="o">=</span> <span class="k">async</span> <span class="nx">q</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="nx">qVec</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">toVec</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">aos</span><span class="p">.</span><span class="nx">searchVec</span><span class="p">(</span><span class="nx">qVec</span><span class="p">);</span>
  <span class="p">};</span>

</code></pre></div></div>

<p>调用：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">search</span><span class="p">(</span><span class="dl">"</span><span class="s2">微软</span><span class="dl">"</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">rec</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
            <span class="na">_id</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
            <span class="na">_score</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_score</span><span class="p">,</span>
            <span class="na">url</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span>
            <span class="na">brief</span><span class="p">:</span> <span class="nx">rec</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">brief</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</code></pre></div></div>

<p>我存入的向量值都是通过英文计算出来的，现在我们就可以按照语义理解来查询了。</p>

<p>下面列举了查询的词语和和第一条结果。</p>

<p>“微软”：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'1'</span>,
  _score: 0.6547316,
  url: <span class="s1">'https://www.infoq.com/news/2023/04/logic-apps-new-data-mapper/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s2">"This article discusses Microsoft's Azure Logic Apps Data Mapper, a new feature that enables developers to easily map data between different sources and applications. The article outlines the various benefits of this tool, such as enabling better data integration and making complex data migrations easier. It also explains how the tool can help organizations migrate to the cloud more quickly and easily."</span>
<span class="o">}</span>
</code></pre></div></div>

<p>“亚马逊”</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'3'</span>,
  _score: 0.6621346,
  url: <span class="s1">'https://aws.amazon.com/blogs/startups/8-highlights-from-aws-startup-day-miami-you-want-to-experience/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s1">'This article summarizes the highlights from AWS Startup Day in Miami. It includes topics such as inspiring stories from entrepreneurs, tips on how to succeed in the startup world, and additional resources for those in the tech industry.'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>“データベース” - 数据库的日语</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'0'</span>,
  _score: 0.6666581,
  url: <span class="s1">'https://www.pinecone.io/learn/vector-database/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s1">'This article provides an introduction to vector databases, which are databases that store and process data in vector, rather than the traditional tabular, form. It outlines the advantages of using vector databases, such as faster query performance and more powerful analysis capabilities, and describes the components of a vector database and how they function.'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>“如何迁移亚马逊云的数据”</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  _id: <span class="s1">'2'</span>,
  _score: 0.69728285,
  url: <span class="s1">'https://aws.amazon.com/cn/blogs/china/large-scale-dynamodb-table-data-cross-account-migration-guide/'</span>,
  brief: <span class="s1">'\n'</span> +
    <span class="s1">'\n'</span> +
    <span class="s1">'This website provides a guide for those wishing to migrate large amounts of data from one DynamoDB table to another, between different AWS accounts. It covers topics such as what data can be migrated, best practices, and step-by-step instructions.'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我还测试了几个，比如 “I have no time” 查到了 懒加载，”怎么做生意” 查询到了 aws 创业日。</p>

<p>从整个逻辑可以看到 <strong>LLM 语言模型的能力越强，你的数据库系统的语言理解能力越强</strong>，然后就是要看数据库向量检索的能力了，现在市面上已经有很多的向量数据库了。</p>

<p>在 AIGC 和大模型的当下，还有很多事情可以做！大家加油！</p>

<hr />

<p>参考：</p>

<p><a href="https://docs.langchain.com/">https://docs.langchain.com/</a></p>

<p><a href="https://opensearch.org/docs/latest/search-plugins/knn/knn-index/">https://opensearch.org/docs/latest/search-plugins/knn/knn-index/</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml," /><category term="aws," /><category term="container" /><summary type="html"><![CDATA[大语言模型可以将文字转化为 embeddings, embeddings 是一个向量(浮点数) 数组。把向量数组存到数据库，然后我们通过搜索最接近的向量就可以得到搜索结果了。本文试验了这一方式。]]></summary></entry><entry><title type="html">ChatGLM-6B 的 Lora 微调</title><link href="https://youbug.cn/2023/04/chatglm-6b-finetune-lora.html" rel="alternate" type="text/html" title="ChatGLM-6B 的 Lora 微调" /><published>2023-04-19T02:10:49+00:00</published><updated>2023-04-19T02:10:49+00:00</updated><id>https://youbug.cn/2023/04/chatglm-6b-finetune-lora</id><content type="html" xml:base="https://youbug.cn/2023/04/chatglm-6b-finetune-lora.html"><![CDATA[<p>本文是开源项目的使用记录，按照文档操作， finetune 的过程其实很简单。</p>

<h2 id="项目信息">项目信息</h2>

<p>相关脚本地址：<a href="https://github.com/mymusise/ChatGLM-Tuning">https://github.com/mymusise/ChatGLM-Tuning</a></p>

<p>这个项目提供了如下的脚本：</p>

<p>转化 alpaca 数据集为 jsonl，tokenization 脚本，训练等。</p>

<h2 id="数据准备">数据准备</h2>

<p>使用了 stanford_alpaca 的数据集格式，格式如下:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"instruction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"帮我总结一下论文？"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"input"</span><span class="p">:</span><span class="w"> </span><span class="s2">"这里是论文的内容"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"output"</span><span class="p">:</span><span class="w"> </span><span class="s2">"总结的内容"</span><span class="w"> 
   </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>如果只是问答类型的数据，input 可以留空。</p>

<h2 id="数据集转换">数据集转换</h2>

<p>上述数据集 文件名是: <code class="language-plaintext highlighter-rouge">answers.json</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python cover_alpaca2jsonl.py <span class="se">\</span>
    <span class="nt">--data_path</span> data/answers.json <span class="se">\</span>
    <span class="nt">--save_path</span> data/answers.jsonl

python tokenize_dataset_rows.py <span class="se">\</span>
    <span class="nt">--jsonl_path</span> data/answers.jsonl <span class="se">\</span>
    <span class="nt">--save_path</span> data/answer <span class="se">\</span>
    <span class="nt">--skip_overlength</span> True
</code></pre></div></div>

<h2 id="开始训练">开始训练</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python finetune.py <span class="se">\</span>
      <span class="nt">--dataset_path</span> data/answer     <span class="se">\</span>
      <span class="nt">--lora_rank</span> 8     <span class="se">\</span>
      <span class="nt">--per_device_train_batch_size</span> 6     <span class="se">\</span>
      <span class="nt">--gradient_accumulation_steps</span> 1     <span class="se">\</span>
      <span class="nt">--max_steps</span> 400     <span class="se">\</span>
      <span class="nt">--save_steps</span> 100     <span class="se">\</span>
      <span class="nt">--save_total_limit</span> 2     <span class="se">\</span>
      <span class="nt">--learning_rate</span> 1e-4     <span class="se">\</span>
      <span class="nt">--fp16</span>     <span class="se">\</span>
      <span class="nt">--remove_unused_columns</span> <span class="nb">false</span>     <span class="se">\</span>
      <span class="nt">--logging_steps</span> 50     <span class="se">\</span>
      <span class="nt">--output_dir</span> output

</code></pre></div></div>

<p>训练比较耗时，所以这一步是最 “难” 的：如果参数不佳，需要调整参数重来一遍。</p>

<h2 id="使用刚刚训练-lora-模型">使用刚刚训练 Lora 模型</h2>

<p>下面的代码可以将 Lora 模型叠加到基础模型上去。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">AutoModel</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">"ChatGLM-path"</span><span class="p">,</span> <span class="n">trust_remote_code</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">PeftModel</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="s">"&lt;Your_Path&gt;/ChatGLM-Tuning/output"</span><span class="p">,</span> <span class="n">fan_in_fan_out</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>啤酒云</name></author><category term="aiml" /><summary type="html"><![CDATA[本文是开源项目的使用记录，按照文档操作， finetune 的过程其实很简单。]]></summary></entry><entry><title type="html">在 AWS 部署 AI 文生图为 Restful API 的最简单方式</title><link href="https://youbug.cn/2023/04/easy-way-to-inference-on-aws.html" rel="alternate" type="text/html" title="在 AWS 部署 AI 文生图为 Restful API 的最简单方式" /><published>2023-04-03T08:10:49+00:00</published><updated>2023-04-03T08:10:49+00:00</updated><id>https://youbug.cn/2023/04/easy-way-to-inference-on-aws</id><content type="html" xml:base="https://youbug.cn/2023/04/easy-way-to-inference-on-aws.html"><![CDATA[<p>当你的大模型练就之后，“很容易” 将模型部署到 SageMaker，但我们一般需要通过 Restful API 集成到应用中。本文以 Stable Diffussion 为例，介绍了一种简便的集成方法，并提供了代码。</p>

<h2 id="流程">流程</h2>

<p><img src="/assets/posts/aiml/sagemaker-s3-restful.png" alt="SageMaker restful" /></p>

<ol>
  <li>
    <p>用户请求 API Gateway, prompt 包含在 Url 中。</p>
  </li>
  <li>
    <p>API Gateway 将请求传向 Lambda。</p>
  </li>
  <li>
    <p>Lambda 请求 SageMaker 的 Endpoint。</p>
  </li>
  <li>
    <p>SageMaker 响应请求，返回 图片和 prompt 信息。</p>
  </li>
  <li>
    <p>Lambda 将图片上传到 S3。</p>
  </li>
  <li>
    <p>上传完成后，Lambda 对 S3 Object 进行 Url 签名。</p>
  </li>
  <li>
    <p>返回结果</p>
  </li>
  <li>
    <p>返回结果</p>
  </li>
</ol>

<h2 id="在-sagemaker-中部署模型">在 SageMaker 中部署模型</h2>

<p>进入 AWS 控制台的 SageMaker Studio，从左侧菜单选择 SageMaker JumpStart - Models, notebooks, solutions。</p>

<p>这里有非常多的现成的模型，选择一个，如 Stable Diffusion 2.1 base，进入之后，选择 “Deploy”。</p>

<p>稍等 “片刻”，等待 Endpoint 生产完成。</p>

<p>完成后，可以在左侧菜单的 Deployments - Endpoints 里看到 Endpoint 的 Name，这个 Name 就是下面代码中的 endpoint_name。</p>

<h2 id="编写-lambda">编写 Lambda</h2>

<p>直接看代码好了，解析在代码末尾，本段 Lambda 使用 Python 编写：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">boto3</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="n">endpoint_name</span> <span class="o">=</span> <span class="s">'jumpstart-name'</span>
<span class="n">bucket_name</span> <span class="o">=</span> <span class="s">'cloudbeer-aigc-works'</span>

<span class="n">s3_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'s3'</span><span class="p">)</span>
<span class="n">sagemaker_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'runtime.sagemaker'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">query_endpoint</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">"prompt"</span><span class="p">:</span><span class="n">text</span><span class="p">,</span> <span class="s">"width"</span><span class="p">:</span><span class="mi">512</span><span class="p">,</span> <span class="s">"height"</span><span class="p">:</span><span class="mi">512</span><span class="p">}</span>
    <span class="n">query_response</span> <span class="o">=</span> <span class="n">sagemaker_client</span><span class="p">.</span><span class="n">invoke_endpoint</span><span class="p">(</span>
              <span class="n">EndpointName</span><span class="o">=</span><span class="n">endpoint_name</span><span class="p">,</span> 
              <span class="n">ContentType</span><span class="o">=</span><span class="s">'application/json'</span><span class="p">,</span> 
              <span class="n">Body</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">).</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">),</span> 
              <span class="n">Accept</span> <span class="o">=</span> <span class="s">'application/json;jpeg'</span><span class="p">)</span>
    <span class="n">generated_images</span><span class="p">,</span> <span class="n">prompt</span> <span class="o">=</span> <span class="n">parse_response_multiple_images</span><span class="p">(</span><span class="n">query_response</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">generated_images</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">parse_response_multiple_images</span><span class="p">(</span><span class="n">query_response</span><span class="p">):</span>
    <span class="n">response_dict</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">query_response</span><span class="p">[</span><span class="s">'Body'</span><span class="p">].</span><span class="n">read</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">response_dict</span><span class="p">[</span><span class="s">'generated_images'</span><span class="p">],</span> <span class="n">response_dict</span><span class="p">[</span><span class="s">'prompt'</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">save_s3</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
    <span class="n">object_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">())</span> <span class="o">+</span> <span class="s">'.jpg'</span>
    <span class="n">resPut</span> <span class="o">=</span> <span class="n">s3_client</span><span class="p">.</span><span class="n">put_object</span><span class="p">(</span>
        <span class="n">ContentType</span><span class="o">=</span><span class="s">"image/jpeg"</span><span class="p">,</span>
        <span class="n">Body</span><span class="o">=</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">image</span><span class="p">),</span>
        <span class="n">Bucket</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">,</span>
        <span class="n">Key</span><span class="o">=</span><span class="n">object_name</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">s3_client</span><span class="p">.</span><span class="n">generate_presigned_url</span><span class="p">(</span><span class="s">'get_object'</span><span class="p">,</span>
                                                    <span class="n">Params</span><span class="o">=</span><span class="p">{</span><span class="s">'Bucket'</span><span class="p">:</span> <span class="n">bucket_name</span><span class="p">,</span>
                                                            <span class="s">'Key'</span><span class="p">:</span> <span class="n">object_name</span><span class="p">},</span>
                                                    <span class="n">ExpiresIn</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">ClientError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">response</span>
    
<span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="n">event</span><span class="p">[</span><span class="s">"queryStringParameters"</span><span class="p">][</span><span class="s">'prompt'</span><span class="p">]</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">query_endpoint</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="s">'statusCode'</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
        <span class="s">'body'</span><span class="p">:</span>  <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span>
            <span class="s">"url"</span><span class="p">:</span> <span class="n">save_s3</span><span class="p">(</span><span class="n">image</span><span class="p">),</span>
            <span class="s">"prompt"</span><span class="p">:</span> <span class="n">prompt</span>
        <span class="p">})</span>
    <span class="p">}</span>

</code></pre></div></div>

<p>上面的代码非常的简单，做了如下的事情：</p>

<ul>
  <li>定义了 2 个变量，分别是 模型的 Endpoint 和 S3 桶的名称。</li>
  <li>query_endpoint 和 parse_response_multiple_images 这两个函数直接使用了 SageMaker 的 Notebook 中的 Python 函数。这俩函数用来调用推理，并解析推理结果。</li>
  <li>save_s3 这个函数将图片上传到 S3 的存储桶，并生成一个 Presigned Url 作为输出结果。query_endpoint 的图片结果是图片的 byte 数组 base64 encode 之后的字符串，在上传 S3 的时候需要将字符串 decode 成 byte 数组。</li>
  <li>最后把结果组装一下就可以了， 参数：prompt 获取自 Querystring: <code class="language-plaintext highlighter-rouge">event["queryStringParameters"]['prompt']</code>。</li>
  <li>这个代码如果需要生产环境使用，请注意如下问题：
    <ul>
      <li>图片大小为 512*512，此尺寸可以直接在代码中修改，图片的尺寸会直接关系到生成速度和资源占用。</li>
      <li>Lambda 的执行超时时间需要调整。</li>
      <li>S3 文件的 Key 没有创建子目录，都在根下。</li>
      <li>S3 的文件名使用了时间戳，并发大的时候，有可能会有重复名称。</li>
      <li>S3 的签名过期时间是 5 分钟。</li>
      <li>记得加上权限认证，把这个服务提供给你真正的客户，毕竟 GPU 有点贵。</li>
    </ul>
  </li>
</ul>

<h2 id="iam-权限">IAM 权限</h2>

<p>在 Lambda 的 Configuration 的 Tab 里，可以看到一个 Execution role，点击具体的 role 进入 IAM 中，在这个 role 中需要分别加入 SageMaker 和 S3 的权限。</p>

<p>如，S3 的 Inline Policy 可以如下配置：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AccessAiGC"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:*"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"arn:aws:s3:::cloudbeer-aigc-works"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"arn:aws:s3:::cloudbeer-aigc-works/*"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>你亦可以配置相应的 SageMaker 权限。</p>

<h2 id="api-gateway">API Gateway</h2>

<p>新建一个 API Gateway，把他指向 Lambda 就好了。</p>

<p>现在访问如下的 API Gateway 的 Url 就可以看到结果了：</p>

<p><a href="https://xxxxxxxxxxx.execute-api.region.amazonaws.com/route?prompt=cyborg_tiger">https://xxxxxxxxxxx.execute-api.region.amazonaws.com/route?prompt=cyborg_tiger</a>  假的，不要点。</p>

<p>结果为：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://xxxxxxx.s3.amazonaws.com/xxxxxxxx.jpg?AWSAccessKeyId=...."</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cyborg_tiger"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>上面的 url 就是 AIGC 的输出结果，你应该看到了一只赛博老虎。😄</p>

<hr />

<p>参考：</p>

<p><a href="https://aws.amazon.com/cn/blogs/machine-learning/generate-images-from-text-with-the-stable-diffusion-model-on-amazon-sagemaker-jumpstart/">https://aws.amazon.com/cn/blogs/machine-learning/generate-images-from-text-with-the-stable-diffusion-model-on-amazon-sagemaker-jumpstart/</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml" /><summary type="html"><![CDATA[当你的大模型练就之后，“很容易” 将模型部署到 SageMaker，但我们一般需要通过 Restful API 集成到应用中。本文以 Stable Diffussion 为例，介绍了一种简便的集成方法，并提供了代码。]]></summary></entry><entry><title type="html">使用 QuickSight 自动展示 S3 的 Excel 文件</title><link href="https://youbug.cn/2023/04/quicksight-from-s3-excel.html" rel="alternate" type="text/html" title="使用 QuickSight 自动展示 S3 的 Excel 文件" /><published>2023-04-02T03:10:49+00:00</published><updated>2023-04-02T03:10:49+00:00</updated><id>https://youbug.cn/2023/04/quicksight-from-s3-excel</id><content type="html" xml:base="https://youbug.cn/2023/04/quicksight-from-s3-excel.html"><![CDATA[<p>Amazon QuickSight 是 AWS 数据分析的前端展示平台，支持使用 Amazon S3 存储桶的 Excel 文件作为数据集。本文介绍了如何设置 S3 和 如何配置自动刷新。</p>

<h2 id="s3-文件准备">S3 文件准备</h2>

<p>首先需要创建一个 manifest 的 JSON。</p>

<p>manifest 文件包含了 Amazon S3 对象位置和元数据的 JSON 文件。</p>

<p>以下是一个示例 Amazon S3 manifest 文件：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"entries"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3://my-bucket/salesdata/q1/report1.csv"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"mandatory"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"meta"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sales_period"</span><span class="p">:</span><span class="w"> </span><span class="s2">"report1"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3://my-bucket/salesdata/q1/report2.csv"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"mandatory"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"meta"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sales_period"</span><span class="p">:</span><span class="w"> </span><span class="s2">"report2"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>按照上述格式，此文件可以使用 S3 的 上传 Event 触发 Lambda 自动生成。</p>

<p>将上述 JSON 文件和 csv 文件 都上传到 S3。</p>

<h2 id="权限设置">权限设置</h2>

<p>进入 QuickSight 控制台，点击右上侧个人头像，展开菜单，选择 “管理 Quicksight”。</p>

<p>从左侧选择菜单 “安全性和权限”，并点击“管理” 按钮。</p>

<p>选择目标 S3 Bucket，保存之后，权限即可设置完成。</p>

<h2 id="新建数据集">新建数据集</h2>

<p>新建数据集，选择 S3：</p>

<ul>
  <li>数据源名称: 随便写</li>
  <li>清单文件：填写之前上传到 S3 的 manifest 的文件的 S3 地址即可</li>
</ul>

<p>设置完成，点击 “连接”。</p>

<p>进入之后，设计您的展示界面。</p>

<h2 id="配置-quicksight-自动刷新">配置 QuickSight 自动刷新</h2>

<p>到 QuickSight 控制台主页，从左侧菜单选择菜单 “数据集” ，找到刚刚创建的数据集。</p>

<p>进入之后，点击 “刷新” Tab，并点击右上侧的 “立即刷新” 或者 “添加新计划”.</p>

<ul>
  <li>
    <p>立即刷新 可以手工立即导入新的数据。</p>
  </li>
  <li>
    <p>添加新计划 可以按照周期（每小时，天，周，月）配置自动刷新。</p>
  </li>
</ul>]]></content><author><name>啤酒云</name></author><category term="aws" /><summary type="html"><![CDATA[Amazon QuickSight 是 AWS 数据分析的前端展示平台，支持使用 Amazon S3 存储桶的 Excel 文件作为数据集。本文介绍了如何设置 S3 和 如何配置自动刷新。]]></summary></entry><entry><title type="html">AI/ML Bookmarks</title><link href="https://youbug.cn/2023/03/aiml-awsome-projects.html" rel="alternate" type="text/html" title="AI/ML Bookmarks" /><published>2023-03-29T02:10:49+00:00</published><updated>2023-03-29T02:10:49+00:00</updated><id>https://youbug.cn/2023/03/aiml-awsome-projects</id><content type="html" xml:base="https://youbug.cn/2023/03/aiml-awsome-projects.html"><![CDATA[<p>本文就是 Bookmarks，是我体验过的(🦋)，正在体验的或准备体验的一些现成的库和链接。本文近期可能随时更新。</p>

<h2 id="-中文语言大模型">🐝 中文语言大模型</h2>

<h3 id="chatglm-">ChatGLM 🦋</h3>

<p>清华大学的大语言模型。</p>

<p>ChatGLM-6B 是一个开源的、支持中英双语的对话语言模型。</p>

<p><a href="https://github.com/THUDM/ChatGLM-6B">https://github.com/THUDM/ChatGLM-6B</a></p>

<p><a href="https://huggingface.co/THUDM">https://huggingface.co/THUDM</a></p>

<h3 id="chatyuan-">ChatYuan 🦋</h3>

<p>Large Language Model for Dialogue in Chinese and English，是一个支持中英双语的功能型对话语言大模型。</p>

<p><a href="https://github.com/clue-ai/ChatYuan">https://github.com/clue-ai/ChatYuan</a></p>

<p><a href="https://www.clueai.cn/">https://www.clueai.cn/</a></p>

<p><a href="https://huggingface.co/ClueAI">https://huggingface.co/ClueAI</a></p>

<h2 id="--虚拟主播">🐝  虚拟主播</h2>

<h3 id="sadtalker-">SadTalker 🦋</h3>

<p>Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation</p>

<p>输入图片文件，声音文件，生成符合口型的播音视频。</p>

<p><a href="https://github.com/Winfredy/SadTalker">https://github.com/Winfredy/SadTalker</a></p>

<blockquote>
  <p>当前特性：</p>

  <ul>
    <li>3D 效果</li>
    <li>可以眨眼睛</li>
    <li>
      <p>镜头，眼神转移</p>
    </li>
    <li>输入图片会被截取脸部放大 (2023-03-28)</li>
    <li>生成的视频偏小  (2023-03-28)</li>
    <li>程序运行环境较为苛刻，需要 N 卡， cudnn 等 (2023-03-28)</li>
  </ul>
</blockquote>

<h3 id="wav2lip">Wav2Lip</h3>

<p>Accurately Lip-syncing Videos In The Wild.</p>

<p><a href="https://github.com/Rudrabha/Wav2Lip">https://github.com/Rudrabha/Wav2Lip</a></p>

<p><a href="https://www.youtube.com/watch?v=Ic0TBhfuOrA">https://www.youtube.com/watch?v=Ic0TBhfuOrA</a></p>

<h2 id="-声音">🐝 声音</h2>

<h3 id="audioldm-">audioldm 🦋</h3>

<p>Generate speech, sound effects, music and beyond.</p>

<p>This repo currently support:</p>

<ul>
  <li>Text-to-Audio Generation: Generate audio given text input.</li>
  <li>Audio-to-Audio Generation: Given an audio, generate another audio that contain the same type of sound.</li>
  <li>Text-guided Audio-to-Audio Style Transfer: Transfer the sound of an audio into another one using the text description.</li>
</ul>

<p><a href="https://github.com/haoheliu/AudioLDM">https://github.com/haoheliu/AudioLDM</a></p>

<p><a href="https://audioldm.github.io/">https://audioldm.github.io/</a></p>

<blockquote>
  <ul>
    <li>通过文本生产声音</li>
    <li>也可以生成音乐</li>
    <li>当前默认的 model 效果一般，不知道自己练会怎样 (2023-03-29)</li>
  </ul>
</blockquote>

<h2 id="--试穿try-on">🐝  试穿(Try-On)</h2>

<h3 id="dressing-in-order-dior">Dressing in Order (DiOr)</h3>

<p>Dressing in Order: Recurrent Person Image Generation for Pose Transfer, Virtual Try-on and Outfit Editing.</p>

<p>可以多件衣服。</p>

<p><a href="https://github.com/cuiaiyu/dressing-in-order">https://github.com/cuiaiyu/dressing-in-order</a></p>

<h3 id="hr-viton">HR-VITON</h3>

<p><a href="https://github.com/sangyun884/HR-VITON">https://github.com/sangyun884/HR-VITON</a></p>

<p><a href="https://github.com/shadow2496/VITON-HD">https://github.com/shadow2496/VITON-HD</a></p>

<h3 id="pidm">PIDM</h3>

<p>Person Image Synthesis via Denoising Diffusion Model Open</p>

<p>可以控制姿态。提供 ipynb 文件。</p>

<p><a href="https://github.com/ankanbhunia/PIDM">https://github.com/ankanbhunia/PIDM</a></p>

<h2 id="--开源-ui">🐝  开源 UI</h2>

<h3 id="stable-diffusion-web-ui-">Stable Diffusion web UI 🦋</h3>

<p>Diffussion 生图 and More，无需多言。</p>

<p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a></p>

<h3 id="invokeai-">InvokeAI 🦋</h3>

<p>Diffussion 生图，界面精美。</p>

<p><a href="https://github.com/invoke-ai/InvokeAI">https://github.com/invoke-ai/InvokeAI</a></p>

<p><a href="https://invoke-ai.github.io/InvokeAI/">https://invoke-ai.github.io/InvokeAI/</a></p>

<h2 id="--商业在线应用">🐝  商业/在线应用</h2>

<h3 id="openai">OpenAI</h3>

<p>ChatGPT</p>

<p>DALL.E</p>

<p>…</p>

<h3 id="midjourney-">midjourney 🦋</h3>

<p>Diffussion 生图，在 Discord 内使用。</p>

<p><a href="https://www.midjourney.com/">https://www.midjourney.com/</a></p>

<h3 id="leonardoai">Leonardo.ai</h3>

<p>Diffussion 生图，在 Discord 内使用。</p>

<p><a href="https://leonardo.ai/">https://leonardo.ai/</a></p>

<h3 id="playground-ai-">Playground AI 🦋</h3>

<p>每天免费 1000 张，限定模型为 SD 1.5, SD 2.1。Prompt 参考。</p>

<p><a href="https://playgroundai.com/">https://playgroundai.com/</a></p>

<h3 id="prompthero">PromptHero</h3>

<p>Prompt 参考，Pro 版本提供 SD 模型生产。</p>

<p><a href="https://prompthero.com/">https://prompthero.com/</a></p>

<h3 id="runaway-ml">runaway ml</h3>

<p>在线视频工具 <a href="https://app.runwayml.com/">https://app.runwayml.com/</a></p>

<p>开源：<a href="https://github.com/runwayml">https://github.com/runwayml</a></p>

<h3 id="d-id-">D-ID 🦋</h3>

<p>数字人合成。</p>

<p><a href="https://www.d-id.com/">https://www.d-id.com/</a></p>

<h3 id="百度文心">百度文心</h3>

<p>文心大模型</p>

<p><a href="https://wenxin.baidu.com/">https://wenxin.baidu.com/</a></p>

<p>文心一言</p>

<p><a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/</a></p>

<p>文心一格 🦋</p>

<p><a href="https://yige.baidu.com/">https://yige.baidu.com/</a></p>

<h3 id="网易">网易</h3>

<p>天音 - 音乐创作平台</p>

<p><a href="https://tianyin.163.com/">https://tianyin.163.com/</a></p>

<h2 id="--其他">🐝  其他</h2>

<h3 id="film">FILM</h3>

<p>Frame Interpolation for Large Motion，视频插帧。</p>

<p><a href="https://github.com/google-research/frame-interpolation">https://github.com/google-research/frame-interpolation</a></p>

<h3 id="rife">RIFE</h3>

<p>Real-Time Intermediate Flow Estimation for Video Frame Interpolation.</p>

<p>ECCV 2022 - 视频插帧中的实时中间流估计，旷世科技。</p>

<p><a href="https://github.com/megvii-research/ECCV2022-RIFE">https://github.com/megvii-research/ECCV2022-RIFE</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/568553080">https://zhuanlan.zhihu.com/p/568553080</a></p>

<h3 id="humannerf">HumanNeRF</h3>

<p>Free-viewpoint Rendering of Moving People from Monocular Video (CVPR 2022)</p>

<p><a href="https://github.com/chungyiweng/humannerf">https://github.com/chungyiweng/humannerf</a></p>

<p><a href="https://github.com/zhaofuq/HumanNeRF">https://github.com/zhaofuq/HumanNeRF</a></p>

<p><a href="https://github.com/Chen-Lehan/HumanNeRF">https://github.com/Chen-Lehan/HumanNeRF</a></p>

<h3 id="sysmocap">SysMocap</h3>

<p>A cross-platform real-time video-driven motion capture and 3D virtual character rendering system for VTuber/Live/AR/VR.</p>

<p>跨平台的实时视频驱动动作捕捉及3D虚拟形象生成系统 for VTuber/Live/AR/VR.</p>

<p><a href="https://github.com/xianfei/SysMocap">https://github.com/xianfei/SysMocap</a></p>]]></content><author><name>啤酒云</name></author><category term="aiml" /><summary type="html"><![CDATA[本文就是 Bookmarks，是我体验过的(🦋)，正在体验的或准备体验的一些现成的库和链接。本文近期可能随时更新。]]></summary></entry><entry><title type="html">使用 Java 组装 Amazon Textract 解析出来的键值对</title><link href="https://youbug.cn/2023/03/textract-form-data.html" rel="alternate" type="text/html" title="使用 Java 组装 Amazon Textract 解析出来的键值对" /><published>2023-03-04T05:10:49+00:00</published><updated>2023-03-04T05:10:49+00:00</updated><id>https://youbug.cn/2023/03/textract-form-data</id><content type="html" xml:base="https://youbug.cn/2023/03/textract-form-data.html"><![CDATA[<p>Amazon Textract 就是 OCR, 针对国际单据啥的识别有奇效，看控制台的 Demo 觉得很受惊，居然有 KV 键值对的显示。但用 Java 代码咋获取键值对呢？他的 KEY_VALUE_SET 类型的 Block 使用方法 .text() 啥都没有哇。</p>

<h2 id="java-的-block-输出">Java 的 Block 输出</h2>

<p>先打印一下看看:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="nc">Block</span> <span class="n">block</span> <span class="o">:</span> <span class="n">blocks</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The block type is "</span> <span class="o">+</span> <span class="n">block</span><span class="o">.</span><span class="na">blockType</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">block</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----------\n"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下面是打印的原始 Block 部分信息（实际上有一大坨，这里一个类型留了一个）：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
The block type is PAGE
Block(BlockType=PAGE, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.8405368, Height=1.0, Left=0.09841533, Top=0.0), Polygon=[Point(X=0.09841533, Y=0.0), Point(X=0.9389521, Y=0.0), Point(X=0.9229099, Y=1.0), Point(X=0.11533637, Y=1.0)]), Id=bbede76c-e163-45ee-81d4-82afc8bad5ad, Relationships=[Relationship(Type=CHILD, Ids=[e694910a-dc8c-4bd4-9b4e-d6262b549705, c959f258-1e33-4591-8394-dce960cc7e55, 82c3e843-c149-4f8b-b3bc-0e3299f6d551, 4932758c-12a7-4bc3-90a4-87a135c54d6e, 01aa9893-ccb2-4b0a-b2a0-ea954b35fe4b, 2975d587-f5de-4436-92f3-480f1c9aa656, 951fca1a-7f9d-475b-8aff-e9e0ef9000d5, ....])])
----------

The block type is LINE
Block(BlockType=LINE, Confidence=70.37652, Text=xxxxxxxxxxx - mail@frankonia.de, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.2087112, Height=0.023847194, Left=0.58435017, Top=0.03585644), Polygon=[Point(X=0.58439976, Y=0.03585644), Point(X=0.7930614, Y=0.036802612), Point(X=0.7928248, Y=0.059703637), Point(X=0.58435017, Y=0.058780655)]), Id=e694910a-dc8c-4bd4-9b4e-d6262b549705, Relationships=[Relationship(Type=CHILD, Ids=[3d1c10aa-9ee9-4efa-8f24-eb4487fcc927, 7e653065-ecf4-47a5-9518-aa4b70fcd7ea, d103f1ac-25ab-48cf-9824-0ff6277e59e2])])
----------

The block type is WORD
Block(BlockType=WORD, Confidence=98.42162, Text=Fax, TextType=PRINTED, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.018412054, Height=0.01635857, Left=0.6832591, Top=0.061593868), Polygon=[Point(X=0.68335754, Y=0.061593868), Point(X=0.7016712, Y=0.061674744), Point(X=0.70156115, Y=0.07795244), Point(X=0.6832591, Y=0.07787301)]), Id=66db8d1e-a1b6-40c4-8a77-afc4fc250870)
----------

The block type is WORD
Block(BlockType=WORD, Confidence=98.718414, Text=€, TextType=PRINTED, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.0076815123, Height=0.018535566, Left=0.8544621, Top=0.87233585), Polygon=[Point(X=0.8547062, Y=0.87233585), Point(X=0.8621436, Y=0.8723405), Point(X=0.86189395, Y=0.8908714), Point(X=0.8544621, Y=0.8908674)]), Id=db9dcabb-8aa6-4bb7-b924-5f91add0530b)
----------


The block type is KEY_VALUE_SET
Block(BlockType=KEY_VALUE_SET, Confidence=86.59171, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.08317889, Height=0.024558436, Left=0.6154753, Top=0.7993664), Polygon=[Point(X=0.6155607, Y=0.7993664), Point(X=0.6986542, Y=0.79944664), Point(X=0.69848675, Y=0.8239249), Point(X=0.6154753, Y=0.82385427)]), Id=89664d58-b1eb-4ad3-912f-705500e4b08b, Relationships=[Relationship(Type=VALUE, Ids=[0df283e1-7079-46ef-baea-fafedc580ee4]), Relationship(Type=CHILD, Ids=[11a76d29-860a-43f4-bf8a-816b5993ae9c, 47f62df8-6fb1-4b09-b4ff-ac8901f230a3])], EntityTypes=[KEY])
----------

The block type is KEY_VALUE_SET
Block(BlockType=KEY_VALUE_SET, Confidence=86.59171, Geometry=Geometry(BoundingBox=BoundingBox(Width=0.056614958, Height=0.023218233, Left=0.81078696, Top=0.7957822), Polygon=[Point(X=0.8110504, Y=0.7957822), Point(X=0.8674019, Y=0.7958376), Point(X=0.8670859, Y=0.8190004), Point(X=0.81078696, Y=0.8189512)]), Id=0df283e1-7079-46ef-baea-fafedc580ee4, Relationships=[Relationship(Type=CHILD, Ids=[2f71d668-e883-40dc-9d73-0a50d5954e84, 904205cd-0eeb-4bd6-a4e1-05c1dd168182])], EntityTypes=[VALUE])
----------

</code></pre></div></div>

<h2 id="数据结构分析">数据结构分析</h2>

<p>这真是个费眼睛的活儿，对比 python 的代码，分析出 KEY_VALUE_SET 部分的结构为：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">KEY_VALUE_SET</code> 分类 <code class="language-plaintext highlighter-rouge">KEY</code> 和 <code class="language-plaintext highlighter-rouge">VALUE</code>, 这个记录在 <code class="language-plaintext highlighter-rouge">blockType()</code> 为 <code class="language-plaintext highlighter-rouge">KEY_VALUE_SET</code> 的 <code class="language-plaintext highlighter-rouge">EntityTypes</code> 字段里了。</li>
  <li>通过 <code class="language-plaintext highlighter-rouge">KEY</code> 的 block 的 <code class="language-plaintext highlighter-rouge">Relationships</code> 中的 <code class="language-plaintext highlighter-rouge">CHILD</code> 的 <code class="language-plaintext highlighter-rouge">Ids</code> 去找到对应的 <code class="language-plaintext highlighter-rouge">WORD</code>，<code class="language-plaintext highlighter-rouge">text()</code> 就是 <code class="language-plaintext highlighter-rouge">KEY</code> 的值了。</li>
  <li><code class="language-plaintext highlighter-rouge">KEY</code> block 的 <code class="language-plaintext highlighter-rouge">Relationships</code> 里有一个 <code class="language-plaintext highlighter-rouge">VALUE</code> 的关系，value block 的 <code class="language-plaintext highlighter-rouge">Ids</code> 就存在这里。</li>
  <li>通过上面的 id 匹配 block 的 <code class="language-plaintext highlighter-rouge">Id</code> 字段得到对应的 value block。</li>
  <li>然后通过 value block <code class="language-plaintext highlighter-rouge">Relationships</code> 的 <code class="language-plaintext highlighter-rouge">CHILD</code> 再寻找为 <code class="language-plaintext highlighter-rouge">WORD</code> 类型的 block 的值。</li>
  <li><code class="language-plaintext highlighter-rouge">LINE</code> 类型暂时没用上。</li>
</ul>

<h2 id="完整代码">完整代码</h2>

<p>然后就可以写出 java 对应的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">aws.cloudbeer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.regions.Region</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.services.textract.TextractClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.services.textract.model.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Region</span> <span class="n">region</span> <span class="o">=</span> <span class="nc">Region</span><span class="o">.</span><span class="na">US_EAST_1</span><span class="o">;</span>
        <span class="nc">TextractClient</span> <span class="n">textractClient</span> <span class="o">=</span> <span class="nc">TextractClient</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">region</span><span class="o">(</span><span class="n">region</span><span class="o">)</span>
                <span class="o">.</span><span class="na">credentialsProvider</span><span class="o">(</span><span class="nc">ProfileCredentialsProvider</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="n">analyzeDocS3</span><span class="o">(</span><span class="n">textractClient</span><span class="o">,</span> <span class="s">"cloudbeer-textract"</span><span class="o">,</span> <span class="s">"1.jpg"</span><span class="o">);</span>
        <span class="n">textractClient</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">analyzeDocS3</span><span class="o">(</span><span class="nc">TextractClient</span> <span class="n">textractClient</span><span class="o">,</span> <span class="nc">String</span> <span class="n">bucketName</span><span class="o">,</span> <span class="nc">String</span> <span class="n">docName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">S3Object</span> <span class="n">s3Object</span> <span class="o">=</span> <span class="nc">S3Object</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">bucket</span><span class="o">(</span><span class="n">bucketName</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">docName</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

            <span class="nc">Document</span> <span class="n">myDoc</span> <span class="o">=</span> <span class="nc">Document</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">s3Object</span><span class="o">(</span><span class="n">s3Object</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>


            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FeatureType</span><span class="o">&gt;</span> <span class="n">featureTypes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">FeatureType</span><span class="o">&gt;();</span>
            <span class="n">featureTypes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">FeatureType</span><span class="o">.</span><span class="na">FORMS</span><span class="o">);</span>
<span class="c1">//            featureTypes.add(FeatureType.TABLES);</span>
<span class="c1">//            featureTypes.add(FeatureType.QUERIES);</span>
<span class="c1">//            featureTypes.add(FeatureType.SIGNATURES);</span>


            <span class="nc">AnalyzeDocumentRequest</span> <span class="n">analyzeDocumentRequest</span> <span class="o">=</span> <span class="nc">AnalyzeDocumentRequest</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">featureTypes</span><span class="o">(</span><span class="n">featureTypes</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">document</span><span class="o">(</span><span class="n">myDoc</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

            <span class="nc">AnalyzeDocumentResponse</span> <span class="n">analyzeDocument</span> <span class="o">=</span> <span class="n">textractClient</span><span class="o">.</span><span class="na">analyzeDocument</span><span class="o">(</span><span class="n">analyzeDocumentRequest</span><span class="o">);</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">docInfo</span> <span class="o">=</span> <span class="n">analyzeDocument</span><span class="o">.</span><span class="na">blocks</span><span class="o">();</span>

            <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">kvSets</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>


            <span class="k">for</span> <span class="o">(</span><span class="nc">Block</span> <span class="n">block</span> <span class="o">:</span> <span class="n">docInfo</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">block</span><span class="o">.</span><span class="na">blockType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">BlockType</span><span class="o">.</span><span class="na">KEY_VALUE_SET</span> <span class="o">&amp;&amp;</span> <span class="n">block</span><span class="o">.</span><span class="na">entityTypes</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="nc">EntityType</span><span class="o">.</span><span class="na">KEY</span><span class="o">))</span> <span class="o">{</span>

                    <span class="nc">StringBuilder</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
                    <span class="nc">StringBuilder</span> <span class="n">val</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

                    <span class="k">for</span> <span class="o">(</span><span class="nc">Relationship</span> <span class="n">relationship</span> <span class="o">:</span> <span class="n">block</span><span class="o">.</span><span class="na">relationships</span><span class="o">())</span> <span class="o">{</span>
                        <span class="c1">// 通过 KeySet  的关系中的 CHILD 去找Key的的值</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">relationship</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="nc">RelationshipType</span><span class="o">.</span><span class="na">CHILD</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">relationship</span><span class="o">.</span><span class="na">ids</span><span class="o">();</span>
                            <span class="n">key</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">findKeyWord</span><span class="o">(</span><span class="n">docInfo</span><span class="o">,</span> <span class="n">ids</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="c1">// 通过 KeySet 的关系中的 VALUE 去找 VALUE 的 block，在通过 VALUE 的 CHILD 去找值</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">relationship</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="nc">RelationshipType</span><span class="o">.</span><span class="na">VALUE</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">relationship</span><span class="o">.</span><span class="na">ids</span><span class="o">();</span>
                            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">val</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">findValueWord</span><span class="o">(</span><span class="n">docInfo</span><span class="o">,</span> <span class="n">ids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">))).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
                            <span class="o">}</span>

                        <span class="o">}</span>
                    <span class="o">}</span>
                    <span class="n">kvSets</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">val</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">kvSets</span><span class="o">);</span>


        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">TextractException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">findValueWord</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">blocks</span><span class="o">,</span> <span class="nc">String</span> <span class="n">keyId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">rtn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">valBlock</span> <span class="o">=</span> <span class="n">blocks</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">blockType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">BlockType</span><span class="o">.</span><span class="na">KEY_VALUE_SET</span> <span class="o">&amp;&amp;</span> <span class="n">keyId</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">id</span><span class="o">())).</span><span class="na">findFirst</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">valBlock</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
             <span class="nc">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="n">valBlock</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Relationship</span> <span class="n">relationship</span> <span class="o">:</span> <span class="n">block</span><span class="o">.</span><span class="na">relationships</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// 通过 KeySet  的关系 儿子去找Key的的值</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">relationship</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="nc">RelationshipType</span><span class="o">.</span><span class="na">CHILD</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">relationship</span><span class="o">.</span><span class="na">ids</span><span class="o">();</span>
                    <span class="n">rtn</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">findKeyWord</span><span class="o">(</span><span class="n">blocks</span><span class="o">,</span> <span class="n">ids</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rtn</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">findKeyWord</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">blocks</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">StringBuilder</span> <span class="n">rtn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Block</span><span class="o">&gt;</span> <span class="n">vBlocks</span> <span class="o">=</span> <span class="n">blocks</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">blockType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">BlockType</span><span class="o">.</span><span class="na">WORD</span> <span class="o">&amp;&amp;</span> <span class="n">id</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">id</span><span class="o">())).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">vBlocks</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">rtn</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">vBlocks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">text</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rtn</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<hr />
<p>参考：</p>

<p>Textract JAVA Demo <a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/javav2/example_code/textract">https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/javav2/example_code/textract</a></p>

<p>Python Extract KV Pairs <a href="https://docs.aws.amazon.com/textract/latest/dg/examples-extract-kvp.html">https://docs.aws.amazon.com/textract/latest/dg/examples-extract-kvp.html</a></p>]]></content><author><name>啤酒云</name></author><category term="aws," /><category term="tucao" /><summary type="html"><![CDATA[Amazon Textract 就是 OCR, 针对国际单据啥的识别有奇效，看控制台的 Demo 觉得很受惊，居然有 KV 键值对的显示。但用 Java 代码咋获取键值对呢？他的 KEY_VALUE_SET 类型的 Block 使用方法 .text() 啥都没有哇。]]></summary></entry><entry><title type="html">在 AWS 里，使用 Jenkins 跨账号执行任务</title><link href="https://youbug.cn/2023/03/jenkins-assume-role.html" rel="alternate" type="text/html" title="在 AWS 里，使用 Jenkins 跨账号执行任务" /><published>2023-03-02T07:02:33+00:00</published><updated>2023-03-02T07:02:33+00:00</updated><id>https://youbug.cn/2023/03/jenkins-assume-role</id><content type="html" xml:base="https://youbug.cn/2023/03/jenkins-assume-role.html"><![CDATA[<p>在 AWS 中，企业的 Jenkins 通常安装在开发测试环境，如果需要操作生产环境中的资源，如何设置权限呢？本文介绍了方法。</p>

<h2 id="jenkins-configuration-jenkins-设置">Jenkins Configuration （Jenkins 设置）</h2>

<p>As a Jenkins administator, Menu: Manage Jenkins -&gt; Manage Plugins, Search “Pipeline: AWS Steps”, ensure this Jenkins plugin is installed.</p>

<p>以 Jenkins 的管理员身份登录，进入菜单： Manage Jenkins -&gt; Manage Plugins，搜索 “Pipeline: AWS Steps”，安装这个插件。</p>

<p>From “Manage Jenkins  -&gt; Configure System” to enable ‘Retrieve credentials from node’.</p>

<p>在菜单 “系统管理 -&gt; 系统配置” 中，启用 “Pipeline: AWS Steps” 的 “Retrieve credentials from node”。</p>

<h2 id="node-settings-节点设置jenkins-运行节点">Node settings 节点设置（Jenkins 运行节点）</h2>

<p>My Jenkins is installed in an EC2 instace and the workers in EC2 also.</p>

<p>Firstly, Bind a role to the EC2. Choose the Jenkins EC2, then choose Actions -&gt; Security -&gt; Modify IAM role.</p>

<p>现在设置 Jenkins 所在的 EC2 的角色。</p>

<p>选择目标 EC2，并选择如图的菜单：</p>

<p><img src="/assets/posts/devops/jenkins-assume-01.png" alt="Set EC2 Role" /></p>

<p>Next, you can choose a role, or create a new one.</p>

<p>When you update the IAM role of EC2, your Jenkins will be granted the role.</p>

<p>现在请选择一个 role，或者创建一个新的。</p>

<p>选择好之后，更新 EC2 的 Role。</p>

<h2 id="create-an-iam-role-in-another-account-在另一个账号中创建角色">Create an IAM Role in another account （在另一个账号中创建角色）</h2>

<p>Now, We can login to the production account.</p>

<p>Create a new role:</p>

<p>现在登录到生产账号。并创建一个角色。</p>

<ul>
  <li>Trusted entity type: Amazon Web Services account</li>
  <li>An Amazon Web Services account: Another Amazon Web Services account of the account id of Jenkins installed (number, such as 12345679012).</li>
  <li>Next choose some permissions policy.</li>
  <li>Give the role a name, such as ‘for-Jenkins’.</li>
</ul>

<h2 id="modify-the-jenkins-ec2-role">Modify the Jenkins EC2 role</h2>

<p>Now back to the Jenkins account. Modify the ec2 role.</p>

<p>In the “Permisions” tab, choose “Add permissions -&gt; Create inline policy”:</p>

<p>现在返回 Jenkins 所在的账号，给刚刚 EC2 的角色进行角色扮演。</p>

<p>在角色设置面板设置一个内联策略，进入 “Permisions” tab, 选择 “Add permissions -&gt; Create inline policy”:</p>

<p>The policy is like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws-cn:iam::&lt;your-prod-account-id&gt;:role/for-Jenkins"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sts:AssumeRole"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="jenkinsfile">Jenkinsfile</h2>

<p>Now the Jenkinsfile maybe as:</p>

<p>Jenkinsfile 这么写就行:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipeline</span> <span class="o">{</span>
  <span class="n">agent</span> <span class="n">any</span>
  <span class="n">stages</span> <span class="o">{</span>
    <span class="n">stage</span><span class="o">(</span><span class="s1">'build'</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">steps</span> <span class="o">{</span>
        <span class="n">script</span> <span class="o">{</span>
          <span class="n">withAWS</span><span class="o">(</span><span class="nl">role:</span><span class="s1">'for-Jenkins'</span><span class="o">,</span> <span class="nl">roleAccount:</span><span class="s1">'&lt;your-prod-account-id&gt;'</span><span class="o">,</span> <span class="nl">region:</span> <span class="s1">'cn-northwest-1'</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">def</span> <span class="n">res</span> <span class="o">=</span> <span class="n">s3Upload</span><span class="o">(</span><span class="nl">file:</span><span class="s1">'readme.md'</span><span class="o">,</span> <span class="nl">bucket:</span><span class="s1">'xxxx'</span><span class="o">,</span> <span class="nl">path:</span><span class="s1">'readme.md'</span><span class="o">)</span>
            <span class="n">println</span><span class="o">(</span><span class="n">res</span><span class="o">)</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>You will see the file uploaded to the target s3 bucket if the permissions are right.</p>

<p>如果权限设置合理，就可以看到 Jenkins 成功上传文件到另一个账号了。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Setting AWS region cn-northwest-1 
 Retrieving credentials from node.
Requesting assume role
Assuming role ARN is arn:aws-cn:iam::123456789012:role/ role arn:aws-cn:sts::123456789012:assumed-role/for-Jenkins/Jenkins-Jenkins-withAWS-gitee-16 with <span class="nb">id </span>AROATUJBXHIVWAC6AZW3X:Jenkins-Jenkins-withAWS-gitee-16 
 <span class="o">[</span>Pipeline] <span class="o">{</span>
<span class="o">[</span>Pipeline] s3Upload
Uploading file:/var/Jenkins_home/workspace/Jenkins-withAWS_gitee/readme.md to s3://xxxxx/readme.md 
Finished: Uploading to xxxxx/readme.md
Upload <span class="nb">complete</span>
<span class="o">[</span>Pipeline] <span class="nb">echo
</span>s3://xxxxx/readme.md
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // withAWS
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // stage
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // withEnv
<span class="o">[</span>Pipeline] <span class="o">}</span>
<span class="o">[</span>Pipeline] // node
<span class="o">[</span>Pipeline] End of Pipeline
Finished: SUCCESS
...
</code></pre></div></div>

<h2 id="more">More</h2>

<p>Mybe your Jenkins worker runs in a pod. In this situation, you can use <a href="https://docs.aws.amazon.com/zh_cn/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-enable-IAM.html">IRSA style</a> to assume role between accounts.</p>

<p>If you use AKSK in Jenkins, you can assume the role to the IAM user of AKSK.</p>

<p>如果 Jenkins 安装在 EKS 的 Pod 里，那么可以利用 <a href="https://docs.aws.amazon.com/zh_cn/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-enable-IAM.html">IRSA 方式</a> 进行角色扮演。</p>

<p>另外一点，如果在 Jenkins 里使用的是 AKSK，那么就把角色扮演到 AKSK 对应的 IAM User 即可。</p>

<hr />

<p>References：</p>

<p><a href="https://plugins.Jenkins.io/pipeline-aws/">Jenkins plugin: Pipeline: AWS Steps</a></p>]]></content><author><name>啤酒云</name></author><category term="devops," /><category term="aws" /><summary type="html"><![CDATA[在 AWS 中，企业的 Jenkins 通常安装在开发测试环境，如果需要操作生产环境中的资源，如何设置权限呢？本文介绍了方法。]]></summary></entry><entry><title type="html">使用 Lambda 配合 GuardDuty 事件封禁攻击源</title><link href="https://youbug.cn/2023/02/guardduty-lambda-block.html" rel="alternate" type="text/html" title="使用 Lambda 配合 GuardDuty 事件封禁攻击源" /><published>2023-02-23T05:10:49+00:00</published><updated>2023-02-23T05:10:49+00:00</updated><id>https://youbug.cn/2023/02/guardduty-lambda-block</id><content type="html" xml:base="https://youbug.cn/2023/02/guardduty-lambda-block.html"><![CDATA[<p>在针对 AWS 的网络攻击过程中，有一类攻击是暴力破解 root 账号，此类攻击会被 GuardDuty 监控并记录到。当发生此类暴力破解事件的时候，可以通过 Lambda 来对攻击源进行及时封禁。</p>

<h2 id="lambda-函数">Lambda 函数</h2>

<p>下面的 Lambda 函数是基于 GuardDuty 对一个 RDP 暴力破解事件进行的 响应，使用 nodejs 编写。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">aws-sdk</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">innerCidrs</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">172.31.0.0/16</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">172.33.0.0/16</span><span class="dl">"</span><span class="p">];</span> <span class="c1">//内网 IP cidr。</span>
<span class="kd">const</span> <span class="nx">protectedVpcIds</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">vpc-xxxxxxxx</span><span class="dl">'</span><span class="p">];</span> <span class="c1">//当外部攻击时候，需要保护的 VPC。</span>
<span class="kd">const</span> <span class="nx">forbiddenSgId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">sg-xxxxxxxxxxxx</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//预定义的隔离安全组 ID，此安全组规则是全部封禁。</span>
<span class="kd">const</span> <span class="nx">region</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">cn-northwest-1</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">region</span><span class="p">});</span>
<span class="kd">const</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">EC2</span><span class="p">();</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sourceIp</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">network</span><span class="p">.</span><span class="nx">sourceIpV4</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">attackType</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">isInnerIp</span> <span class="o">=</span> <span class="nx">checkInnerIp</span><span class="p">(</span><span class="nx">sourceIp</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isInnerIp</span> <span class="o">&amp;&amp;</span> <span class="nx">attackType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">RDPBruteForce</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">这是内部 IP，直接修改目标主机安全组进行隔离。</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">findEC2</span><span class="p">(</span><span class="nx">sourceIp</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">ec2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">await</span> <span class="nx">banInnerEc2</span><span class="p">(</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">InstanceId</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">ex</span><span class="p">){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">ex</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">这是外部 IP，建议调用 网络防火墙 API（如 fortnet）进行网络阻断。</span><span class="dl">"</span><span class="p">);</span>
    
    <span class="c1">// await banExternalIp(sourceIp);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 判断是否是内部 IP</span>
<span class="kd">function</span> <span class="nx">checkInnerIp</span><span class="p">(</span><span class="nx">ipAddress</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">cidrLen</span> <span class="o">=</span> <span class="nx">innerCidrs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">cidrLen</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">checkIpInCidr</span><span class="p">(</span><span class="nx">innerCidrs</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">ipAddress</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">checkIpInCidr</span><span class="p">(</span><span class="nx">cidr</span><span class="p">,</span> <span class="nx">ipAddress</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">ipInt</span> <span class="o">=</span> <span class="nx">ipToInt</span><span class="p">(</span><span class="nx">ipAddress</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">parseCIDR</span><span class="p">(</span><span class="nx">cidr</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">ipInt</span> <span class="o">&gt;=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">start</span> <span class="o">&amp;&amp;</span> <span class="nx">ipInt</span><span class="o">&lt;=</span><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">){</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">ipToInt</span><span class="p">(</span><span class="nx">ip</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">subnet</span> <span class="o">=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">subnet</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">subnet</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">subnet</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">subnet</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">parseCIDR</span><span class="p">(</span><span class="nx">cidr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">subnetAddress</span><span class="p">,</span> <span class="nx">mask</span><span class="p">]</span> <span class="o">=</span> <span class="nx">cidr</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">maskBits</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">mask</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">subnetInt</span> <span class="o">=</span> <span class="nx">ipToInt</span><span class="p">(</span><span class="nx">subnetAddress</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">subnetMaskInt</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="nx">maskBits</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="nx">maskBits</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">subnetInt</span> <span class="o">&amp;</span> <span class="nx">subnetMaskInt</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">start</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="nx">maskBits</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">//通过 ip 寻找 EC2 实例</span>
<span class="kd">function</span> <span class="nx">findEC2</span><span class="p">(</span><span class="nx">privateIpAddress</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">EC2</span><span class="p">({</span> <span class="nx">region</span><span class="p">,</span> <span class="na">apiVersion</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2016-11-15</span><span class="dl">'</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">Filters</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">Name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">private-ip-address</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">Values</span><span class="p">:</span> <span class="p">[</span><span class="nx">privateIpAddress</span><span class="p">],</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">ec2</span><span class="p">.</span><span class="nx">describeInstances</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span> 
        <span class="kd">const</span> <span class="nx">instances</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Reservations</span><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">reservation</span> <span class="o">=&gt;</span> <span class="nx">reservation</span><span class="p">.</span><span class="nx">Instances</span><span class="p">);</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">instances</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
           <span class="nx">resolve</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">instance</span> <span class="o">=</span> <span class="nx">instances</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">instance</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> 
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 封禁 VPC 内 EC2</span>
<span class="kd">function</span> <span class="nx">banInnerEc2</span><span class="p">(</span><span class="nx">instanceId</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">InstanceId</span><span class="p">:</span> <span class="nx">instanceId</span><span class="p">,</span>
    <span class="na">Groups</span><span class="p">:</span> <span class="p">[</span><span class="nx">forbiddenSgId</span><span class="p">]</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">modifyInstanceAttribute</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">}</span>


<span class="k">async</span> <span class="kd">function</span> <span class="nx">banExternalIp</span><span class="p">(</span><span class="nx">ip</span><span class="p">){</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">vpcId</span> <span class="k">of</span> <span class="nx">protectedVpcIds</span><span class="p">){</span>
    <span class="k">await</span> <span class="nx">banExternalIpInVpc</span><span class="p">(</span><span class="nx">vpcId</span><span class="p">,</span> <span class="nx">ip</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// TODO: 绑定子网。</span>
<span class="c1">// 需要注意：多 NACL 策略需要确认其优先顺序，通常修改 NACL 会有网络风险，实际环境中建议通过外部防火墙进行封禁。</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">banExternalIpInVpc</span><span class="p">(</span><span class="nx">vpcId</span><span class="p">,</span> <span class="nx">ip</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">aclParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">VpcId</span><span class="p">:</span> <span class="nx">vpcId</span>
  <span class="p">};</span>
  
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAcl</span><span class="p">(</span><span class="nx">aclParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">aclId</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">NetworkAcl</span><span class="p">.</span><span class="nx">NetworkAclId</span><span class="p">;</span>
  
  <span class="kd">const</span> <span class="nx">allowAllInRuleParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">NetworkAclId</span><span class="p">:</span> <span class="nx">aclId</span><span class="p">,</span>
    <span class="na">RuleNumber</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">Protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">RuleAction</span><span class="p">:</span> <span class="dl">'</span><span class="s1">allow</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">Egress</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">CidrBlock</span><span class="p">:</span> <span class="s2">`0.0.0.0/0`</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">allowAllOutRuleParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">NetworkAclId</span><span class="p">:</span> <span class="nx">aclId</span><span class="p">,</span>
    <span class="na">RuleNumber</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">Protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">RuleAction</span><span class="p">:</span> <span class="dl">'</span><span class="s1">allow</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">Egress</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">CidrBlock</span><span class="p">:</span> <span class="s2">`0.0.0.0/0`</span>
  <span class="p">};</span>
  
  <span class="kd">const</span> <span class="nx">denyRuleParams</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">NetworkAclId</span><span class="p">:</span> <span class="nx">aclId</span><span class="p">,</span>
    <span class="na">RuleNumber</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">Protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">RuleAction</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">Egress</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">CidrBlock</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">ip</span><span class="p">}</span><span class="s2">/32`</span>
  <span class="p">};</span>
  
  <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAclEntry</span><span class="p">(</span><span class="nx">allowAllInRuleParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAclEntry</span><span class="p">(</span><span class="nx">allowAllOutRuleParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  <span class="k">await</span> <span class="nx">ec2</span><span class="p">.</span><span class="nx">createNetworkAclEntry</span><span class="p">(</span><span class="nx">denyRuleParams</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span>
  
<span class="p">}</span>

</code></pre></div></div>

<p>程序思路：</p>

<ul>
  <li>从攻击事件中得到攻击源的 IP，判断 IP 是否是内网IP。</li>
  <li>如果是 内网 IP，那么则找到当前 IP 对应的主机，并把此主机加入一个特殊的安全组。</li>
  <li>如果是外网 IP，则调用网络防火墙进行封禁（或者通过设置 NACL 进行封禁）。</li>
  <li>此例子仅适用 IPv4。</li>
</ul>

<p>假设以上函数命名为 <code class="language-plaintext highlighter-rouge">LockTarget</code>。</p>

<p>现在模拟一个 GuardDuty 的攻击事件，我测试的 GuardDuty 的事件格式如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"12345678-1234-1234-1234-123456789012"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"detail-type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"GuardDuty Finding"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aws.guardduty"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"account"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456789012"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"time"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T17:01:23Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"region"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"resources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AwsEc2Instance"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"i-01234567890abcdef"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"detail"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"schemaVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"accountId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456789012"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"partition"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aws"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"region"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cn-northwest-1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EXAMPLE-GUARDDUTY-FINDING-ID"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"arn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:guardduty:us-west-2:123456789012:detector/EXAMPLE_DETECTOR_ID/finding/EXAMPLE-GUARDDUTY-FINDING-ID"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UnauthorizedAccess:EC2/RDPBruteForce"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:59:33.185Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:59:33.185Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"severity"</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mi">90</span><span class="p">,</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EC2 Instance 123.45.67.89 is involved in RDP brute force attack"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"...."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resource"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"resourceType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Instance"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"instanceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"instanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"i-01234567890abcdef"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"instanceType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"t2.micro"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"launchTime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"platform"</span><span class="p">:</span><span class="w"> </span><span class="s2">"windows"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"networkInterfaces"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="p">{</span><span class="w">
            </span><span class="nl">"ipv4Addresses"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
              </span><span class="s2">"123.45.67.89"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"networkInterfaceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eni-01234567890abcdef"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"subnetId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"subnet-01234567890abcdef"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"vpcId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vpc-01234567890abcdef"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"service"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"serviceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"guardduty"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"detectorId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EXAMPLE_DETECTOR_ID"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"eventFirstSeen"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"eventLastSeen"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"archived"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"additionalInfo"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ThreatListName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Example Threat List"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DetectTime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-02-25T16:46:47Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DetectContentType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"application/octet-stream"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"AttackType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RDP brute force"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"network"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"direction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IN"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"protocol"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RDP"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sourceIpV4"</span><span class="p">:</span><span class="w"> </span><span class="s2">"192.31.8.115"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>上述代码出自于 ChatGPT，和实际的 GuardDuty 事件可能会稍有出入，请使用真实的 JSON 结构获取攻击源 IP。</li>
</ul>

<h2 id="配置">配置</h2>

<p>现在在 EventBridge 中创建一个规则:</p>

<ul>
  <li>选择具有事件模式的规则</li>
  <li>事件模式选择 GuardDuty, GuardDuty Findings</li>
  <li>目标选择：Lambda 函数, LockTarget</li>
</ul>

<p>通过以上的代码和设置，我们即可将攻击源直接隔离。</p>]]></content><author><name>啤酒云</name></author><category term="aws" /><summary type="html"><![CDATA[在针对 AWS 的网络攻击过程中，有一类攻击是暴力破解 root 账号，此类攻击会被 GuardDuty 监控并记录到。当发生此类暴力破解事件的时候，可以通过 Lambda 来对攻击源进行及时封禁。]]></summary></entry><entry><title type="html">SharingSphere-Proxy 入门</title><link href="https://youbug.cn/2023/02/shardingsphere-proxy-start.html" rel="alternate" type="text/html" title="SharingSphere-Proxy 入门" /><published>2023-02-17T03:27:44+00:00</published><updated>2023-02-17T03:27:44+00:00</updated><id>https://youbug.cn/2023/02/shardingsphere-proxy-start</id><content type="html" xml:base="https://youbug.cn/2023/02/shardingsphere-proxy-start.html"><![CDATA[<p>云厂商提供的数据库读写分离，通常会提供多个 url/endpoint 供开发者使用，一般需要应用自己去区分读写场景进行程序改造。现在有了这种数据访问的分布式中间件，自动对 SQL 语句进行检测和路由。本文体验了一下 SharingSphere-Proxy，并记录了一下配置和验证过程。</p>

<h2 id="配置">配置</h2>

<p>首先把 SharingSphere-Proxy 的配置拷贝出来，用官方文档提供的命令即可：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span> tmp <span class="nt">--entrypoint</span><span class="o">=</span>bash apache/shardingsphere-proxy
docker <span class="nb">cp </span>tmp:/opt/shardingsphere-proxy/conf /host/path/to/conf
docker <span class="nb">rm </span>tmp
</code></pre></div></div>

<ul>
  <li>/host/path/to/conf 修改成你自己的目录。</li>
</ul>

<p>对于简单的读写分离，需要 2 个配置文件，内容分别如下：</p>

<p>server.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">authority</span><span class="pi">:</span>
  <span class="na">users</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">user</span><span class="pi">:</span> <span class="s">admin</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">YourPassword</span>
  <span class="na">privilege</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">ALL_PERMITTED</span>

<span class="na">transaction</span><span class="pi">:</span>
  <span class="na">defaultType</span><span class="pi">:</span> <span class="s">XA</span>
  <span class="na">providerType</span><span class="pi">:</span> <span class="s">Atomikos</span>

<span class="na">sqlParser</span><span class="pi">:</span>
  <span class="na">sqlCommentParseEnabled</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">sqlStatementCache</span><span class="pi">:</span>
    <span class="na">initialCapacity</span><span class="pi">:</span> <span class="m">2000</span>
    <span class="na">maximumSize</span><span class="pi">:</span> <span class="m">65535</span>
  <span class="na">parseTreeCache</span><span class="pi">:</span>
    <span class="na">initialCapacity</span><span class="pi">:</span> <span class="m">128</span>
    <span class="na">maximumSize</span><span class="pi">:</span> <span class="m">1024</span>

<span class="na">props</span><span class="pi">:</span>
  <span class="na">max-connections-size-per-query</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">sql-show</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<ul>
  <li>这里的用户配置即是 SharingSphere-Proxy 模拟的 MySQL 引擎账号</li>
</ul>

<p>config-readwrite-splitting.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">databaseName</span><span class="pi">:</span> <span class="s">dbname</span>

<span class="na">dataSources</span><span class="pi">:</span>
  <span class="na">write_ds</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://xxxxxxxxx.rds.cn-northwest-1.amazonaws.com.cn:3306/dbname</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">thisDBPwd</span>
    <span class="na">connectionTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">30000</span>
    <span class="na">idleTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">60000</span>
    <span class="na">maxLifetimeMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span>
    <span class="na">maxPoolSize</span><span class="pi">:</span> <span class="m">50</span>
    <span class="na">minPoolSize</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">read_ds_0</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://xxxxxxxxxt.cluster-ro-xxxx.rds.cn-northwest-1.amazonaws.com.cn:3306/dbname</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">thisDBPwd</span>
    <span class="na">connectionTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">30000</span>
    <span class="na">idleTimeoutMilliseconds</span><span class="pi">:</span> <span class="m">60000</span>
    <span class="na">maxLifetimeMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span>
    <span class="na">maxPoolSize</span><span class="pi">:</span> <span class="m">50</span>
    <span class="na">minPoolSize</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="kt">!READWRITE_SPLITTING</span>
    <span class="na">dataSources</span><span class="pi">:</span>
      <span class="na">readwrite_ds</span><span class="pi">:</span>
        <span class="na">staticStrategy</span><span class="pi">:</span>
          <span class="na">writeDataSourceName</span><span class="pi">:</span> <span class="s">write_ds</span>
          <span class="na">readDataSourceNames</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">read_ds_0</span>
        <span class="na">loadBalancerName</span><span class="pi">:</span> <span class="s">random</span>
    <span class="na">loadBalancers</span><span class="pi">:</span>
      <span class="na">random</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">RANDOM</span>

</code></pre></div></div>

<ul>
  <li>dbname url 密码这些需要修改成你自己的。</li>
</ul>

<p>上述配置的具体意思参考官方文档。</p>

<h2 id="启动并验证">启动并验证</h2>

<p>如果源数据使用 MySQL 引擎，需要下载 MySQL 的 JDBC 的驱动包到 ext-lib 中，如：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar
</code></pre></div></div>

<p>使用 docker 命令启动：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="nv">$PWD</span>/conf:/opt/shardingsphere-proxy/conf <span class="se">\</span>
    <span class="nt">-v</span> <span class="nv">$PWD</span>/ext-lib:/opt/shardingsphere-proxy/ext-lib <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">PORT</span><span class="o">=</span>3308 <span class="nt">-p</span> 3306:3308 apache/shardingsphere-proxy
</code></pre></div></div>

<ul>
  <li>上述命令启动了 SharingSphere-Proxy，并把端口映射到了主机的 3306 端口。</li>
</ul>

<p>启动之后，则可以在客户端透明访问 SharingSphere-Proxy 了。</p>

<p>下面使用 MySQL 的标准客户端进行测试，如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-h</span> 172.31.14.22 <span class="nt">-uadmin</span> <span class="nt">-p</span>
</code></pre></div></div>

<p>输入密码后，可以直达 MySQL:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-172-31-8-115:~<span class="nv">$ </span>mysql <span class="nt">-h</span> 172.31.14.22 <span class="nt">-uadmin</span> <span class="nt">-p</span>
Enter password:
Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span><span class="nb">.</span>
Your MySQL connection <span class="nb">id </span>is 2
Server version: 5.7.22-ShardingSphere-Proxy 5.3.1 MySQL Community Server <span class="o">(</span>GPL<span class="o">)</span>

Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type <span class="s1">'help;'</span> or <span class="s1">'\h'</span> <span class="k">for </span>help. Type <span class="s1">'\c'</span> to clear the current input statement.

mysql&gt;
</code></pre></div></div>

<p>创建数据库，use 一下，创建一个表。</p>

<pre><code class="language-SQL">CREATE TABLE student 
( 
  id int NOT NULL AUTO_INCREMENT, 
  t varchar(50) NULL, 
  PRIMARY KEY (id) 
);
</code></pre>

<p>测试一下如下的 SQL</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">student</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">'1'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'2'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'3'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'4'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'5'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'6'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'7'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'8'</span><span class="p">);</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">student</span><span class="p">;</span>
</code></pre></div></div>

<p>期望的结果是，他能正确路由。SharingSphere-Proxy 的 log 显示如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.643 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Logic SQL: INSERT INTO student <span class="o">(</span>t<span class="o">)</span> values <span class="o">(</span><span class="s1">'1'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'2'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'3'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'4'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'5'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'6'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'7'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'8'</span><span class="o">)</span>
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.644 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Actual SQL: write_ds ::: INSERT INTO student <span class="o">(</span>t<span class="o">)</span> values <span class="o">(</span><span class="s1">'1'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'2'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'3'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'4'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'5'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'6'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'7'</span><span class="o">)</span>, <span class="o">(</span><span class="s1">'8'</span><span class="o">)</span>
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.685 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Logic SQL: SELECT <span class="k">*</span> from student
<span class="o">[</span>INFO <span class="o">]</span> 2023-02-17 03:52:50.685 <span class="o">[</span>Connection-2-ThreadExecutor] ShardingSphere-SQL - Actual SQL: read_ds_0 ::: SELECT <span class="k">*</span> from student
...
</code></pre></div></div>

<p>由于同步数据需要一些时间，所以上述测试的 SQL 把 INSERT 和 SELECT 操作写在了一句话里。
可以看到，插入成功之后，并不总是能直接拿到刚刚插入的结果，这个也证实了查询操作的确路由到了 ro 的 endpoint 上了。</p>

<p>写完收工！</p>

<hr />

<p>参考：</p>

<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/startup/docker/">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/startup/docker/</a></p>

<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/</a></p>

<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/</a></p>]]></content><author><name>啤酒云</name></author><category term="data" /><category term="SharingSphere" /><summary type="html"><![CDATA[云厂商提供的数据库读写分离，通常会提供多个 url/endpoint 供开发者使用，一般需要应用自己去区分读写场景进行程序改造。现在有了这种数据访问的分布式中间件，自动对 SQL 语句进行检测和路由。本文体验了一下 SharingSphere-Proxy，并记录了一下配置和验证过程。]]></summary></entry><entry><title type="html">企业微信集成 ChatGPT 开发笔记</title><link href="https://youbug.cn/2023/02/wecom-chatgpt.html" rel="alternate" type="text/html" title="企业微信集成 ChatGPT 开发笔记" /><published>2023-02-12T10:09:44+00:00</published><updated>2023-02-12T10:09:44+00:00</updated><id>https://youbug.cn/2023/02/wecom-chatgpt</id><content type="html" xml:base="https://youbug.cn/2023/02/wecom-chatgpt.html"><![CDATA[<p>原来是想使用企业微信的机器人来集成 ChatGPT，但… 这玩意不支持收消息，只能推送消息，所以只能另寻他法。</p>

<h2 id="思路">思路</h2>

<p>可以收消息的途径：企业应用。</p>

<p>可以发消息的：企业应用的推送，群机器人。</p>

<h2 id="过程及重点代码">过程及重点代码</h2>

<p>步骤如下：</p>

<h3 id="新建企业应用">新建企业应用</h3>

<p>限制条件：必须是认证的企业，有认证过的相关域名。</p>

<p>新建一个企业微信的企业内部应用，并启用接收消息的 API 功能。</p>

<p>第一步必须有一个认证的过程，需要验证有效性，你必须把他的结果解密出来发给他。这个过程是他发送 GET 请求到你预定的 URL 的。</p>

<p>相关的验证代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">//计算签名，如果计算结果和他给的结果一致就是有效的</span>
  <span class="na">computeSign</span><span class="p">:</span> <span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">msg_encrypt</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">tmpArr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">token</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">msg_encrypt</span><span class="p">];</span>
    <span class="k">return</span> <span class="nx">sha1</span><span class="p">(</span><span class="nx">tmpArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
  <span class="p">},</span>
  <span class="na">decode</span><span class="p">:</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encodingAESKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">aesKey</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">encodingAESKey</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">=</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">aesCipher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipheriv</span><span class="p">(</span><span class="dl">"</span><span class="s2">aes-256-cbc</span><span class="dl">"</span><span class="p">,</span> <span class="nx">aesKey</span><span class="p">,</span> <span class="nx">aesKey</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">));</span>
    <span class="nx">aesCipher</span><span class="p">.</span><span class="nx">setAutoPadding</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">decipheredBuff</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">aesCipher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">),</span> <span class="nx">aesCipher</span><span class="p">.</span><span class="nx">final</span><span class="p">()]);</span>
    <span class="nx">decipheredBuff</span> <span class="o">=</span> <span class="nx">PKCS7Decoder</span><span class="p">(</span><span class="nx">decipheredBuff</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">len_netOrder_corpid</span> <span class="o">=</span> <span class="nx">decipheredBuff</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">msg_len</span> <span class="o">=</span> <span class="nx">len_netOrder_corpid</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nx">readUInt32BE</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">len_netOrder_corpid</span><span class="p">.</span><span class="nx">subarray</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">msg_len</span> <span class="o">+</span> <span class="mi">4</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span> 
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">sha1</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">md5sum</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="dl">'</span><span class="s1">sha1</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">md5sum</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">ciphertext</span> <span class="o">=</span> <span class="nx">md5sum</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="dl">'</span><span class="s1">hex</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">ciphertext</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">PKCS7Decoder</span><span class="p">(</span><span class="nx">buff</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">pad</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">[</span><span class="nx">buff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pad</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">pad</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pad</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">buff</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">buff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">pad</span><span class="p">);</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">QiWeiController</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">async</span> <span class="nx">verifySignature</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">app</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">msg_signature</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">echostr</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">mySign</span> <span class="o">=</span> <span class="nx">computeSign</span><span class="p">(</span><span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">echostr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">mySign</span> <span class="o">!=</span> <span class="nx">msg_signature</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Invalid signature.</span><span class="dl">"</span><span class="p">;</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">echostr</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span><span class="p">);</span>
      <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>请注意，上述代码有可能并不在一个文件中。</li>
</ul>

<h3 id="接收消息">接收消息</h3>

<p>这个应用创建了之后，在客户端的工作台能看到这个应用，你可以和这个应用聊天，发给这个应用的消息都会被接受。发送的信息会被 Post 到你定义的 URL。</p>

<p>接收信息代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">decodeIncomingMsg</span><span class="p">:</span> <span class="p">(</span><span class="nx">encMsg</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ptToUserName</span> <span class="o">=</span> <span class="sr">/&lt;ToUserName&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">ToUserName&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptFromUserName</span> <span class="o">=</span> <span class="sr">/&lt;FromUserName&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">FromUserName&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptContent</span> <span class="o">=</span> <span class="sr">/&lt;Content&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">Content&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">realMsg</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">encMsg</span><span class="p">,</span> <span class="nx">key</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">resMsg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">ToUserName</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptToUserName</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
      <span class="na">FromUserName</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptFromUserName</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
      <span class="na">Content</span><span class="p">:</span> <span class="nx">realMsg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptContent</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">};</span>
    <span class="c1">//这里可以修改到 MQ 中，并最终落盘</span>
    <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">resMsg</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">resMsg</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">QiWeiController</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">async</span> <span class="nx">incoming</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">app</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">msg_signature</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">ptEncMsg</span> <span class="o">=</span> <span class="sr">/&lt;Encrypt&gt;&lt;!</span><span class="se">\[</span><span class="sr">CDATA</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]\]</span><span class="sr">&gt;&lt;</span><span class="se">\/</span><span class="sr">Encrypt&gt;/</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">found</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ptEncMsg</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">found</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">mySign</span> <span class="o">=</span> <span class="nx">computeSign</span><span class="p">(</span><span class="nx">QIWEI_TOKEN</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">mySign</span> <span class="o">==</span> <span class="nx">msg_signature</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">decodeIncomingMsg</span><span class="p">(</span><span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">QIWEI_ENCODING_AES_KEY</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>接收到信息之后，将信息解码出来，放到一个数组(队列) 中，供其他 deamon 方法调用。</li>
</ul>

<h3 id="请求-chatgpt">请求 ChatGPT</h3>

<p>使用了 chatpgt 这个 npm 包，调用非常简单。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">qiwei</span><span class="o">=</span><span class="p">{</span>

  <span class="na">chatdeamon</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">paimon</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">tarMsg</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="c1">// tarMsg &amp;&amp; console.log(tarMsg);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">tarMsg</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">conversationId</span> <span class="o">=</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">ToUserName</span><span class="p">;</span>
        <span class="kd">let</span> <span class="nx">chatOpts</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">timeoutMs</span><span class="p">:</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
          <span class="nx">conversationId</span>
        <span class="p">};</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">qiwei</span><span class="p">.</span><span class="nx">parentMessageId</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">chatOpts</span><span class="p">.</span><span class="nx">parentMessageId</span> <span class="o">=</span> <span class="nx">parentMessageId</span><span class="p">;</span>
        <span class="p">};</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">输入:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="dl">"</span><span class="s2">堆积量:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">incomings</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">paimon</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="nx">chatOpts</span><span class="p">);</span>
        <span class="nx">parentMessageId</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">投送结果：</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
        <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">sendToPerson</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">);</span>
        <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">paimonSendToRoom</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">tarMsg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>写了死循环处理消息，这里 的 app 是 eggjs 的上下文的，用于取配置。</li>
  <li>ChatGPT 的 API 经常限流，这里处理成了同步调用，一条一条往下进行。</li>
  <li>代码中 paimon 是一个 ChatGPT 实例。</li>
</ul>

<h3 id="分发消息">分发消息</h3>

<p>上面的代码可以看到拿到结果后分别分发到了个人和机器人。</p>

<p>发送到个人可以在直接在单聊对话中看到结果，同时可以让企业微信机器人分发到群里。</p>

<p>分发到个人的代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">getAccessToken</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">access_token</span><span class="dl">"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">expire_time</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">expire_time</span> <span class="o">=</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">expire_time</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">current</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">isExpire</span> <span class="o">=</span> <span class="nx">expire_time</span> <span class="o">&lt;</span> <span class="nx">current</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isExpire</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">access_response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="s2">`https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_CORP_ID</span><span class="p">}</span><span class="s2">&amp;corpsecret=</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_APP_SECRET</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span>
    <span class="p">});</span>
    <span class="kd">let</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">access_token</span><span class="p">,</span> <span class="nx">expires_in</span>
    <span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">access_response</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">access_token</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">qiwei</span><span class="p">.</span><span class="nx">access_token</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">access_token</span><span class="p">,</span>
        <span class="na">expire_time</span><span class="p">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="nx">expires_in</span>
      <span class="p">};</span>
      <span class="k">return</span> <span class="nx">access_token</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`获取 access_token 失败`</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">access_response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">sendToPerson</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">access_token</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">qiwei</span><span class="p">.</span><span class="nx">getAccessToken</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=</span><span class="p">${</span><span class="nx">access_token</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">touser</span><span class="p">:</span> <span class="nx">to</span><span class="p">,</span>
      <span class="na">msgtype</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">agentid</span><span class="p">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_APP_AGENT_ID</span><span class="p">,</span>
      <span class="na">text</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">content</span><span class="p">:</span> <span class="nx">a</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">msg</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">个人投送完成！</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>直接调用 信息发送 API 完成。</li>
</ul>

<p>使用群机器人完成发送</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qiwei</span> <span class="o">=</span> <span class="p">{</span>

  <span class="na">paimonSendToRoom</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">q</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">msgtype</span><span class="p">:</span> <span class="dl">"</span><span class="s2">markdown</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">markdown</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">content</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">to</span><span class="p">}</span><span class="s2">: **</span><span class="p">${</span><span class="nx">q</span><span class="p">}</span><span class="s2">**
---
&lt;font color="warning"&gt;</span><span class="p">${</span><span class="nx">a</span><span class="p">}</span><span class="s2">&lt;/font&gt;`</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">curl</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">QIWEI_BOT_WEBHOOK</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">msg</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">机器人投送完成！</span><span class="dl">"</span><span class="p">);</span>

  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>这个 API 很简单，直接把消息组装好丢给 webhook 就行了。表扬一下这个 API。</li>
</ul>

<h2 id="总结一下">总结一下</h2>

<p>就不画时序图了。</p>

<p>整体的过程是：</p>

<ul>
  <li>用户给企业微信 APP 发信息。</li>
  <li>APP 收到信息丢入队列中，包含了文本，发送人等信息。</li>
  <li>另一个进程获取从队列中获取一个记录，调用 openai API 得到结果。</li>
  <li>使用企业微信的消息发送 API 将结果发给问问题的人。</li>
  <li>使用群机器人的 WebHook 将结果发送给相应的群。</li>
</ul>

<p>效果图如下：左侧是和 APP 聊天，右侧是一个群聊机器人。</p>

<p><img src="/assets/posts/tucao/wecom-chatgpt.jpg" alt="企业微信效果图" /></p>

<h2 id="吐槽">吐槽</h2>

<p>1 隔壁的钉钉和飞书的机器人都能直接收发消息，为啥你不行。</p>

<p>2 企业微信的 API 设计，有 XML 的，有 Json 的，API 调用方式也是千奇百怪。收消息的那个签名验证搞那么复杂，示例和 SDK 还不全。</p>

<p>3 文档真乱，要到处去找。</p>

<p>4 哈哈，我的机器人名字叫 派萌/pimon。</p>

<hr />

<p>参考链接：</p>

<p><a href="https://developer.work.weixin.qq.com/document/path/91770">https://developer.work.weixin.qq.com/document/path/91770</a></p>

<p><a href="https://developer.work.weixin.qq.com/document/10514">https://developer.work.weixin.qq.com/document/10514</a></p>

<p><a href="https://www.npmjs.com/package/chatgpt">https://www.npmjs.com/package/chatgpt</a></p>

<p><a href="https://developer.work.weixin.qq.com/document/path/90236">https://developer.work.weixin.qq.com/document/path/90236</a></p>

<p><a href="https://github.com/WecomTeam/InnerAppCodeSample/tree/main/server">https://github.com/WecomTeam/InnerAppCodeSample/tree/main/server</a></p>]]></content><author><name>啤酒云</name></author><category term="tucao," /><category term="aiml" /><summary type="html"><![CDATA[原来是想使用企业微信的机器人来集成 ChatGPT，但… 这玩意不支持收消息，只能推送消息，所以只能另寻他法。]]></summary></entry></feed>